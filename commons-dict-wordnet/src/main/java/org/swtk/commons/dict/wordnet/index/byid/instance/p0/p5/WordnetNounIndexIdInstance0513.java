package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p5;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0513 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("05130115", "{\"term\":\"minority\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"15177221\", \"05130115\", \"07983184\"]}");
	add("05130363", "{\"term\":\"fewness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05130363\"]}");
	add("05130471", "{\"term\":\"roundness\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05008078\", \"05080080\", \"05130471\", \"07097164\"]}");
	add("05130681", "{\"term\":\"extent\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05130681\", \"13964158\"]}");
	add("05131025", "{\"term\":\"coverage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06696529\", \"05131025\", \"13365679\"]}");
	add("05131200", "{\"term\":\"frontage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03318278\", \"13850156\", \"05131200\"]}");
	add("05131322", "{\"term\":\"bound\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00121022\", \"05131322\", \"08529331\", \"13926085\"]}");
	add("05131322", "{\"term\":\"boundary\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05131322\", \"13926085\", \"08529331\"]}");
	add("05131322", "{\"term\":\"limit\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"13780436\", \"13780696\", \"08610212\", \"08610686\", \"15293814\", \"05131322\"]}");
	add("05131669", "{\"term\":\"knife-edge\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05131669\"]}");
	add("05131799", "{\"term\":\"absoluteness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04745638\", \"05131799\"]}");
	add("05131799", "{\"term\":\"starkness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04705167\", \"05131799\"]}");
	add("05131799", "{\"term\":\"utterness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05131799\"]}");
	add("05132057", "{\"term\":\"heat barrier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132057\"]}");
	add("05132057", "{\"term\":\"thermal barrier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132057\"]}");
	add("05132193", "{\"term\":\"level best\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132193\"]}");
	add("05132193", "{\"term\":\"maximum\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08615688\", \"05132193\", \"13798337\"]}");
	add("05132193", "{\"term\":\"utmost\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132193\"]}");
	add("05132193", "{\"term\":\"uttermost\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132193\"]}");
	add("05132458", "{\"term\":\"brink\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05132458\", \"08534405\", \"13926744\"]}");
	add("05132458", "{\"term\":\"verge\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04535551\", \"07282278\", \"05132458\", \"13926744\"]}");
	add("05132642", "{\"term\":\"ambit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05132642\"]}");
	add("05132642", "{\"term\":\"compass\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03084637\", \"05631411\", \"05132642\", \"03084501\"]}");
	add("05132642", "{\"term\":\"orbit\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05292774\", \"08629897\", \"05132642\", \"14537641\", \"08629606\"]}");
	add("05132642", "{\"term\":\"range\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"04337478\", \"05631411\", \"08016746\", \"08416543\", \"04060330\", \"09426609\", \"08646774\", \"08646496\", \"05132642\"]}");
	add("05132642", "{\"term\":\"reach\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05631411\", \"00342069\", \"05132642\", \"08646496\"]}");
	add("05132642", "{\"term\":\"scope\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03863348\", \"04410773\", \"14536861\", \"05132642\"]}");
	add("05133331", "{\"term\":\"approximate range\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05133331\"]}");
	add("05133331", "{\"term\":\"ballpark\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05133331\", \"02785801\"]}");
	add("05133493", "{\"term\":\"confines\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05133493\"]}");
	add("05133627", "{\"term\":\"contrast\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05133627\", \"05719031\", \"05756783\", \"00653056\", \"13877824\"]}");
	add("05133876", "{\"term\":\"internationalism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05133876\", \"05972361\"]}");
	add("05133876", "{\"term\":\"internationality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05133876\"]}");
	add("05134114", "{\"term\":\"register\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02980897\", \"04078648\", \"04078824\", \"04078988\", \"13433494\", \"05134114\", \"06519032\"]}");
	add("05134415", "{\"term\":\"head register\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134415\"]}");
	add("05134415", "{\"term\":\"head tone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134415\"]}");
	add("05134415", "{\"term\":\"head voice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134415\"]}");
	add("05134622", "{\"term\":\"falsetto\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134622\"]}");
	add("05134765", "{\"term\":\"chest register\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134765\"]}");
	add("05134765", "{\"term\":\"chest tone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134765\"]}");
	add("05134765", "{\"term\":\"chest voice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05134765\"]}");
	add("05134905", "{\"term\":\"latitude\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05134905\", \"08613276\", \"14018633\", \"08613087\"]}");
	add("05135047", "{\"term\":\"horizon\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"08603373\", \"08675749\", \"05135047\", \"08603184\"]}");
	add("05135047", "{\"term\":\"purview\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05135047\"]}");
	add("05135047", "{\"term\":\"view\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"04682218\", \"05135047\", \"04151847\", \"05992348\", \"06794876\", \"05954491\", \"08578489\", \"00883327\", \"05941982\", \"06218486\"]}");
	add("05135224", "{\"term\":\"expanse\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09300444\", \"05135784\", \"05135224\"]}");
	add("05135224", "{\"term\":\"sweep\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00345975\", \"00560592\", \"04378042\", \"07489785\", \"09938519\", \"05135224\"]}");
	add("05135361", "{\"term\":\"gamut\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06870537\", \"05135361\"]}");
	add("05135484", "{\"term\":\"spectrum\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05135484\", \"11440945\"]}");
	add("05135635", "{\"term\":\"palette\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03885402\", \"03884371\", \"05135635\"]}");
	add("05135635", "{\"term\":\"pallet\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03884371\", \"03885033\", \"03885153\", \"03885279\", \"05135635\"]}");
	add("05135784", "{\"term\":\"area\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05135784\", \"02738693\", \"14537641\", \"05229188\", \"05823643\", \"08514304\"]}");
	add("05135784", "{\"term\":\"expanse\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09300444\", \"05135784\", \"05135224\"]}");
	add("05135784", "{\"term\":\"surface area\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05135784\"]}");
	add("05136135", "{\"term\":\"acreage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05136135\"]}");
	add("05136135", "{\"term\":\"land area\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05136135\"]}");
	add("05136319", "{\"term\":\"footprint\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05136319\", \"06659617\", \"06657802\"]}");
	add("05136466", "{\"term\":\"length\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03661557\", \"05136830\", \"05140372\", \"05058400\", \"05136466\"]}");
	add("05136830", "{\"term\":\"distance\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"15197470\", \"15197259\", \"07521110\", \"05136830\", \"08573923\", \"05091408\"]}");
	add("05136830", "{\"term\":\"length\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03661557\", \"05136830\", \"05140372\", \"05058400\", \"05136466\"]}");
	add("05137193", "{\"term\":\"arm\u0027s length\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05137193\"]}");
	add("05137293", "{\"term\":\"gauge\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05110583\", \"05110730\", \"05137293\", \"13876298\", \"03434198\"]}");
	add("05137475", "{\"term\":\"light time\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05137475\"]}");
	add("05137667", "{\"term\":\"skip distance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05137667\"]}");
	add("05137879", "{\"term\":\"wingspan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05137879\"]}");
	add("05137879", "{\"term\":\"wingspread\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05137879\", \"05138000\"]}");
	add("05138000", "{\"term\":\"wingspread\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05137879\", \"05138000\"]}");
	add("05138140", "{\"term\":\"yardage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05138140\"]}");
	add("05138288", "{\"term\":\"hour\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05138288\", \"15253706\", \"15253174\", \"15252642\"]}");
	add("05138288", "{\"term\":\"minute\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05138288\", \"06518306\", \"13632810\", \"15269461\", \"15271664\", \"15259561\"]}");
	add("05138459", "{\"term\":\"milage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05138459\"]}");
	add("05138459", "{\"term\":\"mileage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13315052\", \"13845499\", \"05138459\"]}");
	add("05138548", "{\"term\":\"elevation\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00374352\", \"03285963\", \"05094110\", \"05138548\", \"09389214\", \"13858749\", \"13963489\", \"07385271\"]}");
	add("05138802", "{\"term\":\"isometry\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04755894\", \"05138802\", \"13808399\", \"15303946\"]}");
	add("05138912", "{\"term\":\"altitude\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13858749\", \"13920350\", \"05138912\"]}");
	add("05138912", "{\"term\":\"height\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05138912\", \"05009517\", \"13963489\", \"05144430\"]}");
	add("05139167", "{\"term\":\"level\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"03370837\", \"06257026\", \"03541528\", \"03664184\", \"05139167\", \"13962925\", \"14451564\", \"05101152\"]}");
	add("05139310", "{\"term\":\"grade\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"02409604\", \"05101152\", \"05139310\", \"05745098\", \"07126990\", \"13633562\", \"05075885\", \"14451564\", \"08255384\"]}");
	add("05139310", "{\"term\":\"ground level\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03468313\", \"05139310\"]}");
	add("05139486", "{\"term\":\"water level\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04568296\", \"08696521\", \"09499253\", \"05139486\"]}");
	add("05139605", "{\"term\":\"sea level\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05139605\"]}");
	add("05139807", "{\"term\":\"ceiling\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05139932\", \"06670391\", \"05139807\", \"02993828\"]}");
	add("05139932", "{\"term\":\"ceiling\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05139932\", \"06670391\", \"05139807\", \"02993828\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }