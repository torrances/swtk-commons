package org.swtk.commons.dict.wordnet.index.name.instance.c.o.l.o;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCOLO {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"colobus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02491333\"]}");
	add("{\"term\":\"colocasia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11806834\"]}");
	add("{\"term\":\"cologne\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03075025\", \"08790140\"]}");
	add("{\"term\":\"colombia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08749949\"]}");
	add("{\"term\":\"colombian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09717913\"]}");
	add("{\"term\":\"colombo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08737298\"]}");
	add("{\"term\":\"colon\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06855710\", \"08757502\", \"13689477\", \"13689748\", \"05543502\"]}");
	add("{\"term\":\"colonel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09956708\"]}");
	add("{\"term\":\"colonial\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09957146\"]}");
	add("{\"term\":\"colonialism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00427529\"]}");
	add("{\"term\":\"colonialist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09957260\"]}");
	add("{\"term\":\"colonic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00697400\"]}");
	add("{\"term\":\"colonisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01254867\"]}");
	add("{\"term\":\"coloniser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09957361\"]}");
	add("{\"term\":\"colonist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10602839\"]}");
	add("{\"term\":\"colonization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01254867\"]}");
	add("{\"term\":\"colonizer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09957361\"]}");
	add("{\"term\":\"colonnade\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02736218\", \"03075164\"]}");
	add("{\"term\":\"colonoscope\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03075292\"]}");
	add("{\"term\":\"colonoscopy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00643689\"]}");
	add("{\"term\":\"colony\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"08012452\", \"08516868\", \"08531343\", \"09070916\", \"08012298\", \"08390976\"]}");
	add("{\"term\":\"colophon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03075435\"]}");
	add("{\"term\":\"colophony\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14920279\"]}");
	add("{\"term\":\"color\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04682325\", \"05853190\", \"15009532\", \"04685309\", \"04995727\", \"05200606\", \"04963771\"]}");
	add("{\"term\":\"coloradan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09761147\"]}");
	add("{\"term\":\"coloradillo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12688892\"]}");
	add("{\"term\":\"colorado\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09272324\", \"09272922\", \"09089754\"]}");
	add("{\"term\":\"coloration\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00162559\", \"04983255\", \"04995727\"]}");
	add("{\"term\":\"coloratura\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00547336\", \"09957538\"]}");
	add("{\"term\":\"colorcast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06633297\"]}");
	add("{\"term\":\"colorimeter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03075556\"]}");
	add("{\"term\":\"colorimetry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00648779\"]}");
	add("{\"term\":\"coloring\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00275785\", \"04963771\", \"07582704\"]}");
	add("{\"term\":\"colorist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09958130\"]}");
	add("{\"term\":\"colorlessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04965811\"]}");
	add("{\"term\":\"colors\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03076060\", \"03075927\"]}");
	add("{\"term\":\"colossae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08719369\"]}");
	add("{\"term\":\"colosseum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03076832\"]}");
	add("{\"term\":\"colossian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09958309\"]}");
	add("{\"term\":\"colossians\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06456381\"]}");
	add("{\"term\":\"colossus\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09958449\", \"10148446\"]}");
	add("{\"term\":\"colostomy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00669795\"]}");
	add("{\"term\":\"colostrum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05406699\"]}");
	add("{\"term\":\"colour\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04682325\", \"04685309\", \"04963771\", \"04995727\", \"05200606\", \"05853190\", \"15009532\"]}");
	add("{\"term\":\"colouration\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00162559\", \"04983255\", \"04995727\"]}");
	add("{\"term\":\"colourcast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06633297\"]}");
	add("{\"term\":\"colouring\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00275785\", \"04963771\", \"07582704\"]}");
	add("{\"term\":\"colourlessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04965811\"]}");
	add("{\"term\":\"colours\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03075927\", \"03076060\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }