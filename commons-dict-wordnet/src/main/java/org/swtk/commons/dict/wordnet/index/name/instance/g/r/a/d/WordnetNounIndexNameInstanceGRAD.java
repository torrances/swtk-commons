package org.swtk.commons.dict.wordnet.index.name.instance.g.r.a.d;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceGRAD {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"grad\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09805779\", \"13633562\"]}");
	add("{\"term\":\"gradation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01005671\", \"07126990\", \"14453034\"]}");
	add("{\"term\":\"grade\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"02409604\", \"05101152\", \"05139310\", \"05745098\", \"07126990\", \"13633562\", \"05075885\", \"14451564\", \"08255384\"]}");
	add("{\"term\":\"grader\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10160303\"]}");
	add("{\"term\":\"gradient\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05075630\", \"13881709\"]}");
	add("{\"term\":\"grading\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00876655\", \"00914407\", \"01012276\"]}");
	add("{\"term\":\"gradual\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07046920\"]}");
	add("{\"term\":\"graduality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05068974\"]}");
	add("{\"term\":\"gradualness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05068974\", \"05077022\"]}");
	add("{\"term\":\"graduate\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03456417\", \"09805779\"]}");
	add("{\"term\":\"graduation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01005671\", \"06814823\", \"07469368\", \"00212914\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }