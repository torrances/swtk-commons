package org.swtk.commons.dict.wordnet.index.name.instance.b.l.o.o;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceBLOO {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"blood\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"07960894\", \"08118903\", \"10525535\", \"04636104\", \"05407190\"]}");
	add("{\"term\":\"bloodbath\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00225127\"]}");
	add("{\"term\":\"bloodberry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11877042\"]}");
	add("{\"term\":\"bloodguilt\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14014606\"]}");
	add("{\"term\":\"bloodhound\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02091118\"]}");
	add("{\"term\":\"bloodiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04632044\", \"13998384\"]}");
	add("{\"term\":\"bloodleaf\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11847038\"]}");
	add("{\"term\":\"bloodletting\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00225127\", \"00699257\"]}");
	add("{\"term\":\"bloodline\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04931084\", \"08118903\"]}");
	add("{\"term\":\"bloodlust\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07500343\"]}");
	add("{\"term\":\"bloodmobile\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02857889\"]}");
	add("{\"term\":\"bloodroot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11928546\"]}");
	add("{\"term\":\"bloodshed\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00225127\", \"00222045\"]}");
	add("{\"term\":\"bloodstain\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04702953\"]}");
	add("{\"term\":\"bloodstock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08118721\"]}");
	add("{\"term\":\"bloodstone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14805790\"]}");
	add("{\"term\":\"bloodstream\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05409294\"]}");
	add("{\"term\":\"bloodsucker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01940550\"]}");
	add("{\"term\":\"bloodthirstiness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04632044\"]}");
	add("{\"term\":\"bloodworm\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01940220\"]}");
	add("{\"term\":\"bloodwort\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12332627\"]}");
	add("{\"term\":\"bloom\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"11430641\", \"15320288\", \"14074353\", \"15176601\", \"11689786\", \"13460563\"]}");
	add("{\"term\":\"bloomer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00075610\", \"11692720\"]}");
	add("{\"term\":\"bloomeria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12464766\"]}");
	add("{\"term\":\"bloomers\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02857998\"]}");
	add("{\"term\":\"bloomfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10873363\"]}");
	add("{\"term\":\"blooming\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13460563\"]}");
	add("{\"term\":\"bloomington\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09107634\"]}");
	add("{\"term\":\"bloomsbury\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08895147\"]}");
	add("{\"term\":\"blooper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00075610\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }