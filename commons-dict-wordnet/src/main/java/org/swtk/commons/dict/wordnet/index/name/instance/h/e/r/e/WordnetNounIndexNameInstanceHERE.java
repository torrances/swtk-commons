package org.swtk.commons.dict.wordnet.index.name.instance.h.e.r.e;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceHERE {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"here\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09586312\", \"08506507\"]}");
	add("{\"term\":\"hereafter\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"15146567\", \"15168824\"]}");
	add("{\"term\":\"hereditament\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13266116\"]}");
	add("{\"term\":\"hereditarianism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05980780\"]}");
	add("{\"term\":\"heredity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04928044\", \"13514602\"]}");
	add("{\"term\":\"hereford\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02410277\"]}");
	add("{\"term\":\"hereness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13981958\"]}");
	add("{\"term\":\"herero\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07005885\", \"09712311\"]}");
	add("{\"term\":\"heresy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05989297\", \"06222157\"]}");
	add("{\"term\":\"heretic\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10191625\", \"10191427\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }