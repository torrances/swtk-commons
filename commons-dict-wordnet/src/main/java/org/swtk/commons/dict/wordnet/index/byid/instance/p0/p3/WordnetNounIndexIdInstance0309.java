package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p3;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0309 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("03090225", "{\"term\":\"concentration camp\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14472158\", \"03090225\"]}");
	add("03090225", "{\"term\":\"stockade\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03090225\", \"04329669\"]}");
	add("03090499", "{\"term\":\"concert grand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03090499\"]}");
	add("03090499", "{\"term\":\"concert piano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03090499\"]}");
	add("03090622", "{\"term\":\"concert hall\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03090622\"]}");
	add("03090712", "{\"term\":\"concertina\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03090712\", \"03091290\"]}");
	add("03090964", "{\"term\":\"chemnitzer concertina\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03090964\"]}");
	add("03091072", "{\"term\":\"english concertina\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091072\"]}");
	add("03091170", "{\"term\":\"anglo-german concertina\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091170\"]}");
	add("03091290", "{\"term\":\"concertina\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03090712\", \"03091290\"]}");
	add("03091385", "{\"term\":\"concourse\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00147911\", \"03091385\", \"08199634\"]}");
	add("03091491", "{\"term\":\"cement mixer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091491\"]}");
	add("03091491", "{\"term\":\"concrete mixer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091491\"]}");
	add("03091667", "{\"term\":\"condensation pump\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091667\"]}");
	add("03091667", "{\"term\":\"diffusion pump\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091667\"]}");
	add("03091788", "{\"term\":\"condenser\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03091788\", \"03091943\", \"03092065\", \"02958683\"]}");
	add("03091788", "{\"term\":\"optical condenser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03091788\"]}");
	add("03091943", "{\"term\":\"condenser\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03091788\", \"03091943\", \"03092065\", \"02958683\"]}");
	add("03092065", "{\"term\":\"condenser\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03091788\", \"03091943\", \"03092065\", \"02958683\"]}");
	add("03092238", "{\"term\":\"capacitor microphone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03092238\"]}");
	add("03092238", "{\"term\":\"capacitor mike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03092238\"]}");
	add("03092238", "{\"term\":\"condenser microphone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03092238\"]}");
	add("03092238", "{\"term\":\"condenser mike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03092238\"]}");
	add("03092476", "{\"term\":\"conditioner\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03092476\", \"09972657\", \"00626791\"]}");
	add("03092620", "{\"term\":\"condom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03092620\"]}");
	add("03092620", "{\"term\":\"prophylactic\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03092620\", \"04008384\"]}");
	add("03092620", "{\"term\":\"rubber\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"02738543\", \"03092620\", \"04123606\", \"07480405\", \"15031356\", \"15030825\"]}");
	add("03092620", "{\"term\":\"safe\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03092620\", \"04132217\", \"04132122\"]}");
	add("03092620", "{\"term\":\"safety\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00189469\", \"03092620\", \"00131910\", \"03469399\", \"08661508\", \"14562074\"]}");
	add("03092845", "{\"term\":\"condominium\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03092845\", \"03093036\"]}");
	add("03093036", "{\"term\":\"condo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03093036\"]}");
	add("03093036", "{\"term\":\"condominium\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03092845\", \"03093036\"]}");
	add("03093163", "{\"term\":\"conductor\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03093163\", \"09972531\", \"14845213\", \"09972018\"]}");
	add("03093470", "{\"term\":\"conduit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03093470\"]}");
	add("03093804", "{\"term\":\"cone\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05463833\", \"11703311\", \"13895231\", \"03093804\"]}");
	add("03093933", "{\"term\":\"cone clutch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03093933\"]}");
	add("03093933", "{\"term\":\"cone friction clutch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03093933\"]}");
	add("03094080", "{\"term\":\"candy store\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094080\"]}");
	add("03094080", "{\"term\":\"confectionary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094080\"]}");
	add("03094080", "{\"term\":\"confectionery\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00434053\", \"03094080\", \"07612538\"]}");
	add("03094209", "{\"term\":\"conference center\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094209\"]}");
	add("03094209", "{\"term\":\"conference house\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094209\"]}");
	add("03094335", "{\"term\":\"conference room\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094335\"]}");
	add("03094456", "{\"term\":\"conference table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094456\"]}");
	add("03094456", "{\"term\":\"council board\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094456\"]}");
	add("03094456", "{\"term\":\"council table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094456\"]}");
	add("03094628", "{\"term\":\"confessional\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094628\"]}");
	add("03094734", "{\"term\":\"confetti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094734\"]}");
	add("03094893", "{\"term\":\"conformal projection\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094893\"]}");
	add("03094893", "{\"term\":\"orthomorphic projection\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03094893\"]}");
	add("03095054", "{\"term\":\"conge\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00217474\", \"01144050\", \"03095054\"]}");
	add("03095054", "{\"term\":\"congee\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00217474\", \"01144050\", \"03095054\", \"07719950\"]}");
	add("03095166", "{\"term\":\"congress boot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095166\"]}");
	add("03095166", "{\"term\":\"congress gaiter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095166\"]}");
	add("03095166", "{\"term\":\"congress shoe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095166\"]}");
	add("03095312", "{\"term\":\"conic projection\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095312\"]}");
	add("03095312", "{\"term\":\"conical projection\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095312\"]}");
	add("03095500", "{\"term\":\"connecting rod\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095500\"]}");
	add("03095679", "{\"term\":\"connecting room\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095679\"]}");
	add("03095830", "{\"term\":\"connecter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095830\"]}");
	add("03095830", "{\"term\":\"connection\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00146038\", \"00317815\", \"09975514\", \"13893444\", \"05771913\", \"09975626\", \"03095830\", \"14442568\", \"13813601\"]}");
	add("03095830", "{\"term\":\"connective\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03095830\", \"06336819\"]}");
	add("03095830", "{\"term\":\"connector\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03095830\"]}");
	add("03095830", "{\"term\":\"connexion\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00146038\", \"00317815\", \"03095830\", \"05771913\", \"13813601\", \"13893444\"]}");
	add("03096363", "{\"term\":\"conning tower\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03096363\", \"03096509\"]}");
	add("03096509", "{\"term\":\"conning tower\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03096363\", \"03096509\"]}");
	add("03096622", "{\"term\":\"conservatory\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03096622\", \"03096770\", \"08304357\"]}");
	add("03096622", "{\"term\":\"hothouse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03096622\"]}");
	add("03096622", "{\"term\":\"indoor garden\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03096622\"]}");
	add("03096770", "{\"term\":\"conservatoire\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03096770\"]}");
	add("03096770", "{\"term\":\"conservatory\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03096622\", \"03096770\", \"08304357\"]}");
	add("03096932", "{\"term\":\"console\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"02936724\", \"03096932\", \"03097112\", \"03097339\"]}");
	add("03097112", "{\"term\":\"console\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"02936724\", \"03096932\", \"03097112\", \"03097339\"]}");
	add("03097339", "{\"term\":\"console\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"02936724\", \"03096932\", \"03097112\", \"03097339\"]}");
	add("03097339", "{\"term\":\"console table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03097339\"]}");
	add("03097474", "{\"term\":\"constitution\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03097474\", \"04940721\", \"06546123\", \"00237945\", \"06545639\"]}");
	add("03097474", "{\"term\":\"old ironsides\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03097474\"]}");
	add("03097883", "{\"term\":\"consulate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03097883\"]}");
	add("03098030", "{\"term\":\"consumer goods\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03098030\"]}");
	add("03098248", "{\"term\":\"contact\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03098615\", \"07293990\", \"03098248\", \"06271913\", \"09979596\", \"07353929\", \"14442914\", \"00125700\", \"00040035\"]}");
	add("03098248", "{\"term\":\"tangency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03098248\", \"14443478\"]}");
	add("03098615", "{\"term\":\"contact\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03098615\", \"07293990\", \"03098248\", \"06271913\", \"09979596\", \"07353929\", \"14442914\", \"00125700\", \"00040035\"]}");
	add("03098615", "{\"term\":\"contact lens\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03098615\"]}");
	add("03098803", "{\"term\":\"contact microphone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03098803\"]}");
	add("03098803", "{\"term\":\"contact mike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03098803\"]}");
	add("03098998", "{\"term\":\"contact print\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03098998\"]}");
	add("03099154", "{\"term\":\"container\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03099154\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }