package org.swtk.commons.dict.wordnet.index.instance.p1.p3;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance1336 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("13360204", "{\"term\":\"post-obit bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360204\"]}");
	add("13360340", "{\"term\":\"registered bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360340\"]}");
	add("13360557", "{\"term\":\"revenue bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360557\"]}");
	add("13360749", "{\"term\":\"secured bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360749\"]}");
	add("13360859", "{\"term\":\"debenture\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06537995\", \"13360859\"]}");
	add("13360859", "{\"term\":\"debenture bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360859\"]}");
	add("13360859", "{\"term\":\"unsecured bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13360859\"]}");
	add("13361095", "{\"term\":\"agency security\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361095\"]}");
	add("13361095", "{\"term\":\"government security\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361095\"]}");
	add("13361259", "{\"term\":\"mortgage-backed security\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361259\"]}");
	add("13361594", "{\"term\":\"registered security\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361594\"]}");
	add("13361766", "{\"term\":\"savings bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361766\"]}");
	add("13361917", "{\"term\":\"utility bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361917\"]}");
	add("13361917", "{\"term\":\"utility revenue bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13361917\"]}");
	add("13362067", "{\"term\":\"zero-coupon bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13362067\"]}");
	add("13362067", "{\"term\":\"zero coupon bond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13362067\"]}");
	add("13362365", "{\"term\":\"reversion\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00069153\", \"00236075\", \"00347519\", \"07358174\", \"07441173\", \"13362365\"]}");
	add("13362608", "{\"term\":\"escheat\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13277498\", \"13362608\"]}");
	add("13362771", "{\"term\":\"right\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"13362771\", \"04857572\", \"00351826\", \"05572970\", \"08433609\", \"04098951\", \"08642648\", \"05182180\"]}");
	add("13362977", "{\"term\":\"accession\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00237448\", \"05183715\", \"07191852\", \"13274322\", \"13362977\", \"13445650\"]}");
	add("13363150", "{\"term\":\"share\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03974120\", \"00789119\", \"01087022\", \"13363150\", \"13306199\"]}");
	add("13363413", "{\"term\":\"authorized shares\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13363413\"]}");
	add("13363413", "{\"term\":\"authorized stock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13363413\"]}");
	add("13363413", "{\"term\":\"capital stock\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13355665\", \"13363413\"]}");
	add("13363612", "{\"term\":\"quarter stock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13363612\"]}");
	add("13363707", "{\"term\":\"speculation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05793890\", \"13363707\", \"05900390\", \"06795537\"]}");
	add("13363707", "{\"term\":\"venture\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01119485\", \"13363707\", \"00799539\"]}");
	add("13364002", "{\"term\":\"gamble\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00804623\", \"13364002\"]}");
	add("13364138", "{\"term\":\"smart money\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08418927\", \"13312854\", \"13364138\"]}");
	add("13364299", "{\"term\":\"pyramid\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04035601\", \"13364299\", \"13937870\"]}");
	add("13364541", "{\"term\":\"bet\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00507669\", \"13364541\"]}");
	add("13364541", "{\"term\":\"stake\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04305903\", \"13364541\", \"04306044\", \"07272483\", \"13307824\"]}");
	add("13364541", "{\"term\":\"stakes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13364541\"]}");
	add("13364541", "{\"term\":\"wager\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13364541\", \"00507669\"]}");
	add("13364789", "{\"term\":\"jackpot\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13289706\", \"13364789\"]}");
	add("13364789", "{\"term\":\"kitty\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"02124950\", \"02125600\", \"13364789\", \"13390647\"]}");
	add("13364789", "{\"term\":\"pot\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03997192\", \"03998004\", \"05563704\", \"13364789\", \"13796604\", \"03997420\", \"13791173\", \"04453655\", \"03996832\"]}");
	add("13364932", "{\"term\":\"ante\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13364932\"]}");
	add("13365086", "{\"term\":\"protection\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00786409\", \"01130195\", \"01217353\", \"14563562\", \"13365086\", \"04020673\", \"00819341\"]}");
	add("13365086", "{\"term\":\"security\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00824977\", \"04173006\", \"06698499\", \"08137885\", \"13370410\", \"13437518\", \"07541577\", \"13365086\", \"14562870\"]}");
	add("13365401", "{\"term\":\"easy street\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13365401\"]}");
	add("13365477", "{\"term\":\"hedge\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06774314\", \"13365477\", \"03516319\"]}");
	add("13365477", "{\"term\":\"hedging\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06774314\", \"13365477\"]}");
	add("13365679", "{\"term\":\"coverage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06696529\", \"05131025\", \"13365679\"]}");
	add("13365679", "{\"term\":\"insurance coverage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13365679\"]}");
	add("13365819", "{\"term\":\"insurance\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"14563428\", \"06535632\", \"13365819\"]}");
	add("13366301", "{\"term\":\"assurance\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"13366301\", \"07242066\", \"07242432\", \"05705328\"]}");
	add("13366418", "{\"term\":\"automobile insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13366418\"]}");
	add("13366418", "{\"term\":\"car insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13366418\"]}");
	add("13366575", "{\"term\":\"no fault automobile insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13366575\"]}");
	add("13366575", "{\"term\":\"no fault insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13366575\"]}");
	add("13366977", "{\"term\":\"business interruption insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13366977\"]}");
	add("13367224", "{\"term\":\"coinsurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367224\"]}");
	add("13367352", "{\"term\":\"fire insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367352\"]}");
	add("13367447", "{\"term\":\"group insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367447\"]}");
	add("13367645", "{\"term\":\"hazard insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367645\"]}");
	add("13367788", "{\"term\":\"health insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367788\"]}");
	add("13367927", "{\"term\":\"hospitalization\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00659870\", \"13367927\", \"14599598\", \"15144127\"]}");
	add("13367927", "{\"term\":\"hospitalization insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13367927\"]}");
	add("13368080", "{\"term\":\"liability insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368080\"]}");
	add("13368252", "{\"term\":\"life assurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368252\"]}");
	add("13368252", "{\"term\":\"life insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368252\"]}");
	add("13368504", "{\"term\":\"endowment insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368504\"]}");
	add("13368765", "{\"term\":\"tontine\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13316383\", \"13368765\"]}");
	add("13368765", "{\"term\":\"tontine insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368765\"]}");
	add("13368962", "{\"term\":\"ordinary life insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368962\"]}");
	add("13368962", "{\"term\":\"straight life insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368962\"]}");
	add("13368962", "{\"term\":\"whole life insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13368962\"]}");
	add("13369242", "{\"term\":\"malpractice insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13369242\"]}");
	add("13369471", "{\"term\":\"reinsurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13369471\"]}");
	add("13369807", "{\"term\":\"self-insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13369807\"]}");
	add("13369979", "{\"term\":\"term insurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13369979\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }