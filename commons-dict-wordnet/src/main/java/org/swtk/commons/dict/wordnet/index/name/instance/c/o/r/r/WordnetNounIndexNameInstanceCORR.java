package org.swtk.commons.dict.wordnet.index.name.instance.c.o.r.r;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCORR {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"corral\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03129241\"]}");
	add("{\"term\":\"corrasion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13444788\"]}");
	add("{\"term\":\"correction\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00663770\", \"01164308\", \"05118811\", \"06727227\", \"06440207\", \"13778097\", \"00259697\"]}");
	add("{\"term\":\"corrections\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01168582\", \"08137599\"]}");
	add("{\"term\":\"correctitude\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04905614\"]}");
	add("{\"term\":\"corrective\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03116550\"]}");
	add("{\"term\":\"correctness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04906378\", \"04809447\"]}");
	add("{\"term\":\"correggio\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10931831\"]}");
	add("{\"term\":\"corregidor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01272836\"]}");
	add("{\"term\":\"correlate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05866991\"]}");
	add("{\"term\":\"correlation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06040778\", \"06041776\", \"13863850\"]}");
	add("{\"term\":\"correlative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05866991\"]}");
	add("{\"term\":\"correlativity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13863850\"]}");
	add("{\"term\":\"correspondence\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04752480\", \"05071996\", \"13839491\", \"04720704\", \"06636121\"]}");
	add("{\"term\":\"correspondent\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09986240\", \"09986084\"]}");
	add("{\"term\":\"corrida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02920509\"]}");
	add("{\"term\":\"corridor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03116750\"]}");
	add("{\"term\":\"corrie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09268421\"]}");
	add("{\"term\":\"corrigenda\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06501838\"]}");
	add("{\"term\":\"corrigendum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06782369\"]}");
	add("{\"term\":\"corroboration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06663176\"]}");
	add("{\"term\":\"corrodentia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02262835\"]}");
	add("{\"term\":\"corroding\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13474601\"]}");
	add("{\"term\":\"corrosion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13474601\", \"14585587\"]}");
	add("{\"term\":\"corrosive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14847958\"]}");
	add("{\"term\":\"corrugation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00407306\", \"13924922\"]}");
	add("{\"term\":\"corruptibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04858816\"]}");
	add("{\"term\":\"corruption\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00160216\", \"00273292\", \"04858227\", \"13474813\", \"14584694\", \"04861179\"]}");
	add("{\"term\":\"corruptness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04861179\", \"14463501\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }