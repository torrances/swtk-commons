package org.swtk.commons.dict.wordnet.byid.generated.p1.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById1008 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("10080160", "{\"term\":\"enterpriser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080160\"]}");
	add("10080160", "{\"term\":\"entrepreneur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080160\"]}");
	add("10080429", "{\"term\":\"conservationist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080429\"]}");
	add("10080429", "{\"term\":\"environmentalist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080429\"]}");
	add("10080712", "{\"term\":\"green\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"03611785\", \"07725078\", \"08597308\", \"09316972\", \"10080712\", \"11033320\", \"08632949\", \"04974368\"]}");
	add("10080851", "{\"term\":\"envoy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06396014\", \"10072502\", \"10080851\"]}");
	add("10080851", "{\"term\":\"envoy extraordinary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080851\"]}");
	add("10080851", "{\"term\":\"minister plenipotentiary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10080851\"]}");
	add("10081003", "{\"term\":\"enzymologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081003\"]}");
	add("10081131", "{\"term\":\"eparch\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10081131\", \"10081239\"]}");
	add("10081239", "{\"term\":\"eparch\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10081131\", \"10081239\"]}");
	add("10081362", "{\"term\":\"ephesian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081362\"]}");
	add("10081464", "{\"term\":\"bon vivant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081464", "{\"term\":\"epicure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081464", "{\"term\":\"epicurean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081464", "{\"term\":\"foodie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081464", "{\"term\":\"gastronome\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081464", "{\"term\":\"gourmet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081464\"]}");
	add("10081690", "{\"term\":\"epidemiologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081690\"]}");
	add("10081850", "{\"term\":\"epigon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081850\"]}");
	add("10081850", "{\"term\":\"epigone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081850\"]}");
	add("10081983", "{\"term\":\"epileptic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10081983\"]}");
	add("10082082", "{\"term\":\"episcopalian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082082\"]}");
	add("10082192", "{\"term\":\"epistemologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082192\"]}");
	add("10082299", "{\"term\":\"equerry\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10082299\", \"10082401\"]}");
	add("10082401", "{\"term\":\"equerry\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10082299\", \"10082401\"]}");
	add("10082523", "{\"term\":\"erotic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082523\"]}");
	add("10082592", "{\"term\":\"escalader\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082592\"]}");
	add("10082712", "{\"term\":\"escapee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082712\"]}");
	add("10082803", "{\"term\":\"dreamer\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10082803\", \"10216584\", \"10052712\"]}");
	add("10082803", "{\"term\":\"escapist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082803\"]}");
	add("10082803", "{\"term\":\"wishful thinker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082803\"]}");
	add("10082984", "{\"term\":\"escape expert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082984\"]}");
	add("10082984", "{\"term\":\"escapologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10082984\"]}");
	add("10083147", "{\"term\":\"eschatologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10083147\"]}");
	add("10083268", "{\"term\":\"escort\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10012076\", \"10083268\", \"00829443\", \"09882437\"]}");
	add("10083442", "{\"term\":\"eskimo\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06930991\", \"10083442\"]}");
	add("10083442", "{\"term\":\"esquimau\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06930991\", \"10083442\"]}");
	add("10083442", "{\"term\":\"inuit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10083442\"]}");
	add("10083726", "{\"term\":\"espionage agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10083726\"]}");
	add("10083853", "{\"term\":\"esq\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10083853\"]}");
	add("10083853", "{\"term\":\"esquire\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10083853\", \"10084036\"]}");
	add("10084036", "{\"term\":\"esquire\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10083853\", \"10084036\"]}");
	add("10084212", "{\"term\":\"essayist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084212\"]}");
	add("10084212", "{\"term\":\"litterateur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084212\"]}");
	add("10084344", "{\"term\":\"aesthete\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084344\"]}");
	add("10084344", "{\"term\":\"esthete\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084344\"]}");
	add("10084476", "{\"term\":\"aesthetician\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10084476\", \"10084638\"]}");
	add("10084476", "{\"term\":\"esthetician\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10084476\", \"10084638\"]}");
	add("10084638", "{\"term\":\"aesthetician\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10084476\", \"10084638\"]}");
	add("10084638", "{\"term\":\"esthetician\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10084476\", \"10084638\"]}");
	add("10084784", "{\"term\":\"etcher\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084784\"]}");
	add("10084873", "{\"term\":\"ethician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084873\"]}");
	add("10084873", "{\"term\":\"ethicist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084873\"]}");
	add("10085068", "{\"term\":\"ethnarch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085068\"]}");
	add("10085354", "{\"term\":\"ethnic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085354\"]}");
	add("10085450", "{\"term\":\"ethnographer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085450\"]}");
	add("10085565", "{\"term\":\"ethnologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085565\"]}");
	add("10085718", "{\"term\":\"ethologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085718\"]}");
	add("10085866", "{\"term\":\"aetiologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085866\"]}");
	add("10085866", "{\"term\":\"etiologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10085866\"]}");
	add("10086013", "{\"term\":\"etonian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086013\"]}");
	add("10086121", "{\"term\":\"etymologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086121\"]}");
	add("10086259", "{\"term\":\"castrate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086259\"]}");
	add("10086259", "{\"term\":\"eunuch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086259\"]}");
	add("10086431", "{\"term\":\"evacuee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086431\"]}");
	add("10086539", "{\"term\":\"evaluator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086539\"]}");
	add("10086539", "{\"term\":\"judge\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10086539\", \"10244889\"]}");
	add("10086818", "{\"term\":\"evangelist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10087112\", \"10086818\"]}");
	add("10086818", "{\"term\":\"gospeler\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086818\"]}");
	add("10086818", "{\"term\":\"gospeller\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086818\"]}");
	add("10086818", "{\"term\":\"revivalist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10086818\"]}");
	add("10087112", "{\"term\":\"evangelist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10087112\", \"10086818\"]}");
	add("10087407", "{\"term\":\"event planner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10087407\"]}");
	add("10087600", "{\"term\":\"everyman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10087600\"]}");
	add("10087674", "{\"term\":\"evolutionist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10087674\"]}");
	add("10087775", "{\"term\":\"examiner\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10087775\", \"10088041\"]}");
	add("10087775", "{\"term\":\"inspector\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10087775\", \"10228448\"]}");
	add("10088041", "{\"term\":\"examiner\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10087775\", \"10088041\"]}");
	add("10088041", "{\"term\":\"quizzer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088041\"]}");
	add("10088041", "{\"term\":\"tester\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04422489\", \"10088041\"]}");
	add("10088232", "{\"term\":\"exarch\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10088232\", \"10088344\", \"10088489\"]}");
	add("10088344", "{\"term\":\"exarch\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10088232\", \"10088344\", \"10088489\"]}");
	add("10088489", "{\"term\":\"exarch\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10088232\", \"10088344\", \"10088489\"]}");
	add("10088611", "{\"term\":\"excogitator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088611\"]}");
	add("10088735", "{\"term\":\"excellency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05860309\", \"10088735\"]}");
	add("10088927", "{\"term\":\"exchanger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088927\"]}");
	add("10088927", "{\"term\":\"money changer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088927\"]}");
	add("10089103", "{\"term\":\"executant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089103\"]}");
	add("10089234", "{\"term\":\"executioner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089234\"]}");
	add("10089234", "{\"term\":\"public executioner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089234\"]}");
	add("10089452", "{\"term\":\"executive\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09789895\", \"08182354\", \"10089452\"]}");
	add("10089452", "{\"term\":\"executive director\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089452\"]}");
	add("10089676", "{\"term\":\"executive officer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089676\"]}");
	add("10089788", "{\"term\":\"executive secretary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089788\"]}");
	add("10089915", "{\"term\":\"executive vice president\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10089915\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }