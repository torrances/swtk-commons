package org.swtk.commons.dict.wordnet.index.name.instance.p.r.o.f;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePROF {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"prof\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10500315\"]}");
	add("{\"term\":\"profanation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00274163\", \"00747885\"]}");
	add("{\"term\":\"profaneness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04863245\", \"06217609\"]}");
	add("{\"term\":\"profanity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07143235\"]}");
	add("{\"term\":\"professing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06745674\"]}");
	add("{\"term\":\"profession\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06697785\", \"06745674\", \"00611221\", \"08129062\"]}");
	add("{\"term\":\"professional\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10318149\", \"10500168\", \"10499838\"]}");
	add("{\"term\":\"professionalisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13562694\"]}");
	add("{\"term\":\"professionalism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05648934\"]}");
	add("{\"term\":\"professionalization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13562694\"]}");
	add("{\"term\":\"professor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10500315\"]}");
	add("{\"term\":\"professorship\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00599171\"]}");
	add("{\"term\":\"proffer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07177331\"]}");
	add("{\"term\":\"proficiency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05651035\", \"05161361\"]}");
	add("{\"term\":\"profile\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"08565990\", \"14457795\", \"06528395\", \"08630777\", \"07015715\"]}");
	add("{\"term\":\"profiling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06899868\"]}");
	add("{\"term\":\"profit\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05164957\", \"13279261\"]}");
	add("{\"term\":\"profitability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05165249\"]}");
	add("{\"term\":\"profitableness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05165249\", \"05168179\"]}");
	add("{\"term\":\"profiteer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10500588\"]}");
	add("{\"term\":\"profiterole\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07643937\"]}");
	add("{\"term\":\"profits\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13280816\", \"13279261\"]}");
	add("{\"term\":\"profligacy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00749605\", \"04902002\"]}");
	add("{\"term\":\"profligate\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10499146\", \"10525535\"]}");
	add("{\"term\":\"profoundness\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05102125\", \"05142145\", \"05621745\", \"05934990\", \"13965606\"]}");
	add("{\"term\":\"profundity\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05142145\", \"05621745\", \"05102125\", \"05934990\"]}");
	add("{\"term\":\"profuseness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05123104\"]}");
	add("{\"term\":\"profusion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05123104\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }