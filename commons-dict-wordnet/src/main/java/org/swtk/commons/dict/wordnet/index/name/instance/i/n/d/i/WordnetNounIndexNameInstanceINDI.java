package org.swtk.commons.dict.wordnet.index.name.instance.i.n.d.i;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceINDI {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"india\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08920762\"]}");
	add("{\"term\":\"indiaman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03572968\"]}");
	add("{\"term\":\"indian\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06919215\", \"09693046\"]}");
	add("{\"term\":\"indiana\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11091457\", \"09107288\"]}");
	add("{\"term\":\"indianan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09762347\"]}");
	add("{\"term\":\"indianapolis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09108138\"]}");
	add("{\"term\":\"indic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06984750\"]}");
	add("{\"term\":\"indicant\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06652323\", \"06810027\"]}");
	add("{\"term\":\"indication\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05824916\", \"06684563\", \"06810529\", \"07245708\", \"06810027\"]}");
	add("{\"term\":\"indicative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13823912\"]}");
	add("{\"term\":\"indicator\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"14941359\", \"03573297\", \"07277247\", \"06652323\"]}");
	add("{\"term\":\"indicatoridae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01845296\"]}");
	add("{\"term\":\"indictability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14015173\"]}");
	add("{\"term\":\"indiction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15319174\"]}");
	add("{\"term\":\"indictment\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07252069\", \"07249995\"]}");
	add("{\"term\":\"indie\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08019748\", \"08266775\"]}");
	add("{\"term\":\"indifference\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04680827\", \"04643967\", \"07498922\", \"07520915\"]}");
	add("{\"term\":\"indigen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09643964\"]}");
	add("{\"term\":\"indigence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14517300\"]}");
	add("{\"term\":\"indigene\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09643964\"]}");
	add("{\"term\":\"indigenousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04807401\"]}");
	add("{\"term\":\"indigestibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05004977\"]}");
	add("{\"term\":\"indigestibleness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05004977\"]}");
	add("{\"term\":\"indigestion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14359722\"]}");
	add("{\"term\":\"indigirka\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09334616\"]}");
	add("{\"term\":\"indignation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07532976\"]}");
	add("{\"term\":\"indignity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01227788\"]}");
	add("{\"term\":\"indigo\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04977665\", \"12556545\", \"14779039\"]}");
	add("{\"term\":\"indigofera\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12556325\"]}");
	add("{\"term\":\"indigotin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14779039\"]}");
	add("{\"term\":\"indinavir\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03573610\"]}");
	add("{\"term\":\"indirection\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00754141\", \"01028133\"]}");
	add("{\"term\":\"indirectness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04926386\"]}");
	add("{\"term\":\"indiscipline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04891645\"]}");
	add("{\"term\":\"indiscreetness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05623875\"]}");
	add("{\"term\":\"indiscretion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00740083\", \"04898753\"]}");
	add("{\"term\":\"indispensability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05179018\"]}");
	add("{\"term\":\"indispensableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05179018\"]}");
	add("{\"term\":\"indisposition\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04653300\", \"14197937\"]}");
	add("{\"term\":\"indisputability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04762117\"]}");
	add("{\"term\":\"indistinctness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04711694\"]}");
	add("{\"term\":\"indistinguishability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04750264\"]}");
	add("{\"term\":\"indium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14665401\"]}");
	add("{\"term\":\"individual\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10223458\", \"00007846\"]}");
	add("{\"term\":\"individualisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05757399\"]}");
	add("{\"term\":\"individualism\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05971803\", \"05971968\", \"04770548\"]}");
	add("{\"term\":\"individualist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09642994\"]}");
	add("{\"term\":\"individuality\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04625427\", \"04770548\"]}");
	add("{\"term\":\"individualization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05757399\"]}");
	add("{\"term\":\"individuation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04770548\", \"05757399\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }