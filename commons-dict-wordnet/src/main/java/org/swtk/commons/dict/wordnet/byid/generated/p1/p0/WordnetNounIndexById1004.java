package org.swtk.commons.dict.wordnet.byid.generated.p1.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById1004 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("10040091", "{\"term\":\"divorcee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040091\"]}");
	add("10040091", "{\"term\":\"grass widow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040091\"]}");
	add("10040258", "{\"term\":\"ex\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06846713\", \"10040258\", \"10213850\"]}");
	add("10040258", "{\"term\":\"ex-wife\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040258\"]}");
	add("10040395", "{\"term\":\"divorce lawyer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040395\"]}");
	add("10040532", "{\"term\":\"docent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040532\"]}");
	add("10040615", "{\"term\":\"doc\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08146250\", \"10040615\"]}");
	add("10040615", "{\"term\":\"doctor\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10041617\", \"00433296\", \"10041836\", \"10040615\"]}");
	add("10040615", "{\"term\":\"dr.\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10040615\", \"10041617\"]}");
	add("10040615", "{\"term\":\"md\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06716084\", \"09116186\", \"10040615\", \"14669270\"]}");
	add("10040615", "{\"term\":\"medico\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10040615\", \"10325848\"]}");
	add("10040615", "{\"term\":\"physician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040615\"]}");
	add("10041617", "{\"term\":\"doctor\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10041617\", \"00433296\", \"10041836\", \"10040615\"]}");
	add("10041617", "{\"term\":\"dr.\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10040615\", \"10041617\"]}");
	add("10041836", "{\"term\":\"doctor\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10041617\", \"00433296\", \"10041836\", \"10040615\"]}");
	add("10041836", "{\"term\":\"doctor of the church\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10041836\"]}");
	add("10042370", "{\"term\":\"dodderer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042370\"]}");
	add("10042484", "{\"term\":\"dodger\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07704502\", \"10042484\"]}");
	add("10042484", "{\"term\":\"fox\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"06922624\", \"09675274\", \"10996858\", \"10996993\", \"14789089\", \"10042484\", \"02120985\"]}");
	add("10042484", "{\"term\":\"slyboots\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042484\"]}");
	add("10042633", "{\"term\":\"dodo\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01813884\", \"10042633\"]}");
	add("10042633", "{\"term\":\"fogey\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042633\"]}");
	add("10042633", "{\"term\":\"fogy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042633\"]}");
	add("10042633", "{\"term\":\"fossil\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09307495\", \"10042633\"]}");
	add("10042764", "{\"term\":\"dog\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02712903\", \"03907626\", \"07692347\", \"09905672\", \"10042764\", \"10133978\", \"02086723\"]}");
	add("10042854", "{\"term\":\"dog catcher\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042854\"]}");
	add("10042989", "{\"term\":\"doge\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10042989\"]}");
	add("10043106", "{\"term\":\"dogfighter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043106\"]}");
	add("10043231", "{\"term\":\"dog in the manger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043231\"]}");
	add("10043381", "{\"term\":\"doctrinaire\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043381\"]}");
	add("10043381", "{\"term\":\"dogmatist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043381\"]}");
	add("10043610", "{\"term\":\"dogsbody\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043610\"]}");
	add("10043750", "{\"term\":\"dolichocephalic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043750\"]}");
	add("10043844", "{\"term\":\"domestic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043844\"]}");
	add("10043844", "{\"term\":\"domestic help\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043844\"]}");
	add("10043844", "{\"term\":\"house servant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043844\"]}");
	add("10044087", "{\"term\":\"domestic partner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044087\"]}");
	add("10044087", "{\"term\":\"significant other\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044087\"]}");
	add("10044087", "{\"term\":\"spousal equivalent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044087\"]}");
	add("10044087", "{\"term\":\"spouse equivalent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044087\"]}");
	add("10044346", "{\"term\":\"domestic prelate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044346\"]}");
	add("10044509", "{\"term\":\"dominatrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044509\"]}");
	add("10044662", "{\"term\":\"dominican\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10044662\", \"10798013\"]}");
	add("10044785", "{\"term\":\"domine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("10044785", "{\"term\":\"dominee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("10044785", "{\"term\":\"dominie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("10044785", "{\"term\":\"dominus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("10044920", "{\"term\":\"don\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06351765\", \"09291684\", \"09532107\", \"10045020\", \"10484108\", \"10044920\"]}");
	add("10045020", "{\"term\":\"don\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06351765\", \"09291684\", \"09532107\", \"10045020\", \"10484108\", \"10044920\"]}");
	add("10045020", "{\"term\":\"father\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"10045020\", \"10127072\", \"09560084\", \"10101225\", \"09941250\", \"10100973\", \"10122569\", \"10100638\"]}");
	add("10045116", "{\"term\":\"donatist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10045116\"]}");
	add("10045212", "{\"term\":\"don juan\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10045212\", \"10959467\"]}");
	add("10045360", "{\"term\":\"donna\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10045360\"]}");
	add("10045455", "{\"term\":\"bestower\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10045455\"]}");
	add("10045455", "{\"term\":\"conferrer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09973725\", \"10045455\"]}");
	add("10045455", "{\"term\":\"donor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10045783\", \"10045455\"]}");
	add("10045455", "{\"term\":\"giver\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10045455\", \"10151183\"]}");
	add("10045455", "{\"term\":\"presenter\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10045455\", \"10485764\", \"10485953\"]}");
	add("10045783", "{\"term\":\"donor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10045783\", \"10045455\"]}");
	add("10045986", "{\"term\":\"don quixote\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10045986\", \"09621544\"]}");
	add("10046092", "{\"term\":\"don\u0027t-know\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046092\"]}");
	add("10046278", "{\"term\":\"door guard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046278\"]}");
	add("10046278", "{\"term\":\"doorkeeper\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10046278\", \"10046488\", \"10761768\"]}");
	add("10046278", "{\"term\":\"doorman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046278\"]}");
	add("10046278", "{\"term\":\"gatekeeper\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10046278\", \"10141785\"]}");
	add("10046278", "{\"term\":\"hall porter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046278\"]}");
	add("10046278", "{\"term\":\"ostiary\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10046278\", \"10046488\"]}");
	add("10046278", "{\"term\":\"porter\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"07906201\", \"10474871\", \"11263092\", \"11263258\", \"11263414\", \"10046278\", \"10475013\"]}");
	add("10046488", "{\"term\":\"doorkeeper\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10046278\", \"10046488\", \"10761768\"]}");
	add("10046488", "{\"term\":\"ostiarius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046488\"]}");
	add("10046488", "{\"term\":\"ostiary\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10046278\", \"10046488\"]}");
	add("10046701", "{\"term\":\"dosser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046701\"]}");
	add("10046701", "{\"term\":\"street person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046701\"]}");
	add("10046830", "{\"term\":\"dotard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046830\"]}");
	add("10046971", "{\"term\":\"double\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00805055\", \"05868784\", \"10046971\", \"10686285\", \"00133576\"]}");
	add("10046971", "{\"term\":\"image\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03270785\", \"04683134\", \"08016746\", \"10046971\", \"07120141\", \"05946242\", \"03937282\", \"04685073\", \"05936904\"]}");
	add("10046971", "{\"term\":\"look-alike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10046971\"]}");
	add("10047201", "{\"term\":\"double agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10047201\"]}");
	add("10047315", "{\"term\":\"betrayer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10047315\", \"10225792\"]}");
	add("10047315", "{\"term\":\"double-crosser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10047315\"]}");
	add("10047315", "{\"term\":\"double-dealer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10047315\"]}");
	add("10047315", "{\"term\":\"traitor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10047315\", \"10742614\"]}");
	add("10047315", "{\"term\":\"two-timer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10047315\", \"10754398\"]}");
	add("10047523", "{\"term\":\"double dipper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10047523\"]}");
	add("10047678", "{\"term\":\"doubting thomas\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10047678\", \"11358791\"]}");
	add("10047848", "{\"term\":\"dove\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06894544\", \"07662012\", \"09273457\", \"10047848\", \"01814978\"]}");
	add("10047848", "{\"term\":\"peacenik\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10047848\"]}");
	add("10048014", "{\"term\":\"dowager\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048014\"]}");
	add("10048127", "{\"term\":\"down-and-out\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048127\"]}");
	add("10048266", "{\"term\":\"doyenne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048266\"]}");
	add("10048363", "{\"term\":\"draft dodger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048363\"]}");
	add("10048363", "{\"term\":\"draft evader\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048363\"]}");
	add("10048490", "{\"term\":\"conscript\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048490\"]}");
	add("10048490", "{\"term\":\"draftee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048490\"]}");
	add("10048490", "{\"term\":\"inductee\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10048490\", \"10223568\"]}");
	add("10048702", "{\"term\":\"drafter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048702\"]}");
	add("10048793", "{\"term\":\"draftsman\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10048793\", \"10048994\"]}");
	add("10048793", "{\"term\":\"drawer\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10048793\", \"10052249\", \"03238608\"]}");
	add("10048994", "{\"term\":\"draftsman\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10048793\", \"10048994\"]}");
	add("10048994", "{\"term\":\"draftsperson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048994\"]}");
	add("10048994", "{\"term\":\"draughtsman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10048994\"]}");
	add("10049154", "{\"term\":\"dragoman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049154\"]}");
	add("10049454", "{\"term\":\"dragon\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01691230\", \"09292623\", \"10049454\", \"09517519\"]}");
	add("10049454", "{\"term\":\"tartar\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"09478055\", \"09664724\", \"10049454\", \"15037836\"]}");
	add("10049556", "{\"term\":\"dragoon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049556\"]}");
	add("10049710", "{\"term\":\"lobsterback\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049710\"]}");
	add("10049710", "{\"term\":\"redcoat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049710\"]}");
	add("10049872", "{\"term\":\"drama critic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049872\"]}");
	add("10049872", "{\"term\":\"theater critic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10049872\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }