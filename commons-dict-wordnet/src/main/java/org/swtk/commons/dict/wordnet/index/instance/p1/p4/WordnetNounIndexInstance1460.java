package org.swtk.commons.dict.wordnet.index.instance.p1.p4;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance1460 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("14600013", "{\"term\":\"hypotonia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14600013\"]}");
	add("14600013", "{\"term\":\"hypotonicity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14600013\", \"14600405\"]}");
	add("14600013", "{\"term\":\"hypotonus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14600013\"]}");
	add("14600235", "{\"term\":\"hypertonicity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14599787\", \"14600235\"]}");
	add("14600405", "{\"term\":\"hypotonicity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14600013\", \"14600405\"]}");
	add("14600591", "{\"term\":\"identification\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04625938\", \"05770995\", \"14600591\", \"06898133\", \"00152838\"]}");
	add("14600876", "{\"term\":\"impaction\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00127267\", \"14083899\", \"14084057\", \"14600876\"]}");
	add("14601014", "{\"term\":\"ionisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13524112\", \"14601014\"]}");
	add("14601014", "{\"term\":\"ionization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13524112\", \"14601014\"]}");
	add("14601298", "{\"term\":\"irradiation\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00706833\", \"05764695\", \"05948527\", \"07347150\", \"11448137\", \"14601298\"]}");
	add("14601417", "{\"term\":\"leakiness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14601417\"]}");
	add("14601649", "{\"term\":\"lubrication\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00718197\", \"14601649\"]}");
	add("14601847", "{\"term\":\"mechanisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00103277\", \"14601847\"]}");
	add("14601847", "{\"term\":\"mechanization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00103277\", \"14601847\"]}");
	add("14602016", "{\"term\":\"motivation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00071461\", \"14602016\", \"00023953\"]}");
	add("14602179", "{\"term\":\"mummification\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00822244\", \"14337088\", \"14602179\"]}");
	add("14602337", "{\"term\":\"paternity\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00241621\", \"13836110\", \"14602337\"]}");
	add("14602485", "{\"term\":\"preservation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07434199\", \"13561813\", \"14602485\", \"00820685\"]}");
	add("14602608", "{\"term\":\"prognathism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14602608\"]}");
	add("14602760", "{\"term\":\"rustication\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00209543\", \"00210150\", \"00213400\", \"00915105\", \"14602760\"]}");
	add("14602910", "{\"term\":\"rustiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05656601\", \"14602910\"]}");
	add("14603034", "{\"term\":\"scandalisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01227886\", \"14603034\"]}");
	add("14603034", "{\"term\":\"scandalization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01227886\", \"14603034\"]}");
	add("14603168", "{\"term\":\"slot\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04250674\", \"04250855\", \"09460791\", \"14603168\", \"15295202\", \"04250498\", \"06295226\"]}");
	add("14603372", "{\"term\":\"toehold\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00816697\", \"04452087\", \"14603372\"]}");
	add("14603635", "{\"term\":\"submission\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"06744259\", \"06784758\", \"06784895\", \"07524564\", \"14603635\", \"01169416\", \"07182229\"]}");
	add("14603879", "{\"term\":\"urbanisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13592966\", \"14603879\"]}");
	add("14603879", "{\"term\":\"urbanization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13592966\", \"14603879\"]}");
	add("14604021", "{\"term\":\"utilization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14604021\", \"00948944\"]}");
	add("14604142", "{\"term\":\"technicality\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05828731\", \"14604142\"]}");
	add("14604577", "{\"term\":\"substance\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00020270\", \"04941723\", \"06611268\", \"13374873\", \"14604577\", \"05928460\", \"05929717\", \"00019793\"]}");
	add("14604732", "{\"term\":\"chemistry\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13863157\", \"14604732\", \"06094057\"]}");
	add("14604877", "{\"term\":\"material\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"10320321\", \"03735442\", \"03314753\", \"06648034\", \"14604877\"]}");
	add("14604877", "{\"term\":\"stuff\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05930937\", \"07233664\", \"05217802\", \"06622262\", \"13272053\", \"04352366\", \"14604877\"]}");
	add("14606023", "{\"term\":\"recycling\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00950684\", \"14606023\"]}");
	add("14606205", "{\"term\":\"ylem\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14606205\"]}");
	add("14606400", "{\"term\":\"dark matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14606400\"]}");
	add("14606715", "{\"term\":\"antimatter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14606715\"]}");
	add("14606896", "{\"term\":\"micronutrient\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14606896\"]}");
	add("14607050", "{\"term\":\"elixir\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07899359\", \"14607050\", \"14865226\"]}");
	add("14607050", "{\"term\":\"philosopher\u0027s stone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14607050\"]}");
	add("14607050", "{\"term\":\"philosophers\u0027 stone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14607050\"]}");
	add("14607246", "{\"term\":\"precursor\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06815429\", \"09650305\", \"14607246\"]}");
	add("14607408", "{\"term\":\"phlogiston\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14607408\"]}");
	add("14607580", "{\"term\":\"chyme\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14607580\"]}");
	add("14607753", "{\"term\":\"glop\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06788770\", \"14607753\"]}");
	add("14607850", "{\"term\":\"dross\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"15067423\", \"14607850\"]}");
	add("14607850", "{\"term\":\"impurity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14510768\", \"14607850\"]}");
	add("14608023", "{\"term\":\"acceptor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09779015\", \"14608023\"]}");
	add("14608196", "{\"term\":\"adduct\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608196\"]}");
	add("14608290", "{\"term\":\"actinide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608290\"]}");
	add("14608290", "{\"term\":\"actinoid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608290\"]}");
	add("14608290", "{\"term\":\"actinon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608290\"]}");
	add("14608440", "{\"term\":\"allergen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608440\"]}");
	add("14608570", "{\"term\":\"assay\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00793188\", \"07233822\", \"14608570\", \"05746570\"]}");
	add("14608682", "{\"term\":\"pyrectic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608682\"]}");
	add("14608682", "{\"term\":\"pyrogen\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14608682\", \"14608838\"]}");
	add("14608838", "{\"term\":\"pyrogen\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14608682\", \"14608838\"]}");
	add("14608945", "{\"term\":\"aldehyde\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14608945\"]}");
	add("14609228", "{\"term\":\"alcapton\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609228\"]}");
	add("14609228", "{\"term\":\"alkapton\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609228\"]}");
	add("14609228", "{\"term\":\"homogentisic acid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609228\"]}");
	add("14609403", "{\"term\":\"antiknock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609403\"]}");
	add("14609572", "{\"term\":\"ragweed pollen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609572\"]}");
	add("14609699", "{\"term\":\"atom\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14609699\", \"14643403\"]}");
	add("14609699", "{\"term\":\"corpuscle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05456844\", \"14609699\"]}");
	add("14609699", "{\"term\":\"molecule\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14609699\", \"14706294\"]}");
	add("14609699", "{\"term\":\"mote\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14609699\"]}");
	add("14609699", "{\"term\":\"particle\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06337399\", \"09409315\", \"14609699\"]}");
	add("14609699", "{\"term\":\"speck\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13796315\", \"14609699\", \"04688587\"]}");
	add("14609988", "{\"term\":\"ammunition\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06496385\", \"14609988\", \"02706134\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }