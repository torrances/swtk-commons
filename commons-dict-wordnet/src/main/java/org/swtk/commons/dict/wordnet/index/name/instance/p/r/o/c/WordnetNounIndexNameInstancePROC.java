package org.swtk.commons.dict.wordnet.index.name.instance.p.r.o.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePROC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"procaine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04013103\"]}");
	add("{\"term\":\"procarbazine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04013502\"]}");
	add("{\"term\":\"procardia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03829554\"]}");
	add("{\"term\":\"procaryote\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01418561\"]}");
	add("{\"term\":\"procavia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02375465\"]}");
	add("{\"term\":\"procaviidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02375049\"]}");
	add("{\"term\":\"procedure\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01025578\", \"06594579\", \"00578105\", \"01025762\"]}");
	add("{\"term\":\"proceeding\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01187304\"]}");
	add("{\"term\":\"proceedings\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06520103\", \"01187304\"]}");
	add("{\"term\":\"proceeds\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13281089\"]}");
	add("{\"term\":\"procellaria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02062046\"]}");
	add("{\"term\":\"procellariidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02061587\"]}");
	add("{\"term\":\"procellariiformes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02060132\"]}");
	add("{\"term\":\"process\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00029976\", \"05477841\", \"05709685\", \"06568683\", \"05709328\", \"01025762\"]}");
	add("{\"term\":\"processing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13562370\"]}");
	add("{\"term\":\"procession\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00282894\", \"00297411\", \"07341888\"]}");
	add("{\"term\":\"processional\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07047896\"]}");
	add("{\"term\":\"processor\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02998952\", \"10497540\", \"08082773\"]}");
	add("{\"term\":\"prochlorperazine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04013615\"]}");
	add("{\"term\":\"prociphilus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02256762\"]}");
	add("{\"term\":\"proclamation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01268984\", \"06738907\"]}");
	add("{\"term\":\"proclivity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06209296\"]}");
	add("{\"term\":\"procnias\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01554556\"]}");
	add("{\"term\":\"proconsul\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02481506\", \"10497878\", \"10498047\"]}");
	add("{\"term\":\"proconsulate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00598936\"]}");
	add("{\"term\":\"proconsulship\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00598936\"]}");
	add("{\"term\":\"proconvertin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15096070\"]}");
	add("{\"term\":\"procrastination\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05069539\", \"01069286\"]}");
	add("{\"term\":\"procrastinator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10498211\"]}");
	add("{\"term\":\"procreation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00851153\"]}");
	add("{\"term\":\"procrustes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09592838\"]}");
	add("{\"term\":\"proctalgia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14353670\"]}");
	add("{\"term\":\"proctitis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14377662\"]}");
	add("{\"term\":\"proctocele\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14320652\"]}");
	add("{\"term\":\"proctologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10498412\"]}");
	add("{\"term\":\"proctology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06071775\"]}");
	add("{\"term\":\"proctoplasty\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00692186\"]}");
	add("{\"term\":\"proctor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10498545\"]}");
	add("{\"term\":\"proctorship\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00599072\"]}");
	add("{\"term\":\"proctoscope\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04013791\"]}");
	add("{\"term\":\"proctoscopy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00644310\"]}");
	add("{\"term\":\"procural\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00084549\"]}");
	add("{\"term\":\"procurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00084549\"]}");
	add("{\"term\":\"procurator\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10498720\", \"10506494\"]}");
	add("{\"term\":\"procurement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00084549\"]}");
	add("{\"term\":\"procurer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10498913\", \"10453501\"]}");
	add("{\"term\":\"procuress\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10499078\"]}");
	add("{\"term\":\"procyclidine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04013886\"]}");
	add("{\"term\":\"procyon\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02510494\", \"09422360\"]}");
	add("{\"term\":\"procyonid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02510280\"]}");
	add("{\"term\":\"procyonidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02509968\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }