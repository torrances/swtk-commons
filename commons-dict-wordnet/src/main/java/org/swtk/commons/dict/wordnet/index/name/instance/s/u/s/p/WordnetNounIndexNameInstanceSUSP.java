package org.swtk.commons.dict.wordnet.index.name.instance.s.u.s.p;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceSUSP {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"suspect\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09781524\", \"10700830\"]}");
	add("{\"term\":\"suspender\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02890730\"]}");
	add("{\"term\":\"suspense\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07526477\", \"05707735\", \"07537871\"]}");
	add("{\"term\":\"suspension\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00209981\", \"01019643\", \"04373203\", \"07382856\", \"14034107\", \"15295994\", \"14615271\"]}");
	add("{\"term\":\"suspensor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02755620\"]}");
	add("{\"term\":\"suspensory\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04373919\"]}");
	add("{\"term\":\"suspicion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04903174\", \"14006324\", \"05706756\", \"05927628\"]}");
	add("{\"term\":\"suspiciousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04903174\"]}");
	add("{\"term\":\"suspiration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07144310\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }