package org.swtk.commons.dict.wordnet.index.byid.instance.p1.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance1072 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("10720166", "{\"term\":\"tenant\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10720166\", \"10720289\", \"10719850\"]}");
	add("10720289", "{\"term\":\"tenant\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10720166\", \"10720289\", \"10719850\"]}");
	add("10720489", "{\"term\":\"tenant farmer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10720489\"]}");
	add("10720612", "{\"term\":\"tenderfoot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10720612\"]}");
	add("10720745", "{\"term\":\"tennis coach\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10720745\"]}");
	add("10720829", "{\"term\":\"tennis player\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10720829\"]}");
	add("10721293", "{\"term\":\"professional tennis player\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721293\"]}");
	add("10721293", "{\"term\":\"tennis pro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721293\"]}");
	add("10721432", "{\"term\":\"tenor\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05931082\", \"06207238\", \"10721432\", \"04993303\", \"06885726\"]}");
	add("10721611", "{\"term\":\"tenor saxophonist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721611\"]}");
	add("10721611", "{\"term\":\"tenorist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721611\"]}");
	add("10721726", "{\"term\":\"tentmaker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721726\"]}");
	add("10721816", "{\"term\":\"termer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10721816\"]}");
	add("10721956", "{\"term\":\"territorial\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08408163\", \"10721956\"]}");
	add("10722132", "{\"term\":\"brat\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07693727\", \"10722132\"]}");
	add("10722132", "{\"term\":\"holy terror\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722132\"]}");
	add("10722132", "{\"term\":\"little terror\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722132\"]}");
	add("10722132", "{\"term\":\"terror\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00760853\", \"10722132\", \"10722264\", \"07535851\"]}");
	add("10722264", "{\"term\":\"scourge\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10722264\", \"14468692\", \"04157033\"]}");
	add("10722264", "{\"term\":\"terror\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00760853\", \"10722132\", \"10722264\", \"07535851\"]}");
	add("10722264", "{\"term\":\"threat\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10722264\", \"06746225\", \"07240675\", \"14566833\"]}");
	add("10722430", "{\"term\":\"terrorist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722430\"]}");
	add("10722870", "{\"term\":\"gravida iii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722870\"]}");
	add("10722870", "{\"term\":\"tertigravida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722870\"]}");
	add("10722985", "{\"term\":\"testate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722985\"]}");
	add("10722985", "{\"term\":\"testator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10722985\"]}");
	add("10723129", "{\"term\":\"testatrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723129\"]}");
	add("10723202", "{\"term\":\"test driver\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723202\"]}");
	add("10723341", "{\"term\":\"examinee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723341\"]}");
	add("10723341", "{\"term\":\"testee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723341\"]}");
	add("10723554", "{\"term\":\"deponent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723554\"]}");
	add("10723554", "{\"term\":\"deposer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723554\"]}");
	add("10723554", "{\"term\":\"testifier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723554\"]}");
	add("10723747", "{\"term\":\"test pilot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723747\"]}");
	add("10723887", "{\"term\":\"test-tube baby\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10723887\"]}");
	add("10724165", "{\"term\":\"teutonist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10724165\"]}");
	add("10724361", "{\"term\":\"ranger\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09961754\", \"10111867\", \"10724361\"]}");
	add("10724361", "{\"term\":\"texas ranger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10724361\"]}");
	add("10724535", "{\"term\":\"thane\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10724535\", \"10724749\"]}");
	add("10724749", "{\"term\":\"thane\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10724535\", \"10724749\"]}");
	add("10724860", "{\"term\":\"thatcher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10724860\", \"11357774\"]}");
	add("10724994", "{\"term\":\"thatcherite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10724994\"]}");
	add("10725097", "{\"term\":\"theatrical producer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10725097\"]}");
	add("10725264", "{\"term\":\"theologian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10725264\"]}");
	add("10725264", "{\"term\":\"theologiser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10725264\"]}");
	add("10725264", "{\"term\":\"theologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10725264\"]}");
	add("10725264", "{\"term\":\"theologizer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10725264\"]}");
	add("10726461", "{\"term\":\"idealogue\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726461\"]}");
	add("10726461", "{\"term\":\"theoretician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726461\"]}");
	add("10726461", "{\"term\":\"theoriser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726461\"]}");
	add("10726461", "{\"term\":\"theorist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726461\"]}");
	add("10726461", "{\"term\":\"theorizer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726461\"]}");
	add("10726783", "{\"term\":\"theosophist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726783\"]}");
	add("10726882", "{\"term\":\"healer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726882\"]}");
	add("10726882", "{\"term\":\"therapist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10726882\"]}");
	add("10727265", "{\"term\":\"thessalian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10727265\"]}");
	add("10727356", "{\"term\":\"thessalonian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10727356\"]}");
	add("10727453", "{\"term\":\"stealer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10727453\"]}");
	add("10727453", "{\"term\":\"thief\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10727453\"]}");
	add("10727941", "{\"term\":\"creative thinker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10727941\"]}");
	add("10727941", "{\"term\":\"mind\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05626632\", \"05991800\", \"05711903\", \"10727941\", \"05846466\", \"05770146\", \"05619057\"]}");
	add("10727941", "{\"term\":\"thinker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10728103\", \"10727941\"]}");
	add("10728103", "{\"term\":\"thinker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10728103\", \"10727941\"]}");
	add("10728446", "{\"term\":\"scrag\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07681458\", \"07682678\", \"10728446\"]}");
	add("10728446", "{\"term\":\"skin and bones\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10728446\"]}");
	add("10728446", "{\"term\":\"thin person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10728446\"]}");
	add("10728625", "{\"term\":\"third baseman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10728625\"]}");
	add("10728625", "{\"term\":\"third sacker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10728625\"]}");
	add("10728780", "{\"term\":\"third party\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08281362\", \"10728780\"]}");
	add("10728905", "{\"term\":\"third-rater\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10728905\"]}");
	add("10729007", "{\"term\":\"thoroughbred\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01326240\", \"02385883\", \"10729007\"]}");
	add("10729084", "{\"term\":\"thrall\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10729084\", \"14020738\"]}");
	add("10729178", "{\"term\":\"thrower\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10480372\", \"10729178\", \"10729394\"]}");
	add("10729394", "{\"term\":\"thrower\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10480372\", \"10729178\", \"10729394\"]}");
	add("10729394", "{\"term\":\"throwster\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10729394\"]}");
	add("10729525", "{\"term\":\"thrush\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01559826\", \"10729525\", \"14206050\"]}");
	add("10729628", "{\"term\":\"thunderbird\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10729628\"]}");
	add("10729820", "{\"term\":\"thurifer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10729820\"]}");
	add("10729908", "{\"term\":\"ticket collector\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10729908\"]}");
	add("10729908", "{\"term\":\"ticket taker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10729908\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }