package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0638 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06380048", "{\"term\":\"fantasy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05904666\", \"06380048\", \"05640291\"]}");
	add("06380048", "{\"term\":\"phantasy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05640291\", \"06380048\", \"05904666\"]}");
	add("06380251", "{\"term\":\"science fiction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06380251\"]}");
	add("06380437", "{\"term\":\"cyberpunk\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06380437\", \"10005339\", \"10174791\"]}");
	add("06380585", "{\"term\":\"novelette\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06380585\"]}");
	add("06380585", "{\"term\":\"novella\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06380585\"]}");
	add("06380700", "{\"term\":\"roman a clef\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06380700\"]}");
	add("06380839", "{\"term\":\"romance\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06380839\", \"06382890\", \"06976693\", \"05215690\", \"13954469\"]}");
	add("06381028", "{\"term\":\"gothic romance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06381028\"]}");
	add("06381177", "{\"term\":\"bodice ripper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06381177\"]}");
	add("06381313", "{\"term\":\"roman fleuve\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06381313\"]}");
	add("06381452", "{\"term\":\"story\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06769768\", \"06694296\", \"06526084\", \"03370837\", \"06381452\", \"07235754\"]}");
	add("06381801", "{\"term\":\"utopia\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05639839\", \"06381801\", \"13955078\", \"07297903\"]}");
	add("06381891", "{\"term\":\"adventure story\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06381891\"]}");
	add("06381891", "{\"term\":\"heroic tale\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06381891\"]}");
	add("06382026", "{\"term\":\"thriller\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382026\"]}");
	add("06382145", "{\"term\":\"saga\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382145\"]}");
	add("06382415", "{\"term\":\"mystery\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06382415\", \"05693343\"]}");
	add("06382415", "{\"term\":\"mystery story\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382415\"]}");
	add("06382415", "{\"term\":\"whodunit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382415\"]}");
	add("06382608", "{\"term\":\"detective story\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382608\"]}");
	add("06382768", "{\"term\":\"murder mystery\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382768\"]}");
	add("06382890", "{\"term\":\"love story\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06382890\"]}");
	add("06382890", "{\"term\":\"romance\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06380839\", \"06382890\", \"06976693\", \"05215690\", \"13954469\"]}");
	add("06383036", "{\"term\":\"fable\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06383036\", \"06383718\", \"06770602\"]}");
	add("06383036", "{\"term\":\"legend\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06358261\", \"06383036\"]}");
	add("06383357", "{\"term\":\"arthurian legend\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06383357\"]}");
	add("06383622", "{\"term\":\"short story\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06383622\"]}");
	add("06383718", "{\"term\":\"allegory\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06378026\", \"06893714\", \"06383718\"]}");
	add("06383718", "{\"term\":\"apologue\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06383718\"]}");
	add("06383718", "{\"term\":\"fable\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06383036\", \"06383718\", \"06770602\"]}");
	add("06383718", "{\"term\":\"parable\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06384713\", \"06383718\"]}");
	add("06384051", "{\"term\":\"aesop\u0027s fables\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384051\"]}");
	add("06384195", "{\"term\":\"pilgrim\u0027s progress\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384195\"]}");
	add("06384303", "{\"term\":\"myth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384303\"]}");
	add("06384548", "{\"term\":\"gotterdammerung\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384548\"]}");
	add("06384548", "{\"term\":\"ragnarok\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384548\"]}");
	add("06384548", "{\"term\":\"twilight of the gods\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06384548\"]}");
	add("06384713", "{\"term\":\"parable\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06384713\", \"06383718\"]}");
	add("06384937", "{\"term\":\"plot\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07012805\", \"06384937\", \"08692477\", \"05916276\"]}");
	add("06385136", "{\"term\":\"action\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00577488\", \"01184802\", \"01184392\", \"02680572\", \"04843181\", \"06385136\", \"13540166\", \"00955074\", \"14030430\", \"00038116\"]}");
	add("06385268", "{\"term\":\"plot line\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06385268\"]}");
	add("06385268", "{\"term\":\"storyline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06385268\"]}");
	add("06385370", "{\"term\":\"climax\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"07117039\", \"14592097\", \"00062953\", \"06385370\", \"07431643\"]}");
	add("06385370", "{\"term\":\"culmination\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00211959\", \"06385370\", \"08565814\", \"15316435\"]}");
	add("06385614", "{\"term\":\"anticlimax\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06385614\", \"07442551\"]}");
	add("06385614", "{\"term\":\"bathos\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06385614\", \"07497407\", \"07082088\"]}");
	add("06385771", "{\"term\":\"tearjerker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06385771\"]}");
	add("06385864", "{\"term\":\"interior monologue\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06385864\"]}");
	add("06386031", "{\"term\":\"stream of consciousness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05683281\", \"06386031\"]}");
	add("06386210", "{\"term\":\"criticism\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06386210\", \"05741963\", \"06723485\"]}");
	add("06386210", "{\"term\":\"literary criticism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06179522\", \"06386210\"]}");
	add("06386457", "{\"term\":\"explication de texte\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06386457\"]}");
	add("06386631", "{\"term\":\"textual criticism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06386631\"]}");
	add("06386838", "{\"term\":\"new criticism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06386838\"]}");
	add("06386952", "{\"term\":\"higher criticism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06386952\"]}");
	add("06387094", "{\"term\":\"lower criticism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06387094\"]}");
	add("06387247", "{\"term\":\"masora\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06387247\"]}");
	add("06387247", "{\"term\":\"masorah\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06387247\"]}");
	add("06387637", "{\"term\":\"analysis\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00705558\", \"06023392\", \"07081916\", \"06387637\", \"05780664\", \"00635519\"]}");
	add("06387777", "{\"term\":\"drama\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04634062\", \"06387777\", \"07305001\", \"07021061\"]}");
	add("06388195", "{\"term\":\"prose\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07086474\", \"06388195\"]}");
	add("06388399", "{\"term\":\"prose poem\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06388399\"]}");
	add("06388483", "{\"term\":\"polyphonic prose\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06388483\"]}");
	add("06388623", "{\"term\":\"hagiology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06388623\"]}");
	add("06388756", "{\"term\":\"lucubration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05792487\", \"06388756\"]}");
	add("06388898", "{\"term\":\"pastoral\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06388898\", \"06638357\", \"07057570\"]}");
	add("06389065", "{\"term\":\"poem\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06389065\"]}");
	add("06389065", "{\"term\":\"verse form\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06389065\"]}");
	add("06389594", "{\"term\":\"abecedarius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06389594\"]}");
	add("06389727", "{\"term\":\"alcaic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06389727\"]}");
	add("06389727", "{\"term\":\"alcaic verse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06389727\"]}");
	add("06389921", "{\"term\":\"ballad\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06389921\", \"07063753\"]}");
	add("06389921", "{\"term\":\"lay\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06389921\", \"07063753\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }