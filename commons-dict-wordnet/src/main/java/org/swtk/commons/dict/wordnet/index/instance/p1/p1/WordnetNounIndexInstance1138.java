package org.swtk.commons.dict.wordnet.index.instance.p1.p1;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance1138 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("11380017", "{\"term\":\"gogh\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380017\"]}");
	add("11380017", "{\"term\":\"van gogh\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380017\"]}");
	add("11380017", "{\"term\":\"vincent van gogh\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380017\"]}");
	add("11380170", "{\"term\":\"john hasbrouck van vleck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380170\"]}");
	add("11380170", "{\"term\":\"john van vleck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380170\"]}");
	add("11380170", "{\"term\":\"van vleck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380170\"]}");
	add("11380306", "{\"term\":\"bartolomeo vanzetti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380306\"]}");
	add("11380306", "{\"term\":\"vanzetti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380306\"]}");
	add("11380529", "{\"term\":\"edgar varese\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380529\"]}");
	add("11380529", "{\"term\":\"varese\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380529\"]}");
	add("11380739", "{\"term\":\"getulio dornelles vargas\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380739\"]}");
	add("11380739", "{\"term\":\"vargas\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380739\"]}");
	add("11380890", "{\"term\":\"jorge mario pedro vargas llosa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380890\"]}");
	add("11380890", "{\"term\":\"mario vargas llosa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380890\"]}");
	add("11380890", "{\"term\":\"vargas llosa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11380890\"]}");
	add("11381034", "{\"term\":\"marcus terentius varro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381034\"]}");
	add("11381034", "{\"term\":\"varro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381034\"]}");
	add("11381137", "{\"term\":\"vasarely\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381137\"]}");
	add("11381137", "{\"term\":\"viktor vasarely\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381137\"]}");
	add("11381283", "{\"term\":\"giorgio vasari\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381283\"]}");
	add("11381283", "{\"term\":\"vasari\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381283\"]}");
	add("11381418", "{\"term\":\"sarah vaughan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381418\"]}");
	add("11381418", "{\"term\":\"vaughan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381418\"]}");
	add("11381580", "{\"term\":\"ralph vaughan williams\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381580\"]}");
	add("11381580", "{\"term\":\"vaughan williams\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381580\"]}");
	add("11381752", "{\"term\":\"calvert vaux\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381752\"]}");
	add("11381752", "{\"term\":\"vaux\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381752\"]}");
	add("11381908", "{\"term\":\"oswald veblen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11381908\"]}");
	add("11381908", "{\"term\":\"veblen\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11381908\", \"11382017\"]}");
	add("11382017", "{\"term\":\"thorstein bunde veblen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382017\"]}");
	add("11382017", "{\"term\":\"thorstein veblen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382017\"]}");
	add("11382017", "{\"term\":\"veblen\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11381908\", \"11382017\"]}");
	add("11382190", "{\"term\":\"lope de vega\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382190\"]}");
	add("11382190", "{\"term\":\"lope felix de vega carpio\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382190\"]}");
	add("11382190", "{\"term\":\"vega\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09493042\", \"11382190\"]}");
	add("11382324", "{\"term\":\"diego rodriguez de silva y velazquez\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382324\"]}");
	add("11382324", "{\"term\":\"velazquez\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382324\"]}");
	add("11382447", "{\"term\":\"john venn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382447\"]}");
	add("11382447", "{\"term\":\"venn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382447\"]}");
	add("11382568", "{\"term\":\"craig ventner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382568\"]}");
	add("11382568", "{\"term\":\"j. craig ventner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382568\"]}");
	add("11382568", "{\"term\":\"ventner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382568\"]}");
	add("11382880", "{\"term\":\"robert charles venturi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382880\"]}");
	add("11382880", "{\"term\":\"robert venturi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11382880\"]}");
	add("11382880", "{\"term\":\"venturi\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04534605\", \"11382880\"]}");
	add("11383015", "{\"term\":\"giuseppe verdi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383015\"]}");
	add("11383015", "{\"term\":\"guiseppe fortunino francesco verdi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383015\"]}");
	add("11383015", "{\"term\":\"verdi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383015\"]}");
	add("11383159", "{\"term\":\"paul verlaine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383159\"]}");
	add("11383159", "{\"term\":\"verlaine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383159\"]}");
	add("11383264", "{\"term\":\"jan van der meer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383264\"]}");
	add("11383264", "{\"term\":\"jan vermeer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383264\"]}");
	add("11383264", "{\"term\":\"vermeer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383264\"]}");
	add("11383407", "{\"term\":\"jules verne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383407\"]}");
	add("11383407", "{\"term\":\"verne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383407\"]}");
	add("11383547", "{\"term\":\"karl adolph verner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383547\"]}");
	add("11383547", "{\"term\":\"verner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383547\"]}");
	add("11383652", "{\"term\":\"paul vernier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383652\"]}");
	add("11383652", "{\"term\":\"vernier\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04536403\", \"11383652\"]}");
	add("11383786", "{\"term\":\"paola caliari\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383786\"]}");
	add("11383786", "{\"term\":\"paolo veronese\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383786\"]}");
	add("11383786", "{\"term\":\"veronese\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383786\"]}");
	add("11383925", "{\"term\":\"giovanni da verrazano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383925\"]}");
	add("11383925", "{\"term\":\"giovanni da verrazzano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383925\"]}");
	add("11383925", "{\"term\":\"verrazano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383925\"]}");
	add("11383925", "{\"term\":\"verrazzano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11383925\"]}");
	add("11384130", "{\"term\":\"gianni versace\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384130\"]}");
	add("11384130", "{\"term\":\"versace\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384130\"]}");
	add("11384238", "{\"term\":\"hendrik frensch verwoerd\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384238\"]}");
	add("11384238", "{\"term\":\"hendrik verwoerd\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384238\"]}");
	add("11384238", "{\"term\":\"verwoerd\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384238\"]}");
	add("11384414", "{\"term\":\"andreas vesalius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384414\"]}");
	add("11384414", "{\"term\":\"vesalius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384414\"]}");
	add("11384565", "{\"term\":\"denmark vesey\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384565\"]}");
	add("11384565", "{\"term\":\"vesey\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384565\"]}");
	add("11384794", "{\"term\":\"titus flavius sabinus vespasianus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384794\"]}");
	add("11384794", "{\"term\":\"vespasian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11384794\"]}");
	add("11385095", "{\"term\":\"americus vespucius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385095\"]}");
	add("11385095", "{\"term\":\"amerigo vespucci\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385095\"]}");
	add("11385095", "{\"term\":\"vespucci\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385095\"]}");
	add("11385295", "{\"term\":\"gaetan vestris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385295\"]}");
	add("11385295", "{\"term\":\"vestris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385295\"]}");
	add("11385511", "{\"term\":\"victor emanuel ii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385511\"]}");
	add("11385669", "{\"term\":\"victor emanuel iii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385669\"]}");
	add("11385852", "{\"term\":\"queen victoria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11385852\"]}");
	add("11385852", "{\"term\":\"victoria\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"08842306\", \"08852674\", \"09019084\", \"09169418\", \"09494768\", \"09591042\", \"11385852\"]}");
	add("11386104", "{\"term\":\"eugene luther vidal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386104\"]}");
	add("11386104", "{\"term\":\"gore vidal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386104\"]}");
	add("11386104", "{\"term\":\"vidal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386104\"]}");
	add("11386227", "{\"term\":\"elisabeth vigee-lebrun\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386227\"]}");
	add("11386227", "{\"term\":\"marie louise elisabeth vigee-lebrun\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386227\"]}");
	add("11386227", "{\"term\":\"vigee-lebrun\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386227\"]}");
	add("11386400", "{\"term\":\"doroteo arango\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386400\"]}");
	add("11386400", "{\"term\":\"francisco villa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386400\"]}");
	add("11386400", "{\"term\":\"pancho villa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386400\"]}");
	add("11386400", "{\"term\":\"villa\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04542547\", \"04542665\", \"04542819\", \"11386400\"]}");
	add("11386543", "{\"term\":\"heitor villa-lobos\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386543\"]}");
	add("11386543", "{\"term\":\"villa-lobos\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386543\"]}");
	add("11386653", "{\"term\":\"henry villard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386653\"]}");
	add("11386653", "{\"term\":\"villard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386653\"]}");
	add("11386782", "{\"term\":\"francois villon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386782\"]}");
	add("11386782", "{\"term\":\"villon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386782\"]}");
	add("11386890", "{\"term\":\"sir paul gavrilovich vinogradoff\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386890\"]}");
	add("11386890", "{\"term\":\"vinogradoff\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11386890\"]}");
	add("11387030", "{\"term\":\"frederick moore vinson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387030\"]}");
	add("11387030", "{\"term\":\"vinson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387030\"]}");
	add("11387190", "{\"term\":\"rudolf karl virchow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387190\"]}");
	add("11387190", "{\"term\":\"rudolf virchow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387190\"]}");
	add("11387190", "{\"term\":\"virchow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387190\"]}");
	add("11387431", "{\"term\":\"publius vergilius maro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387431\"]}");
	add("11387431", "{\"term\":\"vergil\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387431\"]}");
	add("11387431", "{\"term\":\"virgil\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387431\"]}");
	add("11387576", "{\"term\":\"don luchino visconti conte di modrone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387576\"]}");
	add("11387576", "{\"term\":\"luchino visconti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387576\"]}");
	add("11387576", "{\"term\":\"visconti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387576\"]}");
	add("11387720", "{\"term\":\"st. vitus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387720\"]}");
	add("11387720", "{\"term\":\"vitus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387720\"]}");
	add("11387905", "{\"term\":\"antonio lucio vivaldi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387905\"]}");
	add("11387905", "{\"term\":\"antonio vivaldi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387905\"]}");
	add("11387905", "{\"term\":\"vivaldi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11387905\"]}");
	add("11388071", "{\"term\":\"sebastian vizcaino\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388071\"]}");
	add("11388071", "{\"term\":\"vizcaino\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388071\"]}");
	add("11388235", "{\"term\":\"maurice de vlaminck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388235\"]}");
	add("11388235", "{\"term\":\"vlaminck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388235\"]}");
	add("11388363", "{\"term\":\"conte alessandro giuseppe antonio anastasio volta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388363\"]}");
	add("11388363", "{\"term\":\"conte alessandro volta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388363\"]}");
	add("11388363", "{\"term\":\"count alessandro volta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388363\"]}");
	add("11388363", "{\"term\":\"volta\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09496688\", \"11388363\"]}");
	add("11388633", "{\"term\":\"arouet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388633\"]}");
	add("11388633", "{\"term\":\"francois-marie arouet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388633\"]}");
	add("11388633", "{\"term\":\"voltaire\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388633\"]}");
	add("11388836", "{\"term\":\"kurt vonnegut\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388836\"]}");
	add("11388836", "{\"term\":\"vonnegut\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11388836\"]}");
	add("11389030", "{\"term\":\"john von neumann\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389030\"]}");
	add("11389030", "{\"term\":\"neumann\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389030\"]}");
	add("11389030", "{\"term\":\"von neumann\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389030\"]}");
	add("11389246", "{\"term\":\"josef von sternberg\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389246\"]}");
	add("11389246", "{\"term\":\"von sternberg\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389246\"]}");
	add("11389439", "{\"term\":\"andrei voznesenski\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389439\"]}");
	add("11389439", "{\"term\":\"voznesenski\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389439\"]}");
	add("11389546", "{\"term\":\"edouard vuillard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389546\"]}");
	add("11389546", "{\"term\":\"jean edouard vuillard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389546\"]}");
	add("11389546", "{\"term\":\"vuillard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389546\"]}");
	add("11389671", "{\"term\":\"virginia wade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389671\"]}");
	add("11389671", "{\"term\":\"wade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389671\"]}");
	add("11389829", "{\"term\":\"richard wagner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389829\"]}");
	add("11389829", "{\"term\":\"wagner\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07293630\", \"11389829\", \"11390063\"]}");
	add("11389829", "{\"term\":\"wilhelm richard wagner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11389829\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }