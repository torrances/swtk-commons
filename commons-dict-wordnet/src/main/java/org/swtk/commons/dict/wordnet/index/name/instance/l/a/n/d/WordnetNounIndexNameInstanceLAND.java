package org.swtk.commons.dict.wordnet.index.name.instance.l.a.n.d;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceLAND {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"land\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00454755\", \"11135548\", \"08185877\", \"08183451\", \"13267561\", \"14538407\", \"08562388\", \"09357302\", \"08574028\", \"09358146\", \"13270947\"]}");
	add("{\"term\":\"landau\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03643328\", \"11135775\"]}");
	add("{\"term\":\"lander\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03643494\", \"09182751\"]}");
	add("{\"term\":\"landfall\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00882109\", \"09358599\"]}");
	add("{\"term\":\"landfill\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09358715\"]}");
	add("{\"term\":\"landgrave\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10264726\"]}");
	add("{\"term\":\"landholder\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10265336\"]}");
	add("{\"term\":\"landholding\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13268257\", \"13268344\"]}");
	add("{\"term\":\"landing\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00053154\", \"00053320\", \"03643635\", \"03643825\"]}");
	add("{\"term\":\"landlady\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10264853\"]}");
	add("{\"term\":\"landler\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00542375\", \"07069963\"]}");
	add("{\"term\":\"landline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03644811\"]}");
	add("{\"term\":\"landlord\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10264933\"]}");
	add("{\"term\":\"landlubber\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10265038\", \"10265204\"]}");
	add("{\"term\":\"landman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10265204\"]}");
	add("{\"term\":\"landmark\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05237687\", \"07273987\", \"07432451\", \"08642466\"]}");
	add("{\"term\":\"landmass\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09358822\"]}");
	add("{\"term\":\"landowner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10265336\"]}");
	add("{\"term\":\"landowska\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11135919\"]}");
	add("{\"term\":\"landrover\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03600138\"]}");
	add("{\"term\":\"landscape\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06219675\", \"03645325\", \"03645480\", \"08664477\"]}");
	add("{\"term\":\"landscaper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10265560\"]}");
	add("{\"term\":\"landscaping\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03645602\", \"00922974\"]}");
	add("{\"term\":\"landscapist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10265560\", \"10265873\"]}");
	add("{\"term\":\"landside\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03645770\"]}");
	add("{\"term\":\"landslide\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07420011\", \"07489325\"]}");
	add("{\"term\":\"landslip\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07420011\"]}");
	add("{\"term\":\"landsmaal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06967508\"]}");
	add("{\"term\":\"landsmal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06967508\"]}");
	add("{\"term\":\"landsman\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10265038\", \"10265204\"]}");
	add("{\"term\":\"landsteiner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11136107\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }