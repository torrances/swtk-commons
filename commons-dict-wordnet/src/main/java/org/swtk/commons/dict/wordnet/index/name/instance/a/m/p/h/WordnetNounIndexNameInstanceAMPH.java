package org.swtk.commons.dict.wordnet.index.name.instance.a.m.p.h;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceAMPH {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"amphetamine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02707012\"]}");
	add("{\"term\":\"amphibia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01628388\"]}");
	add("{\"term\":\"amphibian\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01630065\", \"02707504\", \"02707651\"]}");
	add("{\"term\":\"amphibole\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14689946\"]}");
	add("{\"term\":\"amphibolips\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02219702\"]}");
	add("{\"term\":\"amphibolite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14690548\"]}");
	add("{\"term\":\"amphibology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06617096\"]}");
	add("{\"term\":\"amphiboly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06617096\"]}");
	add("{\"term\":\"amphibrach\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07110182\"]}");
	add("{\"term\":\"amphicarpa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12525537\"]}");
	add("{\"term\":\"amphicarpaea\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12525537\"]}");
	add("{\"term\":\"amphictyony\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08377175\"]}");
	add("{\"term\":\"amphidiploid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01322423\"]}");
	add("{\"term\":\"amphidiploidy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14594162\"]}");
	add("{\"term\":\"amphigory\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06620388\"]}");
	add("{\"term\":\"amphimixis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07388081\", \"13576443\"]}");
	add("{\"term\":\"amphineura\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01956843\"]}");
	add("{\"term\":\"amphioxidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01470145\"]}");
	add("{\"term\":\"amphioxus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01470445\"]}");
	add("{\"term\":\"amphipod\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01995427\"]}");
	add("{\"term\":\"amphipoda\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01995170\"]}");
	add("{\"term\":\"amphiprion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02609556\"]}");
	add("{\"term\":\"amphisbaena\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01685677\", \"09515864\"]}");
	add("{\"term\":\"amphisbaenia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01685677\"]}");
	add("{\"term\":\"amphisbaenidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01685561\"]}");
	add("{\"term\":\"amphitheater\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02707808\", \"02708060\"]}");
	add("{\"term\":\"amphitheatre\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02707808\", \"02708060\"]}");
	add("{\"term\":\"amphiuma\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01641363\"]}");
	add("{\"term\":\"amphiumidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01641123\"]}");
	add("{\"term\":\"amphora\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02708288\"]}");
	add("{\"term\":\"amphotericin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02708417\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }