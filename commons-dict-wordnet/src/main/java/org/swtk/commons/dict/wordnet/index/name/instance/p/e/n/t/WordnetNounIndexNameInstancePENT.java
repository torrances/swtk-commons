package org.swtk.commons.dict.wordnet.index.name.instance.p.e.n.t;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePENT {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"pentacle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13904665\"]}");
	add("{\"term\":\"pentad\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13766661\"]}");
	add("{\"term\":\"pentaerythritol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03918447\"]}");
	add("{\"term\":\"pentagon\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13904858\", \"08224016\", \"03918615\"]}");
	add("{\"term\":\"pentagram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13904665\"]}");
	add("{\"term\":\"pentahedron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13938242\"]}");
	add("{\"term\":\"pentail\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02498201\"]}");
	add("{\"term\":\"pentameter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07110808\"]}");
	add("{\"term\":\"pentamethylenetetrazol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919821\"]}");
	add("{\"term\":\"pentangle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13904665\"]}");
	add("{\"term\":\"pentastomid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01791505\"]}");
	add("{\"term\":\"pentastomida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01791371\"]}");
	add("{\"term\":\"pentateuch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06463561\"]}");
	add("{\"term\":\"pentathlete\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10434513\"]}");
	add("{\"term\":\"pentathlon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07472513\"]}");
	add("{\"term\":\"pentatone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06874485\"]}");
	add("{\"term\":\"pentazocine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03918783\"]}");
	add("{\"term\":\"pentecost\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"15221877\", \"15267020\"]}");
	add("{\"term\":\"pentecostal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10434610\"]}");
	add("{\"term\":\"pentecostalism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06242452\"]}");
	add("{\"term\":\"pentecostalist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10434610\"]}");
	add("{\"term\":\"penthouse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03918940\"]}");
	add("{\"term\":\"pentimento\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919048\"]}");
	add("{\"term\":\"pentlandite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14713833\"]}");
	add("{\"term\":\"pentobarbital\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919248\"]}");
	add("{\"term\":\"pentode\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919462\"]}");
	add("{\"term\":\"pentose\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14714224\"]}");
	add("{\"term\":\"pentothal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04432071\"]}");
	add("{\"term\":\"pentoxide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14714496\"]}");
	add("{\"term\":\"pentoxifylline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919556\"]}");
	add("{\"term\":\"pentylenetetrazol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03919821\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }