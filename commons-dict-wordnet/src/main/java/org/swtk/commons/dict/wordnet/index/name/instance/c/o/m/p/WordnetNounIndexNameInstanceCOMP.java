package org.swtk.commons.dict.wordnet.index.name.instance.c.o.m.p;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCOMP {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"comp\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07212549\"]}");
	add("{\"term\":\"compact\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03083140\", \"06785061\", \"03082999\"]}");
	add("{\"term\":\"compaction\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00358915\", \"07433833\"]}");
	add("{\"term\":\"compactness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04948502\", \"05096011\"]}");
	add("{\"term\":\"companion\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09779940\", \"09965757\", \"09965384\"]}");
	add("{\"term\":\"companionability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04660836\"]}");
	add("{\"term\":\"companionableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04660836\"]}");
	add("{\"term\":\"companionship\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13952621\"]}");
	add("{\"term\":\"companionway\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03083620\"]}");
	add("{\"term\":\"company\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"08094547\", \"08235980\", \"08281818\", \"08201779\", \"09907302\", \"08203951\", \"13952621\", \"08231193\", \"08074934\"]}");
	add("{\"term\":\"comparability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04754082\"]}");
	add("{\"term\":\"comparative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06333686\"]}");
	add("{\"term\":\"compare\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04754082\"]}");
	add("{\"term\":\"comparing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00143485\"]}");
	add("{\"term\":\"comparison\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04754082\", \"13876005\", \"00143485\"]}");
	add("{\"term\":\"compartment\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03083745\", \"03084313\"]}");
	add("{\"term\":\"compartmentalisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01014654\", \"14440550\"]}");
	add("{\"term\":\"compartmentalization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01014654\", \"14440550\"]}");
	add("{\"term\":\"compass\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03084637\", \"05631411\", \"05132642\", \"03084501\"]}");
	add("{\"term\":\"compassion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04836781\", \"07569189\"]}");
	add("{\"term\":\"compassionateness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07569189\"]}");
	add("{\"term\":\"compatibility\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04720011\", \"07570323\"]}");
	add("{\"term\":\"compatriot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09990229\"]}");
	add("{\"term\":\"compeer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09649426\"]}");
	add("{\"term\":\"compendium\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06479667\", \"06603723\"]}");
	add("{\"term\":\"compensation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00260486\", \"13471809\", \"13303573\"]}");
	add("{\"term\":\"compere\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09966293\"]}");
	add("{\"term\":\"competence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05160767\"]}");
	add("{\"term\":\"competency\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05160767\"]}");
	add("{\"term\":\"competition\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10552570\", \"01171059\", \"07470961\", \"13859208\"]}");
	add("{\"term\":\"competitiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04844656\"]}");
	add("{\"term\":\"competitor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10552570\"]}");
	add("{\"term\":\"compilation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01016673\", \"06605303\"]}");
	add("{\"term\":\"compiler\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06585776\", \"09966436\"]}");
	add("{\"term\":\"compiling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01016673\"]}");
	add("{\"term\":\"complacence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07547101\"]}");
	add("{\"term\":\"complacency\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07547101\"]}");
	add("{\"term\":\"complainant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10457619\"]}");
	add("{\"term\":\"complainer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10796007\"]}");
	add("{\"term\":\"complaint\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06573933\", \"06574208\", \"07223368\", \"07223590\", \"14078890\"]}");
	add("{\"term\":\"complaisance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04648510\"]}");
	add("{\"term\":\"complement\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05704262\", \"14760380\", \"05116811\", \"08235133\", \"13613201\", \"06326631\"]}");
	add("{\"term\":\"complementarity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13863666\", \"13879511\"]}");
	add("{\"term\":\"complementary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04983006\"]}");
	add("{\"term\":\"complementation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05094871\", \"13822630\"]}");
	add("{\"term\":\"completeness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04792642\", \"14484558\"]}");
	add("{\"term\":\"completion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00211959\", \"00558456\"]}");
	add("{\"term\":\"complex\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"02918337\", \"07497661\", \"14841762\", \"05878987\"]}");
	add("{\"term\":\"complexifier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09966606\"]}");
	add("{\"term\":\"complexion\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04631646\", \"04682550\", \"06220941\", \"07980938\", \"04984219\"]}");
	add("{\"term\":\"complexity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04773530\"]}");
	add("{\"term\":\"complexness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04773530\"]}");
	add("{\"term\":\"compliance\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01169416\", \"04648510\", \"01206166\"]}");
	add("{\"term\":\"compliancy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04648510\"]}");
	add("{\"term\":\"complicatedness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04773875\"]}");
	add("{\"term\":\"complication\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04773875\", \"07438499\", \"14097523\", \"13956254\", \"01078283\"]}");
	add("{\"term\":\"complicity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14014730\"]}");
	add("{\"term\":\"compliment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06707972\"]}");
	add("{\"term\":\"compliments\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06643134\"]}");
	add("{\"term\":\"complin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15255159\"]}");
	add("{\"term\":\"compline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15255159\"]}");
	add("{\"term\":\"component\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03085025\", \"13831419\", \"05877576\"]}");
	add("{\"term\":\"comportment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04917554\"]}");
	add("{\"term\":\"composer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09966711\"]}");
	add("{\"term\":\"composing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00941268\", \"05083641\"]}");
	add("{\"term\":\"compositae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11932060\"]}");
	add("{\"term\":\"composite\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11935683\", \"05878987\"]}");
	add("{\"term\":\"compositeness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05216064\"]}");
	add("{\"term\":\"composition\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03085664\", \"06421395\", \"06690719\", \"00931533\", \"00941268\", \"07051211\", \"14612672\", \"04940721\", \"05083641\"]}");
	add("{\"term\":\"compositor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09969425\"]}");
	add("{\"term\":\"compost\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14842271\"]}");
	add("{\"term\":\"composure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04910990\"]}");
	add("{\"term\":\"compote\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07626655\"]}");
	add("{\"term\":\"compound\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03085863\", \"14842408\", \"05878802\"]}");
	add("{\"term\":\"compounding\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00379793\"]}");
	add("{\"term\":\"comprehensibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04826257\"]}");
	add("{\"term\":\"comprehension\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13816246\", \"05813910\"]}");
	add("{\"term\":\"comprehensive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07212549\"]}");
	add("{\"term\":\"comprehensiveness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05626076\", \"14485103\"]}");
	add("{\"term\":\"compress\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03086454\"]}");
	add("{\"term\":\"compressibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04945651\"]}");
	add("{\"term\":\"compressing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00357616\"]}");
	add("{\"term\":\"compression\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00357616\", \"00617323\", \"07327841\", \"07433833\"]}");
	add("{\"term\":\"compressor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03086811\"]}");
	add("{\"term\":\"compromise\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07194002\", \"01208054\"]}");
	add("{\"term\":\"compromiser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09990352\"]}");
	add("{\"term\":\"compsognathus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01717177\"]}");
	add("{\"term\":\"compton\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10925455\"]}");
	add("{\"term\":\"comptonia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11762644\"]}");
	add("{\"term\":\"comptroller\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09780826\"]}");
	add("{\"term\":\"comptrollership\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00591921\"]}");
	add("{\"term\":\"compulsion\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00157632\", \"09206152\", \"09204227\"]}");
	add("{\"term\":\"compulsive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09969936\"]}");
	add("{\"term\":\"compulsiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04633239\"]}");
	add("{\"term\":\"compulsivity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04633239\"]}");
	add("{\"term\":\"compunction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07551462\"]}");
	add("{\"term\":\"computation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05810193\", \"00870588\"]}");
	add("{\"term\":\"computer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09906486\", \"03086983\"]}");
	add("{\"term\":\"computerization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00103599\"]}");
	add("{\"term\":\"computing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00870588\", \"06138021\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }