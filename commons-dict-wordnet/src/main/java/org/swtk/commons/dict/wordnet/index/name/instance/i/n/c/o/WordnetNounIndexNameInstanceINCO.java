package org.swtk.commons.dict.wordnet.index.name.instance.i.n.c.o;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceINCO {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"incognizance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05684320\"]}");
	add("{\"term\":\"incoherence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06621330\", \"14441507\"]}");
	add("{\"term\":\"incoherency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06621330\", \"14441507\"]}");
	add("{\"term\":\"income\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13276044\"]}");
	add("{\"term\":\"incoming\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00049744\"]}");
	add("{\"term\":\"incommodiousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14470344\"]}");
	add("{\"term\":\"incommutability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04748315\"]}");
	add("{\"term\":\"incompatibility\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04721716\", \"13998484\", \"13880242\"]}");
	add("{\"term\":\"incompetence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14099608\", \"05161488\"]}");
	add("{\"term\":\"incompetency\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05161488\"]}");
	add("{\"term\":\"incompetent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10221982\"]}");
	add("{\"term\":\"incompleteness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14485777\"]}");
	add("{\"term\":\"incomprehensibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04829454\"]}");
	add("{\"term\":\"incomprehension\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05814239\"]}");
	add("{\"term\":\"incompressibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04945879\"]}");
	add("{\"term\":\"inconceivability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14506932\"]}");
	add("{\"term\":\"inconceivableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14506932\"]}");
	add("{\"term\":\"inconclusiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04765436\"]}");
	add("{\"term\":\"inconel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14940520\"]}");
	add("{\"term\":\"incongruity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04722123\"]}");
	add("{\"term\":\"incongruousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04722123\"]}");
	add("{\"term\":\"inconsequence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04792897\", \"05182044\"]}");
	add("{\"term\":\"inconsiderateness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04853198\"]}");
	add("{\"term\":\"inconsideration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04853198\"]}");
	add("{\"term\":\"inconsistency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04759102\", \"13880242\"]}");
	add("{\"term\":\"inconspicuousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04714930\"]}");
	add("{\"term\":\"inconstancy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04742125\", \"04886287\"]}");
	add("{\"term\":\"incontinence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04892012\", \"13518175\"]}");
	add("{\"term\":\"incontinency\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13518175\"]}");
	add("{\"term\":\"incontrovertibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04762473\"]}");
	add("{\"term\":\"incontrovertibleness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04762473\"]}");
	add("{\"term\":\"inconvenience\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04729991\", \"04718711\", \"14470344\"]}");
	add("{\"term\":\"inconvertibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04744260\"]}");
	add("{\"term\":\"incoordination\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05649565\"]}");
	add("{\"term\":\"incorporation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00374086\", \"05761951\", \"01240832\"]}");
	add("{\"term\":\"incorporeality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04768772\"]}");
	add("{\"term\":\"incorrectness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04809652\", \"04908776\"]}");
	add("{\"term\":\"incorruptibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04877401\"]}");
	add("{\"term\":\"incorruption\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04877253\"]}");
	add("{\"term\":\"incorruptness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04877253\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }