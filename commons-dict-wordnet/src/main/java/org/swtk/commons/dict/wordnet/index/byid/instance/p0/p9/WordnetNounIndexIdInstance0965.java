package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p9;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0965 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("09650205", "{\"term\":\"percher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01526297\", \"09650205\"]}");
	add("09650305", "{\"term\":\"forerunner\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13867120\", \"06815429\", \"09650305\"]}");
	add("09650305", "{\"term\":\"precursor\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06815429\", \"09650305\", \"14607246\"]}");
	add("09650451", "{\"term\":\"preteen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09650451\"]}");
	add("09650451", "{\"term\":\"preteenager\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09650451\"]}");
	add("09650650", "{\"term\":\"primitive\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06305722\", \"06305894\", \"09650650\"]}");
	add("09650650", "{\"term\":\"primitive person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09650650\"]}");
	add("09650995", "{\"term\":\"lottery winner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09650995\"]}");
	add("09650995", "{\"term\":\"prize winner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09650995\"]}");
	add("09651094", "{\"term\":\"receiver\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"10530411\", \"10530567\", \"09651094\", \"04409715\", \"10285229\", \"04067759\"]}");
	add("09651094", "{\"term\":\"recipient\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06344088\", \"09651094\"]}");
	add("09651570", "{\"term\":\"religious person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09651570\"]}");
	add("09652253", "{\"term\":\"religionist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652253\"]}");
	add("09652434", "{\"term\":\"sensualist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652434\"]}");
	add("09652665", "{\"term\":\"booking clerk\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652665\"]}");
	add("09652665", "{\"term\":\"ticket agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652665\"]}");
	add("09652831", "{\"term\":\"ticket holder\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652831\"]}");
	add("09652940", "{\"term\":\"traveler\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652940\"]}");
	add("09652940", "{\"term\":\"traveller\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09652940\"]}");
	add("09653829", "{\"term\":\"unfortunate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09653829\"]}");
	add("09653829", "{\"term\":\"unfortunate person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09653829\"]}");
	add("09654317", "{\"term\":\"persona non grata\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09654317\", \"10437714\"]}");
	add("09654317", "{\"term\":\"unwelcome person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09654317\"]}");
	add("09654651", "{\"term\":\"disagreeable person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09654651\"]}");
	add("09654651", "{\"term\":\"unpleasant person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09654651\"]}");
	add("09655462", "{\"term\":\"unskilled person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09655462\"]}");
	add("09655706", "{\"term\":\"worker\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"09786620\", \"02210101\", \"10501296\", \"09655706\"]}");
	add("09657157", "{\"term\":\"offender\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09657157\"]}");
	add("09657157", "{\"term\":\"wrongdoer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09657157\"]}");
	add("09657682", "{\"term\":\"african\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09657682\"]}");
	add("09658722", "{\"term\":\"black african\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09658722\"]}");
	add("09658823", "{\"term\":\"afrikander\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09658823\"]}");
	add("09658823", "{\"term\":\"afrikaner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09658823\"]}");
	add("09658823", "{\"term\":\"boer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09658823\"]}");
	add("09659011", "{\"term\":\"aryan\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09659011\", \"09659161\"]}");
	add("09659011", "{\"term\":\"indo-european\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06954406\", \"09659011\"]}");
	add("09659161", "{\"term\":\"aryan\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09659011\", \"09659161\"]}");
	add("09659294", "{\"term\":\"person of color\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659294\"]}");
	add("09659294", "{\"term\":\"person of colour\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659294\"]}");
	add("09659490", "{\"term\":\"african-american\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659490\"]}");
	add("09659490", "{\"term\":\"black\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02849379\", \"02849498\", \"09659490\", \"10871583\", \"10871726\", \"14007292\", \"04967454\"]}");
	add("09659490", "{\"term\":\"negro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659490\"]}");
	add("09659490", "{\"term\":\"negroid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659490\"]}");
	add("09659757", "{\"term\":\"soul brother\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659757\"]}");
	add("09659834", "{\"term\":\"mulatto\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659834\"]}");
	add("09659949", "{\"term\":\"quadroon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09659949\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }