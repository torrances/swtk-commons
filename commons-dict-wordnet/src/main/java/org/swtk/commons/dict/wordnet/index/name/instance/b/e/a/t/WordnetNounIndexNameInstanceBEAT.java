package org.swtk.commons.dict.wordnet.index.name.instance.b.e.a.t;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceBEAT {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"beat\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00314920\", \"00548653\", \"05066044\", \"07108759\", \"07391537\", \"09865257\", \"11498110\", \"07100710\", \"07415506\", \"08524402\"]}");
	add("{\"term\":\"beater\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02820785\", \"09865145\"]}");
	add("{\"term\":\"beatification\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01042160\", \"01267968\", \"14011204\"]}");
	add("{\"term\":\"beating\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01163216\", \"01178709\"]}");
	add("{\"term\":\"beatitude\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06312002\", \"14011204\"]}");
	add("{\"term\":\"beatles\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08386847\"]}");
	add("{\"term\":\"beatnik\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09865257\"]}");
	add("{\"term\":\"beatniks\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08386542\"]}");
	add("{\"term\":\"beatrice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09613050\"]}");
	add("{\"term\":\"beats\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08386542\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }