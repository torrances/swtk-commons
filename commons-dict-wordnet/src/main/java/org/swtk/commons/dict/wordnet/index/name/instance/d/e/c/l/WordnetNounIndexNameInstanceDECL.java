package org.swtk.commons.dict.wordnet.index.name.instance.d.e.c.l;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDECL {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"declamation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07257130\", \"07256984\"]}");
	add("{\"term\":\"declaration\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06523865\", \"06738907\", \"06750143\", \"07218770\", \"06748966\", \"06738626\"]}");
	add("{\"term\":\"declarative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13823912\"]}");
	add("{\"term\":\"declarer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09834065\", \"09980491\"]}");
	add("{\"term\":\"declassification\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01151610\"]}");
	add("{\"term\":\"declension\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"08022953\", \"09288526\", \"13485407\", \"13826415\"]}");
	add("{\"term\":\"declination\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06646746\", \"08650469\", \"09288526\", \"14445892\"]}");
	add("{\"term\":\"decline\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"09288526\", \"13477740\", \"14445892\", \"13478551\"]}");
	add("{\"term\":\"declinometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03173599\"]}");
	add("{\"term\":\"declivity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09288526\"]}");
	add("{\"term\":\"declomycin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03178877\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }