package org.swtk.commons.dict.wordnet.index.name.instance.d.i.v.i;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDIVI {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"divide\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08697107\", \"14006177\"]}");
	add("{\"term\":\"dividend\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13294859\", \"13755093\", \"13429196\"]}");
	add("{\"term\":\"divider\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03220452\", \"03900076\", \"10039613\", \"10657033\"]}");
	add("{\"term\":\"divination\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05784209\", \"06762868\", \"06796012\"]}");
	add("{\"term\":\"divine\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09947594\", \"09559474\"]}");
	add("{\"term\":\"diviner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10039756\"]}");
	add("{\"term\":\"diving\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00443966\", \"07481555\"]}");
	add("{\"term\":\"divinity\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06191860\", \"07621302\", \"04862207\", \"09528550\"]}");
	add("{\"term\":\"divisibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04712361\"]}");
	add("{\"term\":\"division\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"00398761\", \"00872590\", \"08236147\", \"08236251\", \"08237812\", \"08238269\", \"08256729\", \"07196502\", \"08237635\", \"00386599\", \"05876035\", \"08230126\"]}");
	add("{\"term\":\"divisor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13755307\", \"13755542\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }