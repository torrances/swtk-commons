package org.swtk.commons.dict.wordnet.index.name.instance.i.m.p.r;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceIMPR {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"impracticability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05160402\"]}");
	add("{\"term\":\"impracticableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05160402\"]}");
	add("{\"term\":\"impracticality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05159765\"]}");
	add("{\"term\":\"imprecation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07251617\", \"07248656\"]}");
	add("{\"term\":\"impreciseness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812015\"]}");
	add("{\"term\":\"imprecision\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812015\"]}");
	add("{\"term\":\"impregnability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14562631\"]}");
	add("{\"term\":\"impregnation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07451586\", \"13517720\", \"14940947\"]}");
	add("{\"term\":\"impresario\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10613153\"]}");
	add("{\"term\":\"impress\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00087474\"]}");
	add("{\"term\":\"impression\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00114352\", \"00550143\", \"03570029\", \"06602491\", \"06868257\", \"13919062\", \"05945422\", \"04682671\", \"05925333\"]}");
	add("{\"term\":\"impressionism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03570231\"]}");
	add("{\"term\":\"impressionist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10221575\"]}");
	add("{\"term\":\"impressiveness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04726778\", \"04736586\"]}");
	add("{\"term\":\"impressment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00087474\"]}");
	add("{\"term\":\"imprimatur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06700103\"]}");
	add("{\"term\":\"imprint\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03570468\", \"06868482\", \"06868613\", \"13919062\", \"05701348\"]}");
	add("{\"term\":\"imprinting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05762727\"]}");
	add("{\"term\":\"imprisonment\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01149281\", \"14022691\", \"01164866\"]}");
	add("{\"term\":\"improbability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04765707\"]}");
	add("{\"term\":\"improbableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04765707\"]}");
	add("{\"term\":\"impromptu\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07254587\", \"07254448\"]}");
	add("{\"term\":\"improperness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04908503\"]}");
	add("{\"term\":\"impropriety\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00738368\", \"00738834\", \"14587067\", \"04908503\"]}");
	add("{\"term\":\"improvement\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"14445583\", \"00249844\", \"07371988\"]}");
	add("{\"term\":\"improver\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02682269\", \"10211232\"]}");
	add("{\"term\":\"improvidence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04901747\"]}");
	add("{\"term\":\"improvisation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00100408\", \"00179681\", \"03570582\"]}");
	add("{\"term\":\"imprudence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04901232\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }