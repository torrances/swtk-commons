package org.swtk.commons.dict.wordnet.byid.generated.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById0601 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06013012", "{\"term\":\"pure mathematics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06013012\"]}");
	add("06013397", "{\"term\":\"arithmetic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06013397\"]}");
	add("06013929", "{\"term\":\"algorism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06013929\", \"06823549\"]}");
	add("06014015", "{\"term\":\"geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06014015\"]}");
	add("06014748", "{\"term\":\"affine geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06014748\"]}");
	add("06014867", "{\"term\":\"elementary geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06014867\"]}");
	add("06014867", "{\"term\":\"euclidean geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06014867\"]}");
	add("06014867", "{\"term\":\"parabolic geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06014867\"]}");
	add("06015041", "{\"term\":\"euclid\u0027s axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015041\"]}");
	add("06015041", "{\"term\":\"euclid\u0027s postulate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015041\"]}");
	add("06015041", "{\"term\":\"euclidean axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015041\"]}");
	add("06015348", "{\"term\":\"euclid\u0027s first axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015348\"]}");
	add("06015466", "{\"term\":\"euclid\u0027s second axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015466\"]}");
	add("06015592", "{\"term\":\"euclid\u0027s third axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015592\"]}");
	add("06015713", "{\"term\":\"euclid\u0027s fourth axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015713\"]}");
	add("06015807", "{\"term\":\"euclid\u0027s fifth axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015807\"]}");
	add("06015807", "{\"term\":\"parallel axiom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015807\"]}");
	add("06015958", "{\"term\":\"fractal geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06015958\"]}");
	add("06016126", "{\"term\":\"non-euclidean geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016126\"]}");
	add("06016395", "{\"term\":\"hyperbolic geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016395\"]}");
	add("06016730", "{\"term\":\"elliptic geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016730\"]}");
	add("06016730", "{\"term\":\"riemannian geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016730\"]}");
	add("06016991", "{\"term\":\"numerical analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016991\"]}");
	add("06017208", "{\"term\":\"spherical geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06017208\"]}");
	add("06017356", "{\"term\":\"spherical trigonometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06017356\"]}");
	add("06017497", "{\"term\":\"triangulation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00618577\", \"06017497\"]}");
	add("06017731", "{\"term\":\"analytic geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06017731\"]}");
	add("06017731", "{\"term\":\"analytical geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06017731\"]}");
	add("06017731", "{\"term\":\"coordinate geometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06017731\"]}");
	add("06017958", "{\"term\":\"axis\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"02767619\", \"05596490\", \"08187993\", \"08188691\", \"13149530\", \"06017958\"]}");
	add("06018245", "{\"term\":\"coordinate axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06018245\"]}");
	add("06018435", "{\"term\":\"origin\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"08118903\", \"13580380\", \"06018435\", \"07338522\", \"04930920\", \"08524579\"]}");
	add("06018582", "{\"term\":\"x-axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06018582\"]}");
	add("06018683", "{\"term\":\"y-axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06018683\"]}");
	add("06018782", "{\"term\":\"z-axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06018782\"]}");
	add("06018886", "{\"term\":\"major axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06018886\"]}");
	add("06019034", "{\"term\":\"semimajor axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019034\"]}");
	add("06019206", "{\"term\":\"minor axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019206\"]}");
	add("06019337", "{\"term\":\"semiminor axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019337\"]}");
	add("06019454", "{\"term\":\"optic axis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06019454\", \"06019730\"]}");
	add("06019454", "{\"term\":\"principal axis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019454\"]}");
	add("06019730", "{\"term\":\"optic axis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06019454\", \"06019730\"]}");
	add("06019932", "{\"term\":\"inertial frame\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019932\"]}");
	add("06019932", "{\"term\":\"inertial reference frame\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06019932\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }