package org.swtk.commons.dict.wordnet.index.name.instance.c.r.y.p;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCRYP {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"crypt\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03147082\"]}");
	add("{\"term\":\"cryptacanthodes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02618881\"]}");
	add("{\"term\":\"cryptanalysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06182218\"]}");
	add("{\"term\":\"cryptanalyst\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10001070\"]}");
	add("{\"term\":\"cryptanalytics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06182218\"]}");
	add("{\"term\":\"cryptobiosis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14086957\"]}");
	add("{\"term\":\"cryptobranchidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01635688\"]}");
	add("{\"term\":\"cryptobranchus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01635891\"]}");
	add("{\"term\":\"cryptocercidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02237973\"]}");
	add("{\"term\":\"cryptocercus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02238117\"]}");
	add("{\"term\":\"cryptococcosis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14170694\"]}");
	add("{\"term\":\"cryptocoryne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11807659\"]}");
	add("{\"term\":\"cryptogam\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11572584\"]}");
	add("{\"term\":\"cryptogamia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11572349\"]}");
	add("{\"term\":\"cryptogram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366590\"]}");
	add("{\"term\":\"cryptogramma\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13230904\"]}");
	add("{\"term\":\"cryptogrammataceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13247907\"]}");
	add("{\"term\":\"cryptograph\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03147230\", \"06366590\", \"06366714\"]}");
	add("{\"term\":\"cryptographer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10001070\"]}");
	add("{\"term\":\"cryptography\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00615776\", \"06182218\"]}");
	add("{\"term\":\"cryptologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10001070\"]}");
	add("{\"term\":\"cryptology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06182218\"]}");
	add("{\"term\":\"cryptomeria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11656519\"]}");
	add("{\"term\":\"cryptomonad\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01423974\"]}");
	add("{\"term\":\"cryptophyceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01423805\"]}");
	add("{\"term\":\"cryptophyta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01423653\"]}");
	add("{\"term\":\"cryptophyte\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01423974\"]}");
	add("{\"term\":\"cryptoprocta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02138937\"]}");
	add("{\"term\":\"cryptorchidism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14115729\"]}");
	add("{\"term\":\"cryptorchidy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14115729\"]}");
	add("{\"term\":\"cryptorchism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14115729\"]}");
	add("{\"term\":\"cryptotermes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02228229\"]}");
	add("{\"term\":\"cryptotis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01895935\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }