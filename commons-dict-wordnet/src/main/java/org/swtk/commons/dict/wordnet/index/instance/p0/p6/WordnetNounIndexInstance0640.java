package org.swtk.commons.dict.wordnet.index.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance0640 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06400222", "{\"term\":\"text\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06400222\", \"06426015\", \"07187208\", \"06399623\"]}");
	add("06400420", "{\"term\":\"machine-displayable text\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06400420\"]}");
	add("06400561", "{\"term\":\"machine-readable text\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06400561\"]}");
	add("06400752", "{\"term\":\"typescript\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06400752\"]}");
	add("06400873", "{\"term\":\"erasure\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00398568\", \"06400873\", \"06440316\"]}");
	add("06401041", "{\"term\":\"margin\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"04757264\", \"06401041\", \"13281661\", \"13372293\", \"05127983\", \"13926393\"]}");
	add("06401196", "{\"term\":\"blank space\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06401196\"]}");
	add("06401196", "{\"term\":\"place\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"06401196\", \"06495143\", \"08637370\", \"13971047\", \"06412750\", \"08665191\", \"13970825\", \"08639173\", \"00587299\", \"08577045\", \"13949819\", \"00722683\", \"08659612\", \"05619605\", \"08530790\", \"08682181\"]}");
	add("06401196", "{\"term\":\"space\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"04037131\", \"06875252\", \"06401196\", \"15197259\", \"06852240\", \"08517454\", \"08670545\", \"13933399\", \"00028950\"]}");
	add("06401396", "{\"term\":\"indent\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06401396\", \"06541870\"]}");
	add("06401396", "{\"term\":\"indentation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00407760\", \"06401396\", \"13559097\", \"13931035\"]}");
	add("06401396", "{\"term\":\"indention\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06401396\"]}");
	add("06401396", "{\"term\":\"indenture\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06401396\", \"06785638\", \"06785807\", \"13931035\"]}");
	add("06401590", "{\"term\":\"word order\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06401590\"]}");
	add("06401694", "{\"term\":\"core dump\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06401694\"]}");
	add("06401870", "{\"term\":\"dump\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03260493\", \"06401870\", \"08577564\", \"13576978\"]}");
	add("06402066", "{\"term\":\"fair copy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402066\"]}");
	add("06402155", "{\"term\":\"copy\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06688854\", \"06402155\", \"03109245\", \"06517508\"]}");
	add("06402155", "{\"term\":\"written matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402155\"]}");
	add("06402331", "{\"term\":\"front matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402331\"]}");
	add("06402331", "{\"term\":\"prelims\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402331\"]}");
	add("06402448", "{\"term\":\"back matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402448\"]}");
	add("06402448", "{\"term\":\"end matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402448\"]}");
	add("06402605", "{\"term\":\"draft\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00116487\", \"00841850\", \"01160337\", \"03235373\", \"03235617\", \"05142420\", \"06402605\", \"07899955\", \"03235488\", \"11542881\", \"13398441\"]}");
	add("06402605", "{\"term\":\"draft copy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402605\"]}");
	add("06402814", "{\"term\":\"electronic text\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402814\"]}");
	add("06402990", "{\"term\":\"soft copy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06402990\"]}");
	add("06403209", "{\"term\":\"hard copy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06403209\"]}");
	add("06403409", "{\"term\":\"installment\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00241805\", \"06403409\", \"06634278\", \"13322737\"]}");
	add("06403409", "{\"term\":\"instalment\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00241805\", \"06403409\", \"06634278\"]}");
	add("06403545", "{\"term\":\"fascicle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05483333\", \"06403545\"]}");
	add("06403545", "{\"term\":\"fascicule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06403545\"]}");
	add("06403644", "{\"term\":\"section\", \"synsetCount\":14, \"upperType\":\"NOUN\", \"ids\":[\"00679253\", \"07763431\", \"08131836\", \"08233716\", \"08233821\", \"08256073\", \"08665728\", \"13634785\", \"05876035\", \"08231753\", \"04172050\", \"08665897\", \"09451645\", \"06403644\"]}");
	add("06403644", "{\"term\":\"subdivision\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04355626\", \"06403644\", \"08418205\", \"00399235\", \"08691989\"]}");
	add("06404303", "{\"term\":\"above\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06404303\"]}");
	add("06404430", "{\"term\":\"sports section\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06404430\"]}");
	add("06404578", "{\"term\":\"article\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06335662\", \"06404578\", \"00023083\", \"06278749\"]}");
	add("06404578", "{\"term\":\"clause\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06404578\", \"06325134\"]}");
	add("06404896", "{\"term\":\"arbitration clause\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06404896\"]}");
	add("06405067", "{\"term\":\"deductible\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06405067\", \"13294573\"]}");
	add("06405263", "{\"term\":\"double indemnity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06405263\"]}");
	add("06405443", "{\"term\":\"escalator\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03300702\", \"06405443\"]}");
	add("06405443", "{\"term\":\"escalator clause\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06405443\"]}");
	add("06405694", "{\"term\":\"joker\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03607177\", \"06405694\", \"10243965\", \"10243768\"]}");
	add("06405925", "{\"term\":\"reserve clause\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06405925\"]}");
	add("06406207", "{\"term\":\"rider\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10423621\", \"10549725\", \"06406207\", \"10549540\"]}");
	add("06406344", "{\"term\":\"body\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"02865226\", \"04268616\", \"05031782\", \"06406344\", \"04941723\", \"08453298\", \"05557463\", \"09247818\", \"05225115\", \"07981699\", \"05223633\"]}");
	add("06406508", "{\"term\":\"book\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"02873887\", \"06406508\", \"06443410\", \"06473279\", \"07970797\", \"07971027\", \"13425421\", \"07023062\", \"06649049\", \"02873453\", \"06422547\"]}");
	add("06407785", "{\"term\":\"chapter\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"07321790\", \"08245759\", \"08245586\", \"15277718\", \"06407785\"]}");
	add("06407973", "{\"term\":\"episode\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04180233\", \"06634278\", \"06407973\", \"07304679\"]}");
	add("06408111", "{\"term\":\"spot\", \"synsetCount\":14, \"upperType\":\"NOUN\", \"ids\":[\"00073081\", \"04293445\", \"04293713\", \"07286647\", \"13783547\", \"14105668\", \"00587299\", \"04293266\", \"06408111\", \"04689819\", \"04701789\", \"04739165\", \"06408287\", \"08682181\"]}");
	add("06408287", "{\"term\":\"spot\", \"synsetCount\":14, \"upperType\":\"NOUN\", \"ids\":[\"00073081\", \"04293445\", \"04293713\", \"07286647\", \"13783547\", \"14105668\", \"00587299\", \"04293266\", \"06408111\", \"04689819\", \"04701789\", \"04739165\", \"06408287\", \"08682181\"]}");
	add("06408455", "{\"term\":\"insert\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00385137\", \"00385318\", \"03578433\", \"06408455\"]}");
	add("06408573", "{\"term\":\"introduction\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00241051\", \"00321678\", \"07177626\", \"06426492\", \"07232009\", \"06408573\", \"00238889\"]}");
	add("06408814", "{\"term\":\"exordium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06408814\"]}");
	add("06408950", "{\"term\":\"narration\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06408950\", \"07235433\", \"07235754\"]}");
	add("06409119", "{\"term\":\"opening\", \"synsetCount\":13, \"upperType\":\"NOUN\", \"ids\":[\"00240097\", \"00458914\", \"03504286\", \"03854249\", \"05257118\", \"05800018\", \"06409119\", \"14508833\", \"00339467\", \"07343963\", \"00384198\", \"07467309\", \"09402023\"]}");
	add("06409288", "{\"term\":\"teaser\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04405302\", \"04463547\", \"06409288\", \"06797496\", \"07265536\", \"10715051\", \"10715318\"]}");
	add("06409432", "{\"term\":\"salutation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06409432\", \"06642524\", \"06701658\"]}");
	add("06409546", "{\"term\":\"foreword\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06409546\"]}");
	add("06409546", "{\"term\":\"preface\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06409546\"]}");
	add("06409546", "{\"term\":\"prolusion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01147229\", \"06409546\"]}");
	add("06409733", "{\"term\":\"preamble\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06409733\"]}");
	add("06409913", "{\"term\":\"prolegomenon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06409913\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }