package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p3;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0374 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("03741128", "{\"term\":\"measure\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"03739135\", \"03741128\", \"06877775\", \"07108759\", \"07275291\", \"00998911\", \"06548844\", \"00033914\", \"00175261\"]}");
	add("03741128", "{\"term\":\"measuring rod\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741128\"]}");
	add("03741128", "{\"term\":\"measuring stick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741128\"]}");
	add("03741454", "{\"term\":\"meat counter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741454\"]}");
	add("03741555", "{\"term\":\"meat grinder\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00967294\", \"03741555\"]}");
	add("03741638", "{\"term\":\"meat hook\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741638\"]}");
	add("03741760", "{\"term\":\"meat house\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03741760\", \"04253859\"]}");
	add("03741863", "{\"term\":\"meat safe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741863\"]}");
	add("03741961", "{\"term\":\"meat thermometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03741961\"]}");
	add("03742165", "{\"term\":\"mebendazole\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03742165\"]}");
	add("03742300", "{\"term\":\"meccano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03742300\"]}");
	add("03742300", "{\"term\":\"meccano set\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03742300\"]}");
	add("03742461", "{\"term\":\"mechanical device\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03742461\"]}");
	add("03743403", "{\"term\":\"mechanical drawing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00609152\", \"03743403\"]}");
	add("03743557", "{\"term\":\"mechanical piano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03743557\"]}");
	add("03743557", "{\"term\":\"pianola\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03743557\"]}");
	add("03743557", "{\"term\":\"player piano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03743557\"]}");
	add("03743732", "{\"term\":\"mechanical system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03743732\"]}");
	add("03743963", "{\"term\":\"mechanism\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03743963\", \"05981648\", \"09372694\", \"00099205\", \"13533709\"]}");
	add("03744627", "{\"term\":\"antivert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744627\"]}");
	add("03744627", "{\"term\":\"meclizine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744627\"]}");
	add("03744627", "{\"term\":\"meclizine hydrochloride\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744627\"]}");
	add("03744818", "{\"term\":\"meclofenamate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744818\"]}");
	add("03744818", "{\"term\":\"meclofenamate sodium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744818\"]}");
	add("03744818", "{\"term\":\"meclomen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03744818\"]}");
	add("03745009", "{\"term\":\"health facility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745009\"]}");
	add("03745009", "{\"term\":\"healthcare facility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745009\"]}");
	add("03745009", "{\"term\":\"medical building\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745009\"]}");
	add("03745184", "{\"term\":\"medical instrument\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745184\"]}");
	add("03745652", "{\"term\":\"medicament\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745652\"]}");
	add("03745652", "{\"term\":\"medication\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00665353\", \"03745652\"]}");
	add("03745652", "{\"term\":\"medicinal drug\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03745652\"]}");
	add("03745652", "{\"term\":\"medicine\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01165019\", \"00613447\", \"03745652\", \"06052606\"]}");
	add("03747510", "{\"term\":\"medicine ball\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03747510\"]}");
	add("03747606", "{\"term\":\"medicine cabinet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03747606\"]}");
	add("03747606", "{\"term\":\"medicine chest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03747606\"]}");
	add("03747729", "{\"term\":\"medline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03747729\"]}");
	add("03747907", "{\"term\":\"meerschaum\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03747907\", \"14705606\"]}");
	add("03748022", "{\"term\":\"mefenamic acid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748022\"]}");
	add("03748022", "{\"term\":\"ponstel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748022\"]}");
	add("03748219", "{\"term\":\"larium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748219\"]}");
	add("03748219", "{\"term\":\"mefloquine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748219\"]}");
	add("03748219", "{\"term\":\"mefloquine hydrochloride\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748219\"]}");
	add("03748219", "{\"term\":\"mephaquine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748219\"]}");
	add("03748507", "{\"term\":\"megalith\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748507\"]}");
	add("03748507", "{\"term\":\"megalithic structure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748507\"]}");
	add("03748770", "{\"term\":\"megaphone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748770\"]}");
	add("03748913", "{\"term\":\"megaton bomb\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03748913\"]}");
	add("03749068", "{\"term\":\"alkeran\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03749068\"]}");
	add("03749068", "{\"term\":\"melphalan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03749068\"]}");
	add("03749252", "{\"term\":\"membrane\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05433820\", \"03749252\"]}");
	add("03749393", "{\"term\":\"memorial\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03749393\", \"06525615\", \"06701267\"]}");
	add("03749393", "{\"term\":\"monument\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04083825\", \"08617999\", \"03749393\"]}");
	add("03749767", "{\"term\":\"computer memory\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03749767\"]}");
	add("03749767", "{\"term\":\"computer storage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03749767\"]}");
	add("03749767", "{\"term\":\"memory\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06149719\", \"03749767\", \"05659244\", \"05768199\", \"05943778\"]}");
	add("03749767", "{\"term\":\"memory board\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03749767\"]}");
	add("03749767", "{\"term\":\"storage\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00373415\", \"03749767\", \"13583336\", \"00813322\", \"04336328\", \"00813016\"]}");
	add("03749767", "{\"term\":\"store\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04336328\", \"03749767\", \"13388243\", \"04209460\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }