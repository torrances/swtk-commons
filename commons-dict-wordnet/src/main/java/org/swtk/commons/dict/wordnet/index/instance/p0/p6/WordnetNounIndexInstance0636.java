package org.swtk.commons.dict.wordnet.index.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance0636 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06360055", "{\"term\":\"hypercatalectic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06360055\"]}");
	add("06360255", "{\"term\":\"by-line\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00433629\", \"06360255\"]}");
	add("06360255", "{\"term\":\"credit line\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06360255\", \"13400586\"]}");
	add("06360400", "{\"term\":\"dateline\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06360400\", \"08617348\"]}");
	add("06360590", "{\"term\":\"black and white\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02849637\", \"06360590\"]}");
	add("06360590", "{\"term\":\"written communication\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06360590\"]}");
	add("06360590", "{\"term\":\"written language\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06360590\"]}");
	add("06360967", "{\"term\":\"transcription\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00911901\", \"00941444\", \"04477840\", \"13589441\", \"06360967\"]}");
	add("06360967", "{\"term\":\"written text\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06360967\"]}");
	add("06361198", "{\"term\":\"transliteration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361198\"]}");
	add("06361322", "{\"term\":\"phonetic transcription\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361322\"]}");
	add("06361497", "{\"term\":\"shorthand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361497\"]}");
	add("06361497", "{\"term\":\"stenography\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00616749\", \"06361497\"]}");
	add("06361497", "{\"term\":\"tachygraphy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361497\"]}");
	add("06361681", "{\"term\":\"cursive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361681\"]}");
	add("06361681", "{\"term\":\"cursive script\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361681\"]}");
	add("06361681", "{\"term\":\"longhand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361681\"]}");
	add("06361681", "{\"term\":\"running hand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361681\"]}");
	add("06361999", "{\"term\":\"minuscule\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06361999\", \"06837807\"]}");
	add("06362184", "{\"term\":\"copperplate\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03108898\", \"03109064\", \"06362184\"]}");
	add("06362325", "{\"term\":\"italic\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06840394\", \"06974593\", \"06362325\"]}");
	add("06362493", "{\"term\":\"round hand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06362493\"]}");
	add("06362609", "{\"term\":\"orthography\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06362609\"]}");
	add("06362609", "{\"term\":\"writing system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06362609\"]}");
	add("06363020", "{\"term\":\"script\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06363020\", \"06415036\", \"07023062\"]}");
	add("06363295", "{\"term\":\"aramaic\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06363295\", \"07000967\"]}");
	add("06363295", "{\"term\":\"aramaic script\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06363295\"]}");
	add("06363524", "{\"term\":\"armenian\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06363524\", \"06955461\", \"09709767\"]}");
	add("06363524", "{\"term\":\"armenian alphabet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06363524\"]}");
	add("06363708", "{\"term\":\"avestan\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06363708\", \"06986601\"]}");
	add("06363853", "{\"term\":\"babylonian\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06363853\", \"09661199\"]}");
	add("06364025", "{\"term\":\"brahmi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364025\"]}");
	add("06364189", "{\"term\":\"devanagari\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364189\"]}");
	add("06364189", "{\"term\":\"devanagari script\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364189\"]}");
	add("06364189", "{\"term\":\"nagari\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364189\"]}");
	add("06364189", "{\"term\":\"nagari script\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364189\"]}");
	add("06364361", "{\"term\":\"pahlavi\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06364361\", \"06987506\", \"11240451\"]}");
	add("06364496", "{\"term\":\"uighur\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06364496\", \"06940263\", \"09756018\"]}");
	add("06364496", "{\"term\":\"uigur\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06364496\", \"06940263\", \"09756018\"]}");
	add("06364496", "{\"term\":\"uygur\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06364496\", \"06940263\", \"09756018\"]}");
	add("06364632", "{\"term\":\"uncial\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364632\"]}");
	add("06364852", "{\"term\":\"spelling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06364852\"]}");
	add("06365060", "{\"term\":\"misspelling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06365060\"]}");
	add("06365164", "{\"term\":\"coding system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06365164\"]}");
	add("06365341", "{\"term\":\"code\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06367301\", \"06365341\", \"06680062\"]}");
	add("06365611", "{\"term\":\"access\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00281976\", \"02673854\", \"06365611\", \"02673692\", \"05182994\", \"05183715\"]}");
	add("06365611", "{\"term\":\"access code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06365611\"]}");
	add("06365888", "{\"term\":\"back door\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02771749\", \"06365888\", \"00282135\"]}");
	add("06365888", "{\"term\":\"backdoor\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00282135\", \"02771749\", \"06365888\"]}");
	add("06366033", "{\"term\":\"area code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366033\"]}");
	add("06366181", "{\"term\":\"bar code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366181\"]}");
	add("06366181", "{\"term\":\"universal product code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366181\"]}");
	add("06366485", "{\"term\":\"color code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366485\"]}");
	add("06366590", "{\"term\":\"cryptogram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366590\"]}");
	add("06366590", "{\"term\":\"cryptograph\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03147230\", \"06366590\", \"06366714\"]}");
	add("06366590", "{\"term\":\"secret writing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00615776\", \"06366590\"]}");
	add("06366714", "{\"term\":\"cipher\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06366714\", \"09942876\", \"13762308\", \"13764498\", \"06264369\"]}");
	add("06366714", "{\"term\":\"cryptograph\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03147230\", \"06366590\", \"06366714\"]}");
	add("06366714", "{\"term\":\"cypher\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06264369\", \"06366714\", \"09942876\", \"13762308\", \"13764498\"]}");
	add("06366714", "{\"term\":\"secret code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366714\"]}");
	add("06366866", "{\"term\":\"international morse code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366866\"]}");
	add("06366866", "{\"term\":\"morse\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11212656\", \"06366866\"]}");
	add("06366866", "{\"term\":\"morse code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06366866\"]}");
	add("06367112", "{\"term\":\"postal code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06367112\"]}");
	add("06367112", "{\"term\":\"postcode\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06367112\"]}");
	add("06367112", "{\"term\":\"zip\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04245427\", \"05043116\", \"06367112\", \"13762308\"]}");
	add("06367112", "{\"term\":\"zip code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06367112\"]}");
	add("06367301", "{\"term\":\"code\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06367301\", \"06365341\", \"06680062\"]}");
	add("06367301", "{\"term\":\"computer code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06367301\"]}");
	add("06367706", "{\"term\":\"argument\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05781046\", \"05866365\", \"06367706\", \"06479351\", \"07155686\", \"07197811\", \"06661469\"]}");
	add("06367706", "{\"term\":\"parameter\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05867861\", \"06367706\", \"07342905\", \"05867655\"]}");
	add("06367922", "{\"term\":\"address\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"04849463\", \"05089855\", \"06800007\", \"06807073\", \"07081631\", \"07253354\", \"08508037\", \"06367922\"]}");
	add("06367922", "{\"term\":\"computer address\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06367922\"]}");
	add("06367922", "{\"term\":\"reference\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"05931946\", \"06367922\", \"07273332\", \"01266543\", \"05931581\", \"06707541\", \"06429241\", \"07273000\", \"06776392\", \"06778981\"]}");
	add("06368162", "{\"term\":\"american standard code for information interchange\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368162\"]}");
	add("06368162", "{\"term\":\"ascii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368162\"]}");
	add("06368485", "{\"term\":\"ascii character set\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368485\"]}");
	add("06368711", "{\"term\":\"binary code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368711\"]}");
	add("06368831", "{\"term\":\"ecc\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368831\"]}");
	add("06368831", "{\"term\":\"error correction code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06368831\"]}");
	add("06369039", "{\"term\":\"cyclic redundancy check\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369039\"]}");
	add("06369221", "{\"term\":\"firmware\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369221\"]}");
	add("06369221", "{\"term\":\"microcode\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369221\"]}");
	add("06369392", "{\"term\":\"machine code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369392\"]}");
	add("06369392", "{\"term\":\"machine language\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06369392\", \"06912409\"]}");
	add("06369566", "{\"term\":\"object code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369566\"]}");
	add("06369718", "{\"term\":\"operation code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369718\"]}");
	add("06369718", "{\"term\":\"order code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369718\"]}");
	add("06369920", "{\"term\":\"source code\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06369920\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }