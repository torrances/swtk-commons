package org.swtk.commons.dict.wordnet.byid.generated.p0.p9;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById0929 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("09290034", "{\"term\":\"dipole molecule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09290034\"]}");
	add("09290133", "{\"term\":\"direct transmission\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09290133\"]}");
	add("09290396", "{\"term\":\"discard\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00092054\", \"00092323\", \"09290396\"]}");
	add("09290508", "{\"term\":\"distributary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09290508\"]}");
	add("09290664", "{\"term\":\"ditch\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09290664\", \"03218956\"]}");
	add("09290760", "{\"term\":\"divot\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09290760\", \"09290913\"]}");
	add("09290913", "{\"term\":\"divot\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09290760\", \"09290913\"]}");
	add("09291142", "{\"term\":\"dnieper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291142\"]}");
	add("09291142", "{\"term\":\"dnieper river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291142\"]}");
	add("09291386", "{\"term\":\"dog do\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291386\"]}");
	add("09291386", "{\"term\":\"dog shit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291386\"]}");
	add("09291386", "{\"term\":\"dog turd\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291386\"]}");
	add("09291386", "{\"term\":\"doggy do\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291386\"]}");
	add("09291498", "{\"term\":\"dolomite alps\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291498\"]}");
	add("09291684", "{\"term\":\"don\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06351765\", \"09291684\", \"09532107\", \"10045020\", \"10484108\", \"10044920\"]}");
	add("09291684", "{\"term\":\"don river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291684\"]}");
	add("09291833", "{\"term\":\"donner pass\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09291833\"]}");
	add("09292080", "{\"term\":\"dorado\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09292080\"]}");
	add("09292247", "{\"term\":\"down\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05263175\", \"09292247\", \"10962136\", \"00459310\", \"01899202\"]}");
	add("09292378", "{\"term\":\"downhill\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07478829\", \"09292378\"]}");
	add("09292479", "{\"term\":\"down quark\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09292479\"]}");
	add("09292623", "{\"term\":\"draco\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01691069\", \"09292623\", \"10962667\"]}");
	add("09292623", "{\"term\":\"dragon\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01691230\", \"09292623\", \"10049454\", \"09517519\"]}");
	add("09292788", "{\"term\":\"draw\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00115856\", \"00498547\", \"00560366\", \"00573322\", \"03237949\", \"03238126\", \"07368316\", \"10052401\", \"09292788\"]}");
	add("09292878", "{\"term\":\"dregs\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09292878\"]}");
	add("09292878", "{\"term\":\"settlings\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09292878\"]}");
	add("09293066", "{\"term\":\"drey\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09293066\"]}");
	add("09293139", "{\"term\":\"drift\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"03244102\", \"05931283\", \"06207399\", \"09293139\", \"13491096\", \"13490877\", \"11467947\"]}");
	add("09293320", "{\"term\":\"drift ice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09293320\"]}");
	add("09293414", "{\"term\":\"drink\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00841439\", \"09293414\", \"07897775\", \"00749813\", \"07901198\"]}");
	add("09293563", "{\"term\":\"drumlin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09293563\"]}");
	add("09293641", "{\"term\":\"dune\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09293641\"]}");
	add("09293641", "{\"term\":\"sand dune\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09293641\"]}");
	add("09293800", "{\"term\":\"earth\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"03467679\", \"05678816\", \"14868584\", \"08579604\", \"09357302\", \"14867162\", \"09293800\"]}");
	add("09293800", "{\"term\":\"globe\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03445436\", \"13922097\", \"09293800\"]}");
	add("09293800", "{\"term\":\"world\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"02475618\", \"05678816\", \"09503939\", \"08196607\", \"09293800\", \"05817904\", \"07982551\", \"09489410\"]}");
	add("09294197", "{\"term\":\"east china sea\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294197\"]}");
	add("09294321", "{\"term\":\"ebro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294321\"]}");
	add("09294321", "{\"term\":\"ebro river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294321\"]}");
	add("09294464", "{\"term\":\"elbe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294464\"]}");
	add("09294464", "{\"term\":\"elbe river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294464\"]}");
	add("09294680", "{\"term\":\"electric dipole\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294680\"]}");
	add("09294680", "{\"term\":\"electric doublet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294680\"]}");
	add("09294810", "{\"term\":\"electron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294810\"]}");
	add("09294810", "{\"term\":\"negatron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294810\"]}");
	add("09294991", "{\"term\":\"elementary particle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294991\"]}");
	add("09294991", "{\"term\":\"fundamental particle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09294991\"]}");
	add("09295374", "{\"term\":\"eliminator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09295374\"]}");
	add("09295501", "{\"term\":\"elizabeth river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09295501\"]}");
	add("09295679", "{\"term\":\"el libertador\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09295679\", \"10875200\"]}");
	add("09295833", "{\"term\":\"el muerto\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09295833\"]}");
	add("09296036", "{\"term\":\"coal\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09296036\", \"14838786\"]}");
	add("09296036", "{\"term\":\"ember\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296036\"]}");
	add("09296197", "{\"term\":\"enclosure\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06485052\", \"09296197\", \"00322782\", \"03290823\"]}");
	add("09296197", "{\"term\":\"natural enclosure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296197\"]}");
	add("09296353", "{\"term\":\"english channel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296353\"]}");
	add("09296587", "{\"term\":\"enterolith\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296587\"]}");
	add("09296682", "{\"term\":\"envelope\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"03296874\", \"05211741\", \"09296682\", \"13892427\", \"03296652\", \"03296730\"]}");
	add("09296834", "{\"term\":\"epsilon aurigae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296834\"]}");
	add("09296938", "{\"term\":\"eridanus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09296938\"]}");
	add("09297058", "{\"term\":\"escarpment\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03301257\", \"09297058\"]}");
	add("09297058", "{\"term\":\"scarp\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03301257\", \"09297058\"]}");
	add("09297211", "{\"term\":\"esker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297211\"]}");
	add("09297406", "{\"term\":\"estuary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297406\"]}");
	add("09297645", "{\"term\":\"euphrates\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297645\"]}");
	add("09297645", "{\"term\":\"euphrates river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297645\"]}");
	add("09297922", "{\"term\":\"eurasia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297922\"]}");
	add("09298241", "{\"term\":\"europa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09298241\"]}");
	add("09298379", "{\"term\":\"europe\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08189594\", \"08190414\", \"09298379\"]}");
	add("09299778", "{\"term\":\"evening star\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09299778\"]}");
	add("09299778", "{\"term\":\"hesperus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09299778\"]}");
	add("09299778", "{\"term\":\"vesper\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01036603\", \"09299778\"]}");
	add("09299916", "{\"term\":\"everest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09299916\"]}");
	add("09299916", "{\"term\":\"mount everest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09299916\"]}");
	add("09299916", "{\"term\":\"mt. everest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09299916\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }