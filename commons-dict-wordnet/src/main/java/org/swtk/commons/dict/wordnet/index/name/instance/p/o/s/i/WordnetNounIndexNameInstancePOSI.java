package org.swtk.commons.dict.wordnet.index.name.instance.p.o.s.i;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePOSI {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"posing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00345247\"]}");
	add("{\"term\":\"posit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766013\"]}");
	add("{\"term\":\"position\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"00084268\", \"00722683\", \"06495143\", \"06796122\", \"06206019\", \"13948785\", \"01053255\", \"00723730\", \"08639776\", \"05081943\", \"00587299\", \"13968971\", \"05087073\", \"06218486\", \"08640161\", \"08639173\"]}");
	add("{\"term\":\"positioner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04117533\"]}");
	add("{\"term\":\"positioning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01053255\"]}");
	add("{\"term\":\"positive\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03993867\", \"06333461\"]}");
	add("{\"term\":\"positiveness\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04762473\", \"05115409\", \"05168179\", \"05174332\", \"13879054\"]}");
	add("{\"term\":\"positivism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05174332\", \"06002252\"]}");
	add("{\"term\":\"positivist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10475704\"]}");
	add("{\"term\":\"positivity\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04762473\", \"05115409\", \"05168179\", \"05174332\", \"13879054\"]}");
	add("{\"term\":\"positron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09420771\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }