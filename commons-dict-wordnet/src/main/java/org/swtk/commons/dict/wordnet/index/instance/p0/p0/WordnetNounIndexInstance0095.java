package org.swtk.commons.dict.wordnet.index.instance.p0.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance0095 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("00950022", "{\"term\":\"development\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"07082671\", \"13485760\", \"14446275\", \"08566645\", \"00950022\", \"07438160\", \"13510240\", \"13486023\", \"00251126\"]}");
	add("00950022", "{\"term\":\"exploitation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00419916\", \"00950022\"]}");
	add("00950456", "{\"term\":\"land development\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00950456\"]}");
	add("00950553", "{\"term\":\"water development\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00950553\"]}");
	add("00950553", "{\"term\":\"water program\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00950553\"]}");
	add("00950553", "{\"term\":\"water project\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00950553\"]}");
	add("00950684", "{\"term\":\"recycling\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00950684\", \"14606023\"]}");
	add("00950858", "{\"term\":\"bottle collection\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00950858\", \"01017493\", \"07971162\"]}");
	add("00950950", "{\"term\":\"application\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00036782\", \"00634572\", \"03696454\", \"06582286\", \"00713478\", \"06524571\", \"00950950\"]}");
	add("00950950", "{\"term\":\"practical application\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00950950\"]}");
	add("00951332", "{\"term\":\"misapplication\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00778229\", \"00951332\"]}");
	add("00951435", "{\"term\":\"technology\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03707142\", \"06134474\", \"00951435\"]}");
	add("00951878", "{\"term\":\"engineering\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03293411\", \"06134474\", \"00951878\"]}");
	add("00952059", "{\"term\":\"aeronautical engineering\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00952059\", \"06135628\"]}");
	add("00952181", "{\"term\":\"automotive engineering\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952181\"]}");
	add("00952181", "{\"term\":\"automotive technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952181\"]}");
	add("00952328", "{\"term\":\"chemical engineering\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00952328\", \"06136911\"]}");
	add("00952467", "{\"term\":\"communications technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952467\"]}");
	add("00952637", "{\"term\":\"digital communications technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952637\"]}");
	add("00952816", "{\"term\":\"computer technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952816\"]}");
	add("00952969", "{\"term\":\"high tech\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952969\"]}");
	add("00952969", "{\"term\":\"high technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00952969\"]}");
	add("00953148", "{\"term\":\"rail technology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953148\"]}");
	add("00953148", "{\"term\":\"railroading\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953148\"]}");
	add("00953344", "{\"term\":\"maglev\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953344\"]}");
	add("00953344", "{\"term\":\"magnetic levitation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953344\"]}");
	add("00953544", "{\"term\":\"overexploitation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953544\"]}");
	add("00953544", "{\"term\":\"overuse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953544\"]}");
	add("00953544", "{\"term\":\"overutilisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953544\"]}");
	add("00953544", "{\"term\":\"overutilization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953544\"]}");
	add("00953737", "{\"term\":\"capitalisation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00093826\", \"00953737\", \"00954325\", \"06414068\"]}");
	add("00953737", "{\"term\":\"capitalization\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00093826\", \"00953737\", \"00954325\", \"06414068\"]}");
	add("00953892", "{\"term\":\"commercialisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953892\"]}");
	add("00953892", "{\"term\":\"commercialization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00953892\"]}");
	add("00954325", "{\"term\":\"capitalisation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00093826\", \"00953737\", \"00954325\", \"06414068\"]}");
	add("00954325", "{\"term\":\"capitalization\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00093826\", \"00953737\", \"00954325\", \"06414068\"]}");
	add("00954497", "{\"term\":\"market capitalisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00954497\"]}");
	add("00954497", "{\"term\":\"market capitalization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00954497\"]}");
	add("00954726", "{\"term\":\"electrification\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00954726\", \"01049115\"]}");
	add("00954898", "{\"term\":\"unitisation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00954898\", \"01095456\", \"01106079\", \"05739513\"]}");
	add("00954898", "{\"term\":\"unitization\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00954898\", \"01095456\", \"01106079\", \"05739513\"]}");
	add("00955074", "{\"term\":\"action\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00577488\", \"01184802\", \"01184392\", \"02680572\", \"04843181\", \"06385136\", \"13540166\", \"00955074\", \"14030430\", \"00038116\"]}");
	add("00955074", "{\"term\":\"military action\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00955074\"]}");
	add("00955391", "{\"term\":\"limited war\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00955391\"]}");
	add("00955521", "{\"term\":\"psychological warfare\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00955521\"]}");
	add("00955521", "{\"term\":\"war of nerves\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00955521\"]}");
	add("00955670", "{\"term\":\"battle\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00961007\", \"00790634\", \"00955670\"]}");
	add("00955670", "{\"term\":\"conflict\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"07196595\", \"13877574\", \"04721955\", \"14004330\", \"00955670\", \"07498579\", \"00961007\"]}");
	add("00955670", "{\"term\":\"engagement\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"01241629\", \"07352714\", \"00271763\", \"01220349\", \"07242871\", \"08401740\", \"00955670\"]}");
	add("00955670", "{\"term\":\"fight\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00447478\", \"07199051\", \"04844656\", \"01173452\", \"00955670\"]}");
	add("00956197", "{\"term\":\"blockade\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02856477\", \"00956197\"]}");
	add("00956197", "{\"term\":\"encirclement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00956197\"]}");
	add("00956422", "{\"term\":\"defence\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00825193\", \"00825411\", \"00956422\", \"01201240\", \"03176022\", \"06753339\", \"07215473\", \"08080966\", \"08081359\", \"08098280\", \"13480525\"]}");
	add("00956422", "{\"term\":\"defense\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"00825193\", \"01201240\", \"03176022\", \"08080966\", \"07215473\", \"08081359\", \"08148512\", \"13480525\", \"06753339\", \"08098280\", \"00825411\", \"00956422\"]}");
	add("00956422", "{\"term\":\"defensive measure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00956422\"]}");
	add("00956862", "{\"term\":\"electronic warfare\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00956862\"]}");
	add("00956862", "{\"term\":\"ew\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00956862\"]}");
	add("00957171", "{\"term\":\"military operation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00957171\"]}");
	add("00957171", "{\"term\":\"operation\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00410032\", \"00871261\", \"05709328\", \"13546752\", \"00578105\", \"00672594\", \"00957171\", \"13546128\", \"00410304\", \"01097871\", \"14032291\"]}");
	add("00957676", "{\"term\":\"combined operation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00957676\"]}");
	add("00957917", "{\"term\":\"police action\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00957917\"]}");
	add("00958098", "{\"term\":\"resistance\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"01171807\", \"04087045\", \"04653729\", \"05221162\", \"08377599\", \"14550556\", \"14550773\", \"00958098\", \"11524386\", \"11524062\", \"00203133\"]}");
	add("00958283", "{\"term\":\"saber rattling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00958283\"]}");
	add("00958283", "{\"term\":\"sabre rattling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00958283\"]}");
	add("00958451", "{\"term\":\"armageddon\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00958451\", \"08523953\"]}");
	add("00958596", "{\"term\":\"pitched battle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00958596\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }