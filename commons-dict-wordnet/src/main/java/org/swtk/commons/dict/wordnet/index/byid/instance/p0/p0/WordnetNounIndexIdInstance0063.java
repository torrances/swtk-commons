package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0063 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("00630123", "{\"term\":\"pandiculation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630123\"]}");
	add("00630249", "{\"term\":\"power walking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630249\"]}");
	add("00630416", "{\"term\":\"arm exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630416\"]}");
	add("00630558", "{\"term\":\"press-up\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630558\"]}");
	add("00630558", "{\"term\":\"pushup\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630558\"]}");
	add("00630736", "{\"term\":\"widegrip pushup\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630736\"]}");
	add("00630837", "{\"term\":\"chin-up\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00630837\"]}");
	add("00630837", "{\"term\":\"pull-up\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00630837\", \"04027011\"]}");
	add("00631043", "{\"term\":\"back exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631043\"]}");
	add("00631151", "{\"term\":\"leg exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631151\"]}");
	add("00631311", "{\"term\":\"knee bend\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631311\"]}");
	add("00631311", "{\"term\":\"squat\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00345768\", \"13795187\", \"00631311\"]}");
	add("00631311", "{\"term\":\"squatting\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00345768\", \"00631311\"]}");
	add("00631508", "{\"term\":\"leg curl\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631508\"]}");
	add("00631508", "{\"term\":\"leg curling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631508\"]}");
	add("00631641", "{\"term\":\"leg extensor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631641\"]}");
	add("00631766", "{\"term\":\"neck exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631766\"]}");
	add("00631874", "{\"term\":\"stomach exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631874\"]}");
	add("00631874", "{\"term\":\"tummy crunch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631874\"]}");
	add("00632026", "{\"term\":\"sit-up\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00632026\"]}");
	add("00632200", "{\"term\":\"yoga\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00632200\", \"06249497\"]}");
	add("00632411", "{\"term\":\"hatha yoga\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00632411\"]}");
	add("00632621", "{\"term\":\"practice\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05675040\", \"00632621\", \"00412061\", \"00896250\", \"00411260\"]}");
	add("00632955", "{\"term\":\"consultancy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00632955\"]}");
	add("00633130", "{\"term\":\"cosmetology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633130\"]}");
	add("00633260", "{\"term\":\"dental practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633260\"]}");
	add("00633347", "{\"term\":\"law practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633347\"]}");
	add("00633444", "{\"term\":\"medical practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633444\"]}");
	add("00633585", "{\"term\":\"family medicine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633585\"]}");
	add("00633585", "{\"term\":\"family practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633585\"]}");
	add("00633774", "{\"term\":\"group practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633774\"]}");
	add("00633959", "{\"term\":\"optometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00633959\"]}");
	add("00634063", "{\"term\":\"private practice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00634063\"]}");
	add("00634351", "{\"term\":\"empiricism\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00634351\", \"00636942\", \"05979178\"]}");
	add("00634351", "{\"term\":\"quackery\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00751649\", \"00634351\"]}");
	add("00634572", "{\"term\":\"application\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00036782\", \"00634572\", \"03696454\", \"06582286\", \"00713478\", \"06524571\", \"00950950\"]}");
	add("00634572", "{\"term\":\"diligence\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00634572\", \"04872345\", \"04680363\"]}");
	add("00634722", "{\"term\":\"overkill\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00634722\", \"05211584\"]}");
	add("00634856", "{\"term\":\"supererogation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00634856\"]}");
	add("00634960", "{\"term\":\"overexertion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00634960\"]}");
	add("00635107", "{\"term\":\"investigating\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00635107\"]}");
	add("00635107", "{\"term\":\"investigation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00635107\", \"05808619\"]}");
	add("00635519", "{\"term\":\"analysis\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00705558\", \"06023392\", \"07081916\", \"06387637\", \"05780664\", \"00635519\"]}");
	add("00635829", "{\"term\":\"count\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09988748\", \"00635829\", \"13612964\"]}");
	add("00635829", "{\"term\":\"counting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00635829\"]}");
	add("00635829", "{\"term\":\"enumeration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00635829\", \"06502878\"]}");
	add("00635829", "{\"term\":\"numeration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00635829\", \"07245619\"]}");
	add("00635829", "{\"term\":\"reckoning\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00635829\", \"06529770\", \"05810193\"]}");
	add("00635829", "{\"term\":\"tally\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00635829\", \"06529770\", \"00190414\"]}");
	add("00636255", "{\"term\":\"police investigation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636255\"]}");
	add("00636255", "{\"term\":\"police work\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636255\"]}");
	add("00636448", "{\"term\":\"detecting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636448\"]}");
	add("00636448", "{\"term\":\"detection\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00636448\", \"06291828\", \"00151907\", \"05718634\"]}");
	add("00636448", "{\"term\":\"detective work\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636448\"]}");
	add("00636448", "{\"term\":\"sleuthing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636448\"]}");
	add("00636665", "{\"term\":\"forensics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00636665\"]}");
	add("00636787", "{\"term\":\"roundup\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00636787\", \"06481268\", \"00923441\"]}");
	add("00636942", "{\"term\":\"empiricism\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00634351\", \"00636942\", \"05979178\"]}");
	add("00637093", "{\"term\":\"examination\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00637704\", \"05795010\", \"07208618\", \"07211681\", \"00637093\"]}");
	add("00637093", "{\"term\":\"scrutiny\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00879730\", \"00637093\"]}");
	add("00637704", "{\"term\":\"examination\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00637704\", \"05795010\", \"07208618\", \"07211681\", \"00637093\"]}");
	add("00637704", "{\"term\":\"testing\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00637704\", \"00645945\", \"00641218\"]}");
	add("00637971", "{\"term\":\"enquiry\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00637971\", \"05805605\", \"07208256\"]}");
	add("00637971", "{\"term\":\"inquiry\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00637971\", \"07208256\", \"05805605\"]}");
	add("00638164", "{\"term\":\"research\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05805605\", \"00638164\"]}");
	add("00638388", "{\"term\":\"11-plus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00638388\"]}");
	add("00638388", "{\"term\":\"eleven-plus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00638388\"]}");
	add("00638597", "{\"term\":\"search\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00645609\", \"05778055\", \"13574763\", \"00638597\", \"00947217\"]}");
	add("00638789", "{\"term\":\"operations research\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00638789\"]}");
	add("00638920", "{\"term\":\"means test\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00638920\"]}");
	add("00639053", "{\"term\":\"inquest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639053\"]}");
	add("00639155", "{\"term\":\"big science\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639155\"]}");
	add("00639323", "{\"term\":\"biological research\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639323\"]}");
	add("00639486", "{\"term\":\"cloning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639486\"]}");
	add("00639691", "{\"term\":\"reproductive cloning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639691\"]}");
	add("00639845", "{\"term\":\"human reproductive cloning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00639845\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }