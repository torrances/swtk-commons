package org.swtk.commons.dict.wordnet.index.name.instance.d.i.s.p;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDISP {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"disparagement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01222382\", \"06730109\"]}");
	add("{\"term\":\"disparager\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10029325\"]}");
	add("{\"term\":\"disparateness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04757669\"]}");
	add("{\"term\":\"disparity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04759785\"]}");
	add("{\"term\":\"dispassion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04637494\"]}");
	add("{\"term\":\"dispassionateness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04637494\"]}");
	add("{\"term\":\"dispatch\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00223115\", \"05066981\", \"00062110\", \"06695539\"]}");
	add("{\"term\":\"dispatcher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10037147\", \"10668747\"]}");
	add("{\"term\":\"dispensability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05180480\"]}");
	add("{\"term\":\"dispensableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05180480\"]}");
	add("{\"term\":\"dispensary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03215273\"]}");
	add("{\"term\":\"dispensation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01085428\", \"13306737\", \"01144335\"]}");
	add("{\"term\":\"dispenser\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10037519\", \"03215404\"]}");
	add("{\"term\":\"dispersal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00369400\"]}");
	add("{\"term\":\"dispersion\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00369400\", \"05094504\", \"07346359\"]}");
	add("{\"term\":\"dispiritedness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07553056\"]}");
	add("{\"term\":\"displacement\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00210295\", \"00316656\", \"13488212\", \"13488427\", \"00331810\", \"07459268\", \"00198459\"]}");
	add("{\"term\":\"display\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"03215838\", \"06900776\", \"07228377\", \"03215661\", \"00522265\", \"06892571\"]}");
	add("{\"term\":\"displeasure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07555812\"]}");
	add("{\"term\":\"disposable\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03216724\"]}");
	add("{\"term\":\"disposal\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03216835\", \"00044347\", \"01138273\", \"05205890\"]}");
	add("{\"term\":\"disposition\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04950046\", \"06206319\", \"00044347\", \"04630969\"]}");
	add("{\"term\":\"dispossession\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05987339\", \"01196821\"]}");
	add("{\"term\":\"dispraise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01222382\"]}");
	add("{\"term\":\"disproof\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00156118\", \"05834793\"]}");
	add("{\"term\":\"disproportion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13921202\"]}");
	add("{\"term\":\"disprover\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10530139\"]}");
	add("{\"term\":\"disputant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09638495\"]}");
	add("{\"term\":\"disputation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07197811\", \"07256764\"]}");
	add("{\"term\":\"dispute\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01173303\", \"07196595\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }