package org.swtk.commons.dict.wordnet.byid.generated.p0.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById0072 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("00720067", "{\"term\":\"daubing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00720067\"]}");
	add("00720067", "{\"term\":\"plastering\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00720067\"]}");
	add("00720268", "{\"term\":\"plating\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00720268\", \"03969322\"]}");
	add("00720400", "{\"term\":\"scumble\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00720400\"]}");
	add("00720526", "{\"term\":\"tiling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00720526\"]}");
	add("00720640", "{\"term\":\"waxing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07429166\", \"00720640\"]}");
	add("00720746", "{\"term\":\"duty\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13337021\", \"00720746\", \"01132241\"]}");
	add("00720957", "{\"term\":\"chore\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00720957\"]}");
	add("00720957", "{\"term\":\"job\", \"synsetCount\":13, \"upperType\":\"NOUN\", \"ids\":[\"00784446\", \"06448609\", \"06584658\", \"10242619\", \"11105392\", \"14434009\", \"00577754\", \"00577914\", \"00585806\", \"03604953\", \"03604821\", \"00720957\", \"00583425\"]}");
	add("00720957", "{\"term\":\"task\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00720957\", \"00797381\"]}");
	add("00721418", "{\"term\":\"ball-breaker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00721418\", \"09853646\"]}");
	add("00721418", "{\"term\":\"ball-buster\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00721418\", \"09853646\"]}");
	add("00721583", "{\"term\":\"paper route\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00721583\", \"08630653\"]}");
	add("00721683", "{\"term\":\"stint\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00721683\", \"02030011\", \"15159442\"]}");
	add("00721817", "{\"term\":\"function\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"06594579\", \"07461861\", \"08269388\", \"13803376\", \"00721817\", \"05156572\", \"13806028\"]}");
	add("00721817", "{\"term\":\"office\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00587299\", \"01035490\", \"08369230\", \"13968154\", \"00721817\", \"08354251\", \"03847186\"]}");
	add("00721817", "{\"term\":\"part\", \"synsetCount\":13, \"upperType\":\"NOUN\", \"ids\":[\"03938737\", \"00789119\", \"07044205\", \"05263841\", \"05876035\", \"13306199\", \"05937794\", \"00721817\", \"08647614\", \"05679818\", \"09408804\", \"03898588\", \"13831419\"]}");
	add("00721817", "{\"term\":\"role\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00723312\", \"05156572\", \"05937794\", \"00721817\"]}");
	add("00722203", "{\"term\":\"capacity\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"05040724\", \"05630739\", \"11453660\", \"13777193\", \"00722203\", \"00916626\", \"13801586\", \"14554438\", \"05210665\"]}");
	add("00722393", "{\"term\":\"hat\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00722393\", \"03502782\"]}");
	add("00722534", "{\"term\":\"portfolio\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00722534\", \"06506144\", \"08259349\", \"03992713\"]}");
	add("00722683", "{\"term\":\"lieu\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00722683\"]}");
	add("00722683", "{\"term\":\"place\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"06401196\", \"06495143\", \"08637370\", \"13971047\", \"06412750\", \"08665191\", \"13970825\", \"08639173\", \"00587299\", \"08577045\", \"13949819\", \"00722683\", \"08659612\", \"05619605\", \"08530790\", \"08682181\"]}");
	add("00722683", "{\"term\":\"position\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"00084268\", \"00722683\", \"06495143\", \"06796122\", \"06206019\", \"13948785\", \"01053255\", \"00723730\", \"08639776\", \"05081943\", \"00587299\", \"13968971\", \"05087073\", \"06218486\", \"08640161\", \"08639173\"]}");
	add("00722683", "{\"term\":\"stead\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00722683\"]}");
	add("00722912", "{\"term\":\"behalf\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05150547\", \"00722912\"]}");
	add("00723180", "{\"term\":\"second fiddle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00723180\", \"10588052\"]}");
	add("00723312", "{\"term\":\"role\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00723312\", \"05156572\", \"05937794\", \"00721817\"]}");
	add("00723504", "{\"term\":\"gender role\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00723504\"]}");
	add("00723730", "{\"term\":\"position\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"00084268\", \"00722683\", \"06495143\", \"06796122\", \"06206019\", \"13948785\", \"01053255\", \"00723730\", \"08639776\", \"05081943\", \"00587299\", \"13968971\", \"05087073\", \"06218486\", \"08640161\", \"08639173\"]}");
	add("00724235", "{\"term\":\"mound\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00724235\", \"03797581\", \"07978094\", \"09349568\", \"03797867\"]}");
	add("00724235", "{\"term\":\"pitcher\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00724235\", \"12800928\", \"13790888\", \"03956504\", \"10455755\"]}");
	add("00724492", "{\"term\":\"catcher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00724492\", \"09920596\"]}");
	add("00724798", "{\"term\":\"first\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"03354857\", \"06712932\", \"00724798\", \"15290329\", \"13618687\", \"13868396\"]}");
	add("00724798", "{\"term\":\"first base\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00244529\", \"00724798\", \"03354617\"]}");
	add("00725034", "{\"term\":\"second\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"03592219\", \"04171590\", \"07195032\", \"10587511\", \"13632638\", \"13868743\", \"15269461\", \"00725034\", \"15271664\", \"15259923\"]}");
	add("00725034", "{\"term\":\"second base\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725034\", \"04171467\"]}");
	add("00725235", "{\"term\":\"short\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00725235\", \"04211801\", \"04211665\"]}");
	add("00725235", "{\"term\":\"shortstop\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725235\", \"10612394\"]}");
	add("00725419", "{\"term\":\"third\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"04432939\", \"04433112\", \"06872554\", \"13869097\", \"00725419\", \"13759330\"]}");
	add("00725419", "{\"term\":\"third base\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725419\", \"04432939\"]}");
	add("00725684", "{\"term\":\"left field\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725684\", \"03659700\"]}");
	add("00725684", "{\"term\":\"leftfield\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725684\", \"03659700\"]}");
	add("00725935", "{\"term\":\"center field\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725935\", \"02997788\"]}");
	add("00725935", "{\"term\":\"centerfield\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00725935\", \"02997788\"]}");
	add("00726149", "{\"term\":\"right field\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00726149\", \"04098951\"]}");
	add("00726149", "{\"term\":\"rightfield\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00726149\", \"04098951\"]}");
	add("00726403", "{\"term\":\"steal\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00726403\", \"13274650\"]}");
	add("00726634", "{\"term\":\"forward\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00726634\", \"10125502\"]}");
	add("00726757", "{\"term\":\"center\", \"synsetCount\":18, \"upperType\":\"NOUN\", \"ids\":[\"00726757\", \"00728798\", \"00729762\", \"03971750\", \"07618221\", \"09924161\", \"08433480\", \"08531106\", \"09923774\", \"09924009\", \"08498843\", \"05471109\", \"05820064\", \"05929717\", \"08538999\", \"02997001\", \"02997788\", \"08540894\"]}");
	add("00726924", "{\"term\":\"guard\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00726924\", \"00729041\", \"00731836\", \"00824631\", \"08232524\", \"10169801\", \"05089429\", \"03469399\", \"10169240\", \"10169591\"]}");
	add("00727026", "{\"term\":\"back\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00727026\", \"02770438\", \"02770670\", \"02843848\", \"05595824\", \"09849440\", \"08643421\", \"04066813\", \"05566350\"]}");
	add("00727351", "{\"term\":\"lineman\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00727351\", \"10069171\", \"10283277\", \"10283108\"]}");
	add("00727620", "{\"term\":\"line backer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727620\", \"10282699\"]}");
	add("00727620", "{\"term\":\"linebacker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727620\", \"10282699\"]}");
	add("00727818", "{\"term\":\"field general\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727818\", \"10518401\"]}");
	add("00727818", "{\"term\":\"quarterback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727818\", \"10518401\"]}");
	add("00727818", "{\"term\":\"signal caller\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727818\", \"10518401\"]}");
	add("00728118", "{\"term\":\"fullback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00728118\", \"10135087\"]}");
	add("00728250", "{\"term\":\"halfback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00728250\", \"10176688\"]}");
	add("00728435", "{\"term\":\"tailback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00728435\", \"10708802\"]}");
	add("00728631", "{\"term\":\"wingback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00728631\", \"10801924\"]}");
	add("00728798", "{\"term\":\"center\", \"synsetCount\":18, \"upperType\":\"NOUN\", \"ids\":[\"00726757\", \"00728798\", \"00729762\", \"03971750\", \"07618221\", \"09924161\", \"08433480\", \"08531106\", \"09923774\", \"09924009\", \"08498843\", \"05471109\", \"05820064\", \"05929717\", \"08538999\", \"02997001\", \"02997788\", \"08540894\"]}");
	add("00729041", "{\"term\":\"guard\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00726924\", \"00729041\", \"00731836\", \"00824631\", \"08232524\", \"10169801\", \"05089429\", \"03469399\", \"10169240\", \"10169591\"]}");
	add("00729199", "{\"term\":\"tackle\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00563022\", \"00729199\", \"03356280\", \"04098805\", \"10707566\"]}");
	add("00729363", "{\"term\":\"end\", \"synsetCount\":14, \"upperType\":\"NOUN\", \"ids\":[\"00729363\", \"03291294\", \"06410044\", \"00789388\", \"08584413\", \"08583423\", \"10076206\", \"08584236\", \"14586552\", \"05877099\", \"05989760\", \"07306517\", \"15291722\", \"08583557\"]}");
	add("00729516", "{\"term\":\"mid-off\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00729516\"]}");
	add("00729640", "{\"term\":\"mid-on\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00729640\"]}");
	add("00729762", "{\"term\":\"center\", \"synsetCount\":18, \"upperType\":\"NOUN\", \"ids\":[\"00726757\", \"00728798\", \"00729762\", \"03971750\", \"07618221\", \"09924161\", \"08433480\", \"08531106\", \"09923774\", \"09924009\", \"08498843\", \"05471109\", \"05820064\", \"05929717\", \"08538999\", \"02997001\", \"02997788\", \"08540894\"]}");
	add("00729939", "{\"term\":\"school assignment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00729939\"]}");
	add("00729939", "{\"term\":\"schoolwork\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00729939\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }