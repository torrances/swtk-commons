package org.swtk.commons.dict.wordnet.index.name.instance.p.e.r.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePERC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"perca\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02559664\"]}");
	add("{\"term\":\"percale\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03920950\"]}");
	add("{\"term\":\"perceiver\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09649777\"]}");
	add("{\"term\":\"percent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13839738\"]}");
	add("{\"term\":\"percentage\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13306199\", \"13839738\"]}");
	add("{\"term\":\"percentile\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05745697\"]}");
	add("{\"term\":\"percept\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05938922\"]}");
	add("{\"term\":\"perceptibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05024414\"]}");
	add("{\"term\":\"perception\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00878552\", \"05717967\", \"05716379\", \"05844792\", \"05938922\"]}");
	add("{\"term\":\"perceptiveness\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04851106\", \"05718157\", \"05757616\", \"07528486\"]}");
	add("{\"term\":\"perceptivity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07528486\"]}");
	add("{\"term\":\"perch\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02558494\", \"02559477\", \"07796149\", \"08644333\", \"13635960\", \"13672539\", \"03921038\"]}");
	add("{\"term\":\"percher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01526297\", \"09650205\"]}");
	add("{\"term\":\"percheron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02389745\"]}");
	add("{\"term\":\"perchlorate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14708768\"]}");
	add("{\"term\":\"perchloride\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15042033\"]}");
	add("{\"term\":\"perchloromethane\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14822209\"]}");
	add("{\"term\":\"percidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02559254\"]}");
	add("{\"term\":\"perciformes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02555827\"]}");
	add("{\"term\":\"percina\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02560710\"]}");
	add("{\"term\":\"percipient\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09649777\"]}");
	add("{\"term\":\"percoid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02557361\"]}");
	add("{\"term\":\"percoidea\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02557143\"]}");
	add("{\"term\":\"percoidean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02557361\"]}");
	add("{\"term\":\"percolate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15022455\"]}");
	add("{\"term\":\"percolation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00192998\", \"00249119\", \"13555477\"]}");
	add("{\"term\":\"percolator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03921237\"]}");
	add("{\"term\":\"percomorphi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02555827\"]}");
	add("{\"term\":\"percophidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02622663\"]}");
	add("{\"term\":\"percussion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00877917\", \"08234478\", \"00378621\", \"00546096\"]}");
	add("{\"term\":\"percussionist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10434782\"]}");
	add("{\"term\":\"percussor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03973083\"]}");
	add("{\"term\":\"percy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11249489\", \"11249652\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }