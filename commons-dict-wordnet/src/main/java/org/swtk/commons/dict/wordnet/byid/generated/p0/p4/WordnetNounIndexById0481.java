package org.swtk.commons.dict.wordnet.byid.generated.p0.p4;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById0481 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("04810025", "{\"term\":\"deviation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00351206\", \"00738697\", \"04810025\", \"06031640\", \"07380889\"]}");
	add("04810156", "{\"term\":\"accuracy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04810458\", \"04810156\"]}");
	add("04810156", "{\"term\":\"truth\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"11370700\", \"04810156\", \"06736815\", \"13979774\", \"05827597\"]}");
	add("04810458", "{\"term\":\"accuracy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04810458\", \"04810156\"]}");
	add("04810679", "{\"term\":\"exactitude\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04810679\"]}");
	add("04810679", "{\"term\":\"exactness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04810679\"]}");
	add("04810951", "{\"term\":\"minuteness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04810951\", \"05114228\"]}");
	add("04811129", "{\"term\":\"preciseness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04811129\", \"04828682\"]}");
	add("04811129", "{\"term\":\"precision\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04811129\"]}");
	add("04811418", "{\"term\":\"trueness\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04811418\", \"04884725\", \"13979774\"]}");
	add("04811555", "{\"term\":\"fidelity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04884180\", \"04811555\"]}");
	add("04811700", "{\"term\":\"inaccuracy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04811700\"]}");
	add("04811860", "{\"term\":\"inexactitude\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04811860\"]}");
	add("04811860", "{\"term\":\"inexactness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04811860\"]}");
	add("04812015", "{\"term\":\"impreciseness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812015\"]}");
	add("04812015", "{\"term\":\"imprecision\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812015\"]}");
	add("04812175", "{\"term\":\"looseness\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00749605\", \"04781750\", \"04784660\", \"04812175\", \"04892804\", \"14395318\"]}");
	add("04812364", "{\"term\":\"infallibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812364\"]}");
	add("04812532", "{\"term\":\"inerrancy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812532\"]}");
	add("04812700", "{\"term\":\"errancy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04812700\", \"04813041\"]}");
	add("04812863", "{\"term\":\"papal infallibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04812863\"]}");
	add("04813041", "{\"term\":\"errancy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04812700\", \"04813041\"]}");
	add("04813295", "{\"term\":\"instability\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04782986\", \"14027634\", \"04813295\", \"13999106\"]}");
	add("04813397", "{\"term\":\"duplicability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04813397\"]}");
	add("04813397", "{\"term\":\"reproducibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04813397\"]}");
	add("04813544", "{\"term\":\"irreproducibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04813544\"]}");
	add("04813740", "{\"term\":\"fallibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04813740\"]}");
	add("04813883", "{\"term\":\"worthiness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04813883\"]}");
	add("04814129", "{\"term\":\"deservingness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814129\"]}");
	add("04814129", "{\"term\":\"merit\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04814129\", \"05146223\"]}");
	add("04814129", "{\"term\":\"meritoriousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814129\"]}");
	add("04814439", "{\"term\":\"desert\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04814439\", \"08522594\"]}");
	add("04814594", "{\"term\":\"laudability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814594\"]}");
	add("04814594", "{\"term\":\"laudableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814594\"]}");
	add("04814594", "{\"term\":\"praiseworthiness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814594\"]}");
	add("04814741", "{\"term\":\"quotability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814741\"]}");
	add("04814878", "{\"term\":\"roadworthiness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04814878\"]}");
	add("04815028", "{\"term\":\"unworthiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04728926\", \"04815028\"]}");
	add("04815223", "{\"term\":\"baseness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815223\"]}");
	add("04815223", "{\"term\":\"contemptibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815223\"]}");
	add("04815223", "{\"term\":\"despicability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815223\"]}");
	add("04815223", "{\"term\":\"despicableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815223\"]}");
	add("04815223", "{\"term\":\"sordidness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04815223\", \"14522695\"]}");
	add("04815533", "{\"term\":\"disgracefulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815533\"]}");
	add("04815533", "{\"term\":\"ignominiousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815533\"]}");
	add("04815533", "{\"term\":\"shamefulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815533\"]}");
	add("04815768", "{\"term\":\"scandalousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815768\"]}");
	add("04815891", "{\"term\":\"popularity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04815891\"]}");
	add("04816217", "{\"term\":\"hot stuff\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04816217\", \"05218088\"]}");
	add("04816341", "{\"term\":\"unpopularity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04816341\"]}");
	add("04816489", "{\"term\":\"legality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04816489\"]}");
	add("04816705", "{\"term\":\"validity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04816705\", \"04790831\"]}");
	add("04816705", "{\"term\":\"validness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04816705\"]}");
	add("04816894", "{\"term\":\"effect\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"14334775\", \"04816894\", \"06616419\", \"05926071\", \"04682671\", \"11430739\"]}");
	add("04816894", "{\"term\":\"force\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00130563\", \"04816894\", \"08224784\", \"10480990\", \"00967515\", \"08215338\", \"08224937\", \"05042508\", \"11479041\", \"05201846\"]}");
	add("04817036", "{\"term\":\"lawfulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817036\"]}");
	add("04817287", "{\"term\":\"legitimacy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04790511\", \"04817287\"]}");
	add("04817446", "{\"term\":\"licitness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817446\"]}");
	add("04817579", "{\"term\":\"illegality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817579\"]}");
	add("04817762", "{\"term\":\"invalidity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817762\"]}");
	add("04817762", "{\"term\":\"invalidness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817762\"]}");
	add("04817979", "{\"term\":\"fallaciousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04817979\"]}");
	add("04818117", "{\"term\":\"unlawfulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04818117\"]}");
	add("04818378", "{\"term\":\"lawlessness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04818378\", \"13996506\"]}");
	add("04818378", "{\"term\":\"outlawry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04818378\"]}");
	add("04818548", "{\"term\":\"infection\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04818548\", \"04858652\", \"06293036\", \"07375247\", \"13519607\", \"13519869\", \"14198031\"]}");
	add("04818728", "{\"term\":\"illegitimacy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04818728\", \"13976433\"]}");
	add("04818880", "{\"term\":\"illicitness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04818880\"]}");
	add("04819019", "{\"term\":\"shadiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04819019\", \"14008098\"]}");
	add("04819244", "{\"term\":\"civilisation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04819244\", \"08128749\", \"08304765\", \"13470143\"]}");
	add("04819244", "{\"term\":\"civilization\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04819244\", \"08304765\", \"13470143\", \"08128749\"]}");
	add("04819244", "{\"term\":\"refinement\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04819244\", \"06618544\", \"13569308\", \"07372279\", \"14483408\"]}");
	add("04819517", "{\"term\":\"elegance\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04819885\", \"04819517\"]}");
	add("04819885", "{\"term\":\"elegance\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04819885\", \"04819517\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }