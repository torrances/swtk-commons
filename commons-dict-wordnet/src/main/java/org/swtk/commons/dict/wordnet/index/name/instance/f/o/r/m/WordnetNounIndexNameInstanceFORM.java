package org.swtk.commons.dict.wordnet.index.name.instance.f.o.r.m;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceFORM {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"form\", \"synsetCount\":16, \"upperType\":\"NOUN\", \"ids\":[\"03389381\", \"03723460\", \"05207938\", \"08255384\", \"14503649\", \"04937655\", \"07106984\", \"08128123\", \"06485234\", \"04684871\", \"00028005\", \"05224424\", \"05071206\", \"05939522\", \"05847533\", \"06301417\"]}");
	add("{\"term\":\"formal\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03206322\", \"07463485\"]}");
	add("{\"term\":\"formaldehyde\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14897347\"]}");
	add("{\"term\":\"formalin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14872649\"]}");
	add("{\"term\":\"formalisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01011579\"]}");
	add("{\"term\":\"formalism\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00412730\", \"05980488\", \"05970734\"]}");
	add("{\"term\":\"formalities\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07469617\"]}");
	add("{\"term\":\"formality\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01206545\", \"04918597\", \"07469617\"]}");
	add("{\"term\":\"formalization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01011579\"]}");
	add("{\"term\":\"formalness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04918597\"]}");
	add("{\"term\":\"formalwear\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03389737\"]}");
	add("{\"term\":\"format\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04684742\", \"06649331\"]}");
	add("{\"term\":\"formation\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00929331\", \"13504691\", \"03389963\", \"09310874\", \"00237945\", \"00927021\", \"08443418\"]}");
	add("{\"term\":\"formative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06317470\"]}");
	add("{\"term\":\"formatting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06649331\"]}");
	add("{\"term\":\"former\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13868553\"]}");
	add("{\"term\":\"formica\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02223892\", \"03390141\"]}");
	add("{\"term\":\"formicariidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01555597\"]}");
	add("{\"term\":\"formicarius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01556021\"]}");
	add("{\"term\":\"formicary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09221979\"]}");
	add("{\"term\":\"formication\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14348415\"]}");
	add("{\"term\":\"formicidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02221886\"]}");
	add("{\"term\":\"formidability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04718142\"]}");
	add("{\"term\":\"formol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14872649\"]}");
	add("{\"term\":\"formosa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08748187\"]}");
	add("{\"term\":\"formosan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06953463\"]}");
	add("{\"term\":\"formula\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05855459\", \"07861063\", \"05675457\", \"06829793\", \"06744762\", \"06801642\", \"06744551\"]}");
	add("{\"term\":\"formulary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06423526\"]}");
	add("{\"term\":\"formulation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07083988\", \"00942658\", \"14897792\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }