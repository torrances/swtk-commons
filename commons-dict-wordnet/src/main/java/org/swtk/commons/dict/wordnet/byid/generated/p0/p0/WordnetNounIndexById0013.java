package org.swtk.commons.dict.wordnet.byid.generated.p0.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexById0013 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("00130137", "{\"term\":\"chop\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00130137\", \"00567926\", \"05553931\", \"07669591\", \"11548218\"]}");
	add("00130137", "{\"term\":\"chopper\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03045617\", \"03517291\", \"05290997\", \"00130137\"]}");
	add("00130255", "{\"term\":\"roller\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"01817396\", \"01829005\", \"03154898\", \"04108591\", \"04108795\", \"07364132\", \"00130255\"]}");
	add("00130347", "{\"term\":\"out\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00130347\"]}");
	add("00130563", "{\"term\":\"force\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00130563\", \"04816894\", \"08224784\", \"10480990\", \"00967515\", \"08215338\", \"08224937\", \"05042508\", \"11479041\", \"05201846\"]}");
	add("00130563", "{\"term\":\"force-out\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00130563\"]}");
	add("00130563", "{\"term\":\"force out\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00130563\"]}");
	add("00130563", "{\"term\":\"force play\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00130563\"]}");
	add("00130913", "{\"term\":\"putout\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00130913\"]}");
	add("00131167", "{\"term\":\"strikeout\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00131167\"]}");
	add("00131332", "{\"term\":\"whiff\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00131332\", \"02664869\", \"11518288\"]}");
	add("00131493", "{\"term\":\"fielder\u0027s choice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00131493\"]}");
	add("00131666", "{\"term\":\"sacrifice\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00131666\", \"00228462\", \"13349095\", \"07355495\", \"00206740\"]}");
	add("00131807", "{\"term\":\"sacrifice fly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00131807\"]}");
	add("00131910", "{\"term\":\"base hit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00131910\"]}");
	add("00131910", "{\"term\":\"safety\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00189469\", \"03092620\", \"00131910\", \"03469399\", \"08661508\", \"14562074\"]}");
	add("00132167", "{\"term\":\"daisy cutter\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00132167\", \"03395173\"]}");
	add("00132305", "{\"term\":\"header\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00120713\", \"00132305\", \"03507921\", \"03508041\", \"03508241\", \"03508377\", \"06355341\"]}");
	add("00132428", "{\"term\":\"line drive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132428\"]}");
	add("00132428", "{\"term\":\"liner\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03678353\", \"03678596\", \"03679093\", \"00132428\"]}");
	add("00132611", "{\"term\":\"scorcher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00132611\", \"11487233\"]}");
	add("00132611", "{\"term\":\"screamer\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00132611\", \"01863138\", \"06357143\", \"10553540\"]}");
	add("00132697", "{\"term\":\"line-drive single\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132697\"]}");
	add("00132697", "{\"term\":\"line single\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132697\"]}");
	add("00132811", "{\"term\":\"line-drive double\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132811\"]}");
	add("00132811", "{\"term\":\"line double\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132811\"]}");
	add("00132925", "{\"term\":\"line-drive triple\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132925\"]}");
	add("00132925", "{\"term\":\"line triple\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00132925\"]}");
	add("00133039", "{\"term\":\"plunk\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00133039\", \"07404907\"]}");
	add("00133039", "{\"term\":\"plunker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133039\"]}");
	add("00133175", "{\"term\":\"home run\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00065609\", \"00133175\"]}");
	add("00133175", "{\"term\":\"homer\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01817562\", \"11077543\", \"13638327\", \"11077376\", \"00133175\"]}");
	add("00133317", "{\"term\":\"solo blast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133317\"]}");
	add("00133317", "{\"term\":\"solo homer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133317\"]}");
	add("00133421", "{\"term\":\"bingle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133421\"]}");
	add("00133421", "{\"term\":\"single\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13764713\", \"00133421\"]}");
	add("00133576", "{\"term\":\"double\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00805055\", \"05868784\", \"10046971\", \"10686285\", \"00133576\"]}");
	add("00133576", "{\"term\":\"two-bagger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133576\"]}");
	add("00133576", "{\"term\":\"two-base hit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133576\"]}");
	add("00133576", "{\"term\":\"two-baser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133576\"]}");
	add("00133802", "{\"term\":\"three-bagger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133802\"]}");
	add("00133802", "{\"term\":\"three-base hit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133802\"]}");
	add("00133802", "{\"term\":\"triple\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05868961\", \"08002640\", \"00133802\"]}");
	add("00133980", "{\"term\":\"backhander\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00133980\"]}");
	add("00134054", "{\"term\":\"clip\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00134054\", \"00360440\", \"03048151\", \"03047943\", \"07324217\", \"02976476\"]}");
	add("00134158", "{\"term\":\"belt\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00134158\", \"02831299\", \"09475783\", \"07424807\", \"08526807\", \"02830790\", \"02831067\"]}");
	add("00134158", "{\"term\":\"knock\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00134158\", \"07351599\", \"07424807\", \"05742326\", \"07400970\"]}");
	add("00134158", "{\"term\":\"rap\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00134158\", \"07078095\", \"07156245\", \"07403587\", \"07424621\", \"06726691\"]}");
	add("00134158", "{\"term\":\"whack\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00134158\", \"07414429\"]}");
	add("00134158", "{\"term\":\"whang\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134158\"]}");
	add("00134387", "{\"term\":\"thwack\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134387\"]}");
	add("00134488", "{\"term\":\"slap\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00134488\", \"07425345\"]}");
	add("00134488", "{\"term\":\"smack\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00134488\", \"00139419\", \"02840630\", \"04251975\", \"05723811\", \"07425345\"]}");
	add("00134488", "{\"term\":\"smacking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134488\"]}");
	add("00134695", "{\"term\":\"smacker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00134695\", \"00139554\"]}");
	add("00134801", "{\"term\":\"knockdown\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134801\"]}");
	add("00134919", "{\"term\":\"kayo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134919\"]}");
	add("00134919", "{\"term\":\"knockout\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00134919\", \"10633512\"]}");
	add("00134919", "{\"term\":\"ko\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00134919\"]}");
	add("00135066", "{\"term\":\"technical knockout\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00135066\"]}");
	add("00135066", "{\"term\":\"tko\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00135066\"]}");
	add("00135211", "{\"term\":\"swat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00135211\"]}");
	add("00135292", "{\"term\":\"spank\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00135292\"]}");
	add("00135394", "{\"term\":\"lash\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00135394\", \"03649221\", \"05322469\"]}");
	add("00135394", "{\"term\":\"whip\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00135394\", \"05030068\", \"07627976\", \"10796434\", \"04585055\"]}");
	add("00135394", "{\"term\":\"whiplash\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00135394\", \"14321922\"]}");
	add("00135600", "{\"term\":\"biff\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00135600\"]}");
	add("00135600", "{\"term\":\"clout\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00135600\", \"03056902\", \"05164657\", \"07276946\"]}");
	add("00135600", "{\"term\":\"lick\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00135600\", \"00151411\", \"09443567\"]}");
	add("00135600", "{\"term\":\"poke\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00135600\", \"00335761\", \"04129919\", \"10012790\", \"11876022\"]}");
	add("00135600", "{\"term\":\"punch\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04029643\", \"07946794\", \"00135600\"]}");
	add("00135600", "{\"term\":\"slug\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00135600\", \"01948326\", \"04512230\", \"07938847\", \"10632447\", \"13411961\", \"13741207\", \"02919696\"]}");
	add("00135968", "{\"term\":\"box\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00135968\", \"02887252\", \"02887691\", \"02887848\", \"12766866\", \"13906151\", \"14432355\", \"13787764\", \"02887466\", \"02886585\"]}");
	add("00136131", "{\"term\":\"dig\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00136131\", \"00943790\", \"04700905\", \"06780713\", \"08567651\"]}");
	add("00136131", "{\"term\":\"jab\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00136131\", \"00136772\", \"00335761\"]}");
	add("00136324", "{\"term\":\"counter\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00136324\", \"03121593\", \"03122071\", \"07214582\", \"09989021\", \"02915411\", \"03121418\", \"03121850\", \"03121181\"]}");
	add("00136324", "{\"term\":\"counterpunch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136324\"]}");
	add("00136324", "{\"term\":\"parry\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00136324\", \"01176985\"]}");
	add("00136457", "{\"term\":\"haymaker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00136457\", \"03505843\"]}");
	add("00136457", "{\"term\":\"knockout punch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136457\"]}");
	add("00136457", "{\"term\":\"ko punch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136457\"]}");
	add("00136457", "{\"term\":\"sunday punch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136457\"]}");
	add("00136619", "{\"term\":\"hook\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00112178\", \"00136619\", \"00573322\", \"03537522\", \"03537852\", \"05703197\", \"13892186\", \"03538099\"]}");
	add("00136772", "{\"term\":\"jab\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00136131\", \"00136772\", \"00335761\"]}");
	add("00136868", "{\"term\":\"rabbit punch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136868\"]}");
	add("00136972", "{\"term\":\"sucker punch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00136972\"]}");
	add("00137050", "{\"term\":\"roundhouse\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00137050\", \"04121522\"]}");
	add("00137149", "{\"term\":\"boot\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00137149\", \"00423264\", \"02876605\", \"02876762\", \"07543858\", \"03701391\", \"02876113\"]}");
	add("00137149", "{\"term\":\"kick\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00337631\", \"05835833\", \"07224625\", \"07365354\", \"07543858\", \"00137149\"]}");
	add("00137149", "{\"term\":\"kicking\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00137149\", \"00337631\"]}");
	add("00137511", "{\"term\":\"goal-kick\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00137511\", \"00137696\"]}");
	add("00137696", "{\"term\":\"goal-kick\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00137511\", \"00137696\"]}");
	add("00137804", "{\"term\":\"punt\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00137804\", \"04031377\", \"13716762\"]}");
	add("00137804", "{\"term\":\"punting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00137804\"]}");
	add("00138099", "{\"term\":\"place-kicking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00138099\"]}");
	add("00138099", "{\"term\":\"place kick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00138099\"]}");
	add("00138354", "{\"term\":\"free kick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00138354\"]}");
	add("00138529", "{\"term\":\"corner kick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00138529\"]}");
	add("00138697", "{\"term\":\"dropkick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00138697\"]}");
	add("00138898", "{\"term\":\"kiss\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00138898\", \"07622373\", \"07652478\", \"00139041\"]}");
	add("00139041", "{\"term\":\"buss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139041\"]}");
	add("00139041", "{\"term\":\"kiss\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00138898\", \"07622373\", \"07652478\", \"00139041\"]}");
	add("00139041", "{\"term\":\"osculation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00139041\", \"14443293\"]}");
	add("00139261", "{\"term\":\"laying on\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139261\"]}");
	add("00139419", "{\"term\":\"smack\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00134488\", \"00139419\", \"02840630\", \"04251975\", \"05723811\", \"07425345\"]}");
	add("00139419", "{\"term\":\"smooch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139419\"]}");
	add("00139554", "{\"term\":\"smacker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00134695\", \"00139554\"]}");
	add("00139619", "{\"term\":\"deep kiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139619\"]}");
	add("00139619", "{\"term\":\"french kiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139619\"]}");
	add("00139619", "{\"term\":\"soul kiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00139619\"]}");
	add("00139776", "{\"term\":\"catch\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00089545\", \"00139776\", \"00459665\", \"02986054\", \"02986245\", \"07081800\", \"09261049\", \"09920434\", \"13777962\", \"05172200\"]}");
	add("00139776", "{\"term\":\"grab\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00139776\", \"03455825\"]}");
	add("00139776", "{\"term\":\"snap\", \"synsetCount\":13, \"upperType\":\"NOUN\", \"ids\":[\"00121763\", \"00345525\", \"00576402\", \"04255319\", \"04255717\", \"05027524\", \"07382308\", \"07396023\", \"07408836\", \"07651993\", \"07744029\", \"15324340\", \"00139776\"]}");
	add("00139776", "{\"term\":\"snatch\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00139776\", \"00628436\", \"00777199\", \"05529165\", \"07022158\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }