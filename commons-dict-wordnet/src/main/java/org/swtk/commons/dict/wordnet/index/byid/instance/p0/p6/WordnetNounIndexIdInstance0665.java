package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0665 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06650202", "{\"term\":\"gen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06650202\"]}");
	add("06650349", "{\"term\":\"database\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06650349\"]}");
	add("06650498", "{\"term\":\"relational database\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06650498\"]}");
	add("06650779", "{\"term\":\"medical literature analysis and retrieval system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06650779\"]}");
	add("06650779", "{\"term\":\"medlars\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06650779\"]}");
	add("06651052", "{\"term\":\"object-oriented database\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651052\"]}");
	add("06651264", "{\"term\":\"subdata base\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651264\"]}");
	add("06651393", "{\"term\":\"lexical database\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651393\"]}");
	add("06651548", "{\"term\":\"electronic dictionary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651548\"]}");
	add("06651548", "{\"term\":\"machine readable dictionary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651548\"]}");
	add("06651548", "{\"term\":\"mrd\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651548\"]}");
	add("06651729", "{\"term\":\"princeton wordnet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651729\"]}");
	add("06651729", "{\"term\":\"wordnet\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06651729\", \"06652077\"]}");
	add("06651972", "{\"term\":\"wordnet3.1\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06651972\"]}");
	add("06652077", "{\"term\":\"wordnet\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06651729\", \"06652077\"]}");
	add("06652212", "{\"term\":\"basics\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05879984\", \"06652212\"]}");
	add("06652212", "{\"term\":\"rudiments\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05881364\", \"06652212\"]}");
	add("06652323", "{\"term\":\"index\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05575014\", \"06503777\", \"06825275\", \"06652323\", \"13873264\"]}");
	add("06652323", "{\"term\":\"index number\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06652323\"]}");
	add("06652323", "{\"term\":\"indicant\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06652323\", \"06810027\"]}");
	add("06652323", "{\"term\":\"indicator\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"14941359\", \"03573297\", \"07277247\", \"06652323\"]}");
	add("06652665", "{\"term\":\"bmi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06652665\"]}");
	add("06652665", "{\"term\":\"body mass index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06652665\"]}");
	add("06652966", "{\"term\":\"business index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06652966\"]}");
	add("06653182", "{\"term\":\"dow-jones industrial average\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653182\"]}");
	add("06653182", "{\"term\":\"dow jones\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653182\"]}");
	add("06653497", "{\"term\":\"standard and poor\u0027s\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653497\"]}");
	add("06653497", "{\"term\":\"standard and poor\u0027s index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653497\"]}");
	add("06653626", "{\"term\":\"leading indicator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653626\"]}");
	add("06653830", "{\"term\":\"price index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653830\"]}");
	add("06653830", "{\"term\":\"price level\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06653830\"]}");
	add("06654072", "{\"term\":\"retail price index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654072\"]}");
	add("06654173", "{\"term\":\"producer price index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654173\"]}");
	add("06654173", "{\"term\":\"wholesale price index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654173\"]}");
	add("06654303", "{\"term\":\"consumer price index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654303\"]}");
	add("06654303", "{\"term\":\"cost-of-living index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654303\"]}");
	add("06654303", "{\"term\":\"cpi\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06486643\", \"06654303\"]}");
	add("06654467", "{\"term\":\"short account\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06654467\", \"13952369\"]}");
	add("06654573", "{\"term\":\"stock index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654573\"]}");
	add("06654573", "{\"term\":\"stock market index\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654573\"]}");
	add("06654787", "{\"term\":\"intelligence\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00983916\", \"06654787\", \"06655303\", \"08356381\", \"05625389\"]}");
	add("06654787", "{\"term\":\"news\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05200165\", \"06654987\", \"06632357\", \"06693922\", \"06654787\"]}");
	add("06654787", "{\"term\":\"tidings\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06654787\"]}");
	add("06654787", "{\"term\":\"word\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"06443410\", \"06686933\", \"09560255\", \"13648798\", \"07241961\", \"07155367\", \"07183893\", \"06654787\", \"06750911\", \"06297048\"]}");
	add("06654987", "{\"term\":\"news\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05200165\", \"06654987\", \"06632357\", \"06693922\", \"06654787\"]}");
	add("06655149", "{\"term\":\"nuts and bolts\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06655149\"]}");
	add("06655303", "{\"term\":\"intelligence\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00983916\", \"06654787\", \"06655303\", \"08356381\", \"05625389\"]}");
	add("06655303", "{\"term\":\"intelligence information\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06655303\"]}");
	add("06655530", "{\"term\":\"military intelligence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06655530\", \"08356633\"]}");
	add("06655751", "{\"term\":\"good word\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06655751\", \"06707285\"]}");
	add("06655816", "{\"term\":\"latest\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06655816\"]}");
	add("06655934", "{\"term\":\"update\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00035244\", \"06655934\"]}");
	add("06656171", "{\"term\":\"evidence\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06746688\", \"06656171\", \"05832256\"]}");
	add("06656526", "{\"term\":\"clew\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06656526\", \"07977993\"]}");
	add("06656526", "{\"term\":\"clue\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06656526\", \"06815643\"]}");
	add("06656526", "{\"term\":\"cue\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03150188\", \"05837537\", \"06656526\", \"07024325\"]}");
	add("06656646", "{\"term\":\"dna fingerprint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06656646\"]}");
	add("06656646", "{\"term\":\"genetic fingerprint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06656646\"]}");
	add("06656868", "{\"term\":\"automatic face recognition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06656868\"]}");
	add("06656868", "{\"term\":\"face recognition\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05719153\", \"06656868\"]}");
	add("06656868", "{\"term\":\"facial recognition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06656868\"]}");
	add("06657156", "{\"term\":\"fingerprint\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04702328\", \"06899538\", \"06657156\"]}");
	add("06657421", "{\"term\":\"finger scan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06657421\"]}");
	add("06657421", "{\"term\":\"finger scanning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06657421\"]}");
	add("06657586", "{\"term\":\"loop\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"00170632\", \"03052868\", \"03694673\", \"05738669\", \"06585033\", \"06657586\", \"08258575\", \"13525376\", \"13898210\", \"03137089\"]}");
	add("06657679", "{\"term\":\"thumbprint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06657679\"]}");
	add("06657802", "{\"term\":\"footmark\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06657802\"]}");
	add("06657802", "{\"term\":\"footprint\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05136319\", \"06659617\", \"06657802\"]}");
	add("06657802", "{\"term\":\"step\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00534959\", \"04322323\", \"06657802\", \"06872106\", \"07398423\", \"13784719\", \"14453034\", \"04322052\", \"00286401\", \"13779389\", \"00175261\"]}");
	add("06658029", "{\"term\":\"footprint evidence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06658029\"]}");
	add("06658221", "{\"term\":\"iris scanning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06658221\"]}");
	add("06658386", "{\"term\":\"signature recognition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06658386\"]}");
	add("06658594", "{\"term\":\"retinal scanning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06658594\"]}");
	add("06658785", "{\"term\":\"voiceprint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06658785\"]}");
	add("06659006", "{\"term\":\"mark\", \"synsetCount\":15, \"upperType\":\"NOUN\", \"ids\":[\"00065609\", \"04688744\", \"04701248\", \"06453473\", \"06659006\", \"06830640\", \"09940867\", \"11176933\", \"13710138\", \"06807523\", \"04683421\", \"06811608\", \"07276776\", \"07284884\", \"05745098\"]}");
	add("06659006", "{\"term\":\"sign\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"06824483\", \"07290723\", \"06889194\", \"07300719\", \"13878771\", \"14325305\", \"08703415\", \"04224949\", \"06804229\", \"06806088\", \"06659006\"]}");
	add("06659294", "{\"term\":\"token\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03615483\", \"04455632\", \"06659294\", \"06808603\"]}");
	add("06659391", "{\"term\":\"shadow\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"10604811\", \"10708600\", \"13982928\", \"05162732\", \"06659391\", \"07537657\", \"05906160\", \"08663881\", \"14008429\"]}");
	add("06659391", "{\"term\":\"tincture\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04446256\", \"04966407\", \"06659391\", \"15010563\"]}");
	add("06659391", "{\"term\":\"trace\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06659799\", \"04469642\", \"04470508\", \"07178814\", \"06659391\", \"13795501\"]}");
	add("06659391", "{\"term\":\"vestige\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06659391\"]}");
	add("06659617", "{\"term\":\"footprint\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05136319\", \"06659617\", \"06657802\"]}");
	add("06659799", "{\"term\":\"trace\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06659799\", \"04469642\", \"04470508\", \"07178814\", \"06659391\", \"13795501\"]}");
	add("06659969", "{\"term\":\"record\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"06502164\", \"13424816\", \"00063834\", \"06649049\", \"00048486\", \"13618229\", \"03930191\", \"06659969\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }