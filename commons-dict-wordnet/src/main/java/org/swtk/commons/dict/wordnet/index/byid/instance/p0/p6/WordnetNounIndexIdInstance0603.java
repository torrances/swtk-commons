package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0603 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06030086", "{\"term\":\"statistical method\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030086\"]}");
	add("06030086", "{\"term\":\"statistical procedure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030086\"]}");
	add("06030362", "{\"term\":\"least squares\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030362\"]}");
	add("06030362", "{\"term\":\"method of least squares\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030362\"]}");
	add("06030596", "{\"term\":\"multivariate analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030596\"]}");
	add("06030848", "{\"term\":\"statistic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06030848\"]}");
	add("06031110", "{\"term\":\"average\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05865563\", \"13842867\", \"06031110\"]}");
	add("06031110", "{\"term\":\"norm\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06031110\", \"13876685\"]}");
	add("06031425", "{\"term\":\"demographic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06031425\"]}");
	add("06031640", "{\"term\":\"deviation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00351206\", \"00738697\", \"04810025\", \"06031640\", \"07380889\"]}");
	add("06031858", "{\"term\":\"moment\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06031858\", \"11503385\", \"05178101\", \"15144992\", \"15271664\", \"15269461\"]}");
	add("06032076", "{\"term\":\"distribution free statistic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032076\"]}");
	add("06032076", "{\"term\":\"nonparametric statistic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032076\"]}");
	add("06032371", "{\"term\":\"parametric statistic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032371\"]}");
	add("06032592", "{\"term\":\"age norm\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032592\"]}");
	add("06032718", "{\"term\":\"outlier\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06032718\", \"10407535\"]}");
	add("06032825", "{\"term\":\"mean deviation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032825\"]}");
	add("06032825", "{\"term\":\"mean deviation from the mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06032825\"]}");
	add("06033024", "{\"term\":\"modal value\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033024\"]}");
	add("06033024", "{\"term\":\"mode\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06033024\", \"06874680\", \"13823636\", \"13824846\", \"13946962\", \"04936080\"]}");
	add("06033170", "{\"term\":\"median\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033170\"]}");
	add("06033170", "{\"term\":\"median value\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033170\"]}");
	add("06033377", "{\"term\":\"mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033377\"]}");
	add("06033377", "{\"term\":\"mean value\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033377\"]}");
	add("06033638", "{\"term\":\"arithmetic mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033638\"]}");
	add("06033638", "{\"term\":\"expectation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06033638\", \"07526162\", \"14509706\", \"05953807\"]}");
	add("06033638", "{\"term\":\"expected value\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033638\"]}");
	add("06033638", "{\"term\":\"first moment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033638\"]}");
	add("06033839", "{\"term\":\"geometric mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033839\"]}");
	add("06033984", "{\"term\":\"harmonic mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06033984\"]}");
	add("06034169", "{\"term\":\"second moment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06034169\"]}");
	add("06034344", "{\"term\":\"variance\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00195818\", \"01144471\", \"04742473\", \"04756982\", \"06034344\", \"07196502\", \"07381227\"]}");
	add("06034580", "{\"term\":\"standard deviation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06034580\"]}");
	add("06034695", "{\"term\":\"covariance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06034695\"]}");
	add("06034929", "{\"term\":\"frequency distribution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06034929\"]}");
	add("06035097", "{\"term\":\"gaussian distribution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035097\"]}");
	add("06035097", "{\"term\":\"normal distribution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035097\"]}");
	add("06035262", "{\"term\":\"poisson distribution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035262\"]}");
	add("06035496", "{\"term\":\"bell-shaped curve\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035496\"]}");
	add("06035496", "{\"term\":\"gaussian curve\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035496\"]}");
	add("06035496", "{\"term\":\"gaussian shape\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035496\"]}");
	add("06035496", "{\"term\":\"normal curve\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035496\"]}");
	add("06035684", "{\"term\":\"population\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01260649\", \"13802016\", \"06035684\", \"08195659\", \"08196797\"]}");
	add("06035684", "{\"term\":\"universe\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05822288\", \"06035684\", \"09489410\"]}");
	add("06035916", "{\"term\":\"subpopulation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06035916\"]}");
	add("06036061", "{\"term\":\"sample\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09444303\", \"06036061\", \"05830135\"]}");
	add("06036061", "{\"term\":\"sample distribution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036061\"]}");
	add("06036061", "{\"term\":\"sampling\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01006717\", \"06036061\", \"00162708\"]}");
	add("06036311", "{\"term\":\"random sample\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05830867\", \"06036311\"]}");
	add("06036477", "{\"term\":\"proportional sample\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036477\"]}");
	add("06036477", "{\"term\":\"representative sample\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036477\"]}");
	add("06036477", "{\"term\":\"stratified sample\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036477\"]}");
	add("06036690", "{\"term\":\"stratum\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06036690\", \"06257026\", \"07990472\", \"08674880\"]}");
	add("06036794", "{\"term\":\"regression\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00236075\", \"06036794\", \"13570134\", \"14526956\"]}");
	add("06036794", "{\"term\":\"regression toward the mean\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036794\"]}");
	add("06036794", "{\"term\":\"simple regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036794\"]}");
	add("06036794", "{\"term\":\"statistical regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06036794\"]}");
	add("06037143", "{\"term\":\"multiple correlation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037143\"]}");
	add("06037143", "{\"term\":\"multiple regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037143\"]}");
	add("06037373", "{\"term\":\"multicollinearity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037373\"]}");
	add("06037551", "{\"term\":\"regression analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037551\"]}");
	add("06037790", "{\"term\":\"regression equation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037790\"]}");
	add("06037790", "{\"term\":\"regression of y on x\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06037790\"]}");
	add("06038096", "{\"term\":\"regression coefficient\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038096\"]}");
	add("06038434", "{\"term\":\"linear regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038434\"]}");
	add("06038434", "{\"term\":\"rectilinear regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038434\"]}");
	add("06038648", "{\"term\":\"curvilinear regression\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038648\"]}");
	add("06038836", "{\"term\":\"regression curve\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038836\"]}");
	add("06038836", "{\"term\":\"regression line\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06038836\"]}");
	add("06039077", "{\"term\":\"time series\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06039077\"]}");
	add("06039206", "{\"term\":\"vital statistics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06039206\"]}");
	add("06039360", "{\"term\":\"correlational analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06039360\"]}");
	add("06039579", "{\"term\":\"correlation matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06039579\"]}");
	add("06039726", "{\"term\":\"factor analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06039726\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }