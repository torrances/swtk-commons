package org.swtk.commons.dict.wordnet.index.name.instance.d.e.c.a;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDECA {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"decade\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13768652\", \"15229779\"]}");
	add("{\"term\":\"decadence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14464341\"]}");
	add("{\"term\":\"decadency\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14464341\"]}");
	add("{\"term\":\"decadent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10017477\"]}");
	add("{\"term\":\"decadron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14777987\"]}");
	add("{\"term\":\"decaf\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07936027\"]}");
	add("{\"term\":\"decagon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13905370\"]}");
	add("{\"term\":\"decagram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13746460\"]}");
	add("{\"term\":\"decahedron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13938723\"]}");
	add("{\"term\":\"decal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03172130\"]}");
	add("{\"term\":\"decalcification\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13477425\"]}");
	add("{\"term\":\"decalcomania\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00937268\", \"03172130\"]}");
	add("{\"term\":\"decalescence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11464467\"]}");
	add("{\"term\":\"decaliter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13645904\"]}");
	add("{\"term\":\"decalitre\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13645904\"]}");
	add("{\"term\":\"decalogue\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07184621\"]}");
	add("{\"term\":\"decameter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13681341\"]}");
	add("{\"term\":\"decametre\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13681341\"]}");
	add("{\"term\":\"decampment\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00056047\", \"00056453\"]}");
	add("{\"term\":\"decantation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00937423\"]}");
	add("{\"term\":\"decanter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02964339\"]}");
	add("{\"term\":\"decapitation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00229048\", \"01167714\"]}");
	add("{\"term\":\"decapod\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01973735\", \"01978787\"]}");
	add("{\"term\":\"decapoda\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01973507\", \"01978521\"]}");
	add("{\"term\":\"decapterus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02583920\"]}");
	add("{\"term\":\"decarboxylase\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14852985\"]}");
	add("{\"term\":\"decarboxylation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13477540\"]}");
	add("{\"term\":\"decasyllable\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07111235\"]}");
	add("{\"term\":\"decathlon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07471807\"]}");
	add("{\"term\":\"decatur\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09076573\", \"09106197\", \"10946524\"]}");
	add("{\"term\":\"decay\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"13478072\", \"14584204\", \"11464739\", \"13477740\", \"13477888\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }