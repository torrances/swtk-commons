package org.swtk.commons.dict.wordnet.index.name.instance.r.e.c.a;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceRECA {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"recalcitrance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04914752\"]}");
	add("{\"term\":\"recalcitrancy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04914752\"]}");
	add("{\"term\":\"recalculation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00871779\"]}");
	add("{\"term\":\"recall\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01261399\", \"05769556\", \"06817246\", \"07205500\", \"07294777\"]}");
	add("{\"term\":\"recantation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07220756\"]}");
	add("{\"term\":\"recap\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04091054\", \"06481048\"]}");
	add("{\"term\":\"recapitulation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00942033\", \"06481048\", \"07052984\", \"13552855\"]}");
	add("{\"term\":\"recapture\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00097789\", \"00097942\"]}");
	add("{\"term\":\"recasting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06440815\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }