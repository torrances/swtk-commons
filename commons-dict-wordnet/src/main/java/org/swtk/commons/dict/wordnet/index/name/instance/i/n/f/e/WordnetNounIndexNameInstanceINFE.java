package org.swtk.commons.dict.wordnet.index.name.instance.i.n.f.e;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceINFE {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"infeasibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05160606\"]}");
	add("{\"term\":\"infection\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04818548\", \"04858652\", \"06293036\", \"07375247\", \"13519607\", \"13519869\", \"14198031\"]}");
	add("{\"term\":\"infelicity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04729327\"]}");
	add("{\"term\":\"inference\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05782611\"]}");
	add("{\"term\":\"inferior\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06833078\", \"10224850\"]}");
	add("{\"term\":\"inferiority\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05172702\", \"04737838\", \"13974662\"]}");
	add("{\"term\":\"infernal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10224963\"]}");
	add("{\"term\":\"inferno\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05637465\", \"07318315\", \"08600365\"]}");
	add("{\"term\":\"infertility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14068989\"]}");
	add("{\"term\":\"infestation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08012854\", \"14476082\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }