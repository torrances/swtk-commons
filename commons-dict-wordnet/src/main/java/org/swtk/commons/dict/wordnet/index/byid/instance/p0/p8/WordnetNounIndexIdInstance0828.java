package org.swtk.commons.dict.wordnet.index.byid.instance.p0.p8;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0828 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("08280034", "{\"term\":\"gop\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280034\"]}");
	add("08280034", "{\"term\":\"republican party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280034\"]}");
	add("08280224", "{\"term\":\"social democratic party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280224\"]}");
	add("08280481", "{\"term\":\"socialist labor party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280481\"]}");
	add("08280654", "{\"term\":\"socialist party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280654\"]}");
	add("08280791", "{\"term\":\"dixiecrats\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280791\"]}");
	add("08280791", "{\"term\":\"states\u0027 rights democratic party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08280791\"]}");
	add("08281031", "{\"term\":\"war party\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08281031\", \"08282833\"]}");
	add("08281124", "{\"term\":\"whig party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08281124\"]}");
	add("08281362", "{\"term\":\"third party\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08281362\", \"10728780\"]}");
	add("08281504", "{\"term\":\"machine\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"02961779\", \"08281504\", \"03706297\", \"08281680\", \"10298363\", \"03705309\"]}");
	add("08281504", "{\"term\":\"political machine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08281504\"]}");
	add("08281680", "{\"term\":\"machine\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"02961779\", \"08281504\", \"03706297\", \"08281680\", \"10298363\", \"03705309\"]}");
	add("08281818", "{\"term\":\"company\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"08094547\", \"08235980\", \"08281818\", \"08201779\", \"09907302\", \"08203951\", \"13952621\", \"08231193\", \"08074934\"]}");
	add("08281818", "{\"term\":\"party\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"10422569\", \"07462241\", \"08281818\", \"08269523\", \"08273889\"]}");
	add("08282173", "{\"term\":\"fatigue party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282173\"]}");
	add("08282268", "{\"term\":\"landing party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282268\"]}");
	add("08282390", "{\"term\":\"party to the action\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282390\"]}");
	add("08282390", "{\"term\":\"party to the transaction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282390\"]}");
	add("08282535", "{\"term\":\"rescue party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282535\"]}");
	add("08282613", "{\"term\":\"search party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282613\"]}");
	add("08282711", "{\"term\":\"stretcher party\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282711\"]}");
	add("08282833", "{\"term\":\"war party\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08281031\", \"08282833\"]}");
	add("08282991", "{\"term\":\"professional organisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282991\"]}");
	add("08282991", "{\"term\":\"professional organization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08282991\"]}");
	add("08283156", "{\"term\":\"table\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"07580824\", \"08497146\", \"09374802\", \"04387051\", \"04386330\", \"08283156\"]}");
	add("08283156", "{\"term\":\"tabular array\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08283156\"]}");
	add("08283463", "{\"term\":\"actuarial table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08283463\"]}");
	add("08283463", "{\"term\":\"statistical table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08283463\"]}");
	add("08283590", "{\"term\":\"mortality table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08283590\"]}");
	add("08283770", "{\"term\":\"calendar\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08283770\", \"06499232\", \"15198526\"]}");
	add("08283929", "{\"term\":\"perpetual calendar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08283929\"]}");
	add("08284118", "{\"term\":\"file allocation table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08284118\"]}");
	add("08284367", "{\"term\":\"periodic table\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08284367\"]}");
	add("08284561", "{\"term\":\"matrix\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"03736146\", \"05589841\", \"05589955\", \"09371952\", \"14973365\", \"08284561\"]}");
	add("08284877", "{\"term\":\"dot matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08284877\"]}");
	add("08285006", "{\"term\":\"square matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08285006\"]}");
	add("08285242", "{\"term\":\"diagonal\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06857953\", \"08285242\", \"08287338\", \"13927170\", \"13927331\"]}");
	add("08285557", "{\"term\":\"main diagonal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08285557\"]}");
	add("08285557", "{\"term\":\"principal diagonal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08285557\"]}");
	add("08285728", "{\"term\":\"secondary diagonal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08285728\"]}");
	add("08285883", "{\"term\":\"diagonal matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08285883\"]}");
	add("08286035", "{\"term\":\"scalar matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286035\"]}");
	add("08286178", "{\"term\":\"identity matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286178\"]}");
	add("08286178", "{\"term\":\"unit matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286178\"]}");
	add("08286317", "{\"term\":\"determinant\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08286317\", \"15062231\", \"05700384\"]}");
	add("08286427", "{\"term\":\"latin square\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286427\"]}");
	add("08286628", "{\"term\":\"magic square\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286628\"]}");
	add("08286860", "{\"term\":\"nonsingular matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286860\"]}");
	add("08286988", "{\"term\":\"real matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08286988\"]}");
	add("08287090", "{\"term\":\"singular matrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08287090\"]}");
	add("08287211", "{\"term\":\"transpose\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08287211\"]}");
	add("08287338", "{\"term\":\"diagonal\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06857953\", \"08285242\", \"08287338\", \"13927170\", \"13927331\"]}");
	add("08287583", "{\"term\":\"oort cloud\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08287583\"]}");
	add("08287859", "{\"term\":\"galaxy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08287963\", \"12271795\", \"08287859\"]}");
	add("08287963", "{\"term\":\"extragalactic nebula\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08287963\"]}");
	add("08287963", "{\"term\":\"galaxy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08287963\", \"12271795\", \"08287859\"]}");
	add("08288378", "{\"term\":\"spiral galaxy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08288378\"]}");
	add("08288378", "{\"term\":\"spiral nebula\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08288378\"]}");
	add("08288577", "{\"term\":\"andromeda galaxy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08288577\"]}");
	add("08288722", "{\"term\":\"legion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"08199880\", \"08288722\", \"08289169\", \"08200720\"]}");
	add("08288862", "{\"term\":\"foreign legion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08288862\"]}");
	add("08289007", "{\"term\":\"french foreign legion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08289007\"]}");
	add("08289169", "{\"term\":\"legion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"08199880\", \"08288722\", \"08289169\", \"08200720\"]}");
	add("08289273", "{\"term\":\"echelon\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03268385\", \"08289273\", \"13969830\"]}");
	add("08289381", "{\"term\":\"phalanx\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08289381\", \"08289485\", \"05286083\"]}");
	add("08289485", "{\"term\":\"phalanx\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08289381\", \"08289485\", \"05286083\"]}");
	add("08289573", "{\"term\":\"score\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00161508\", \"00187483\", \"07565002\", \"13928411\", \"14514618\", \"05827482\", \"09202279\", \"08289573\", \"13615828\", \"06828572\", \"05745098\"]}");
	add("08289695", "{\"term\":\"threescore\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08289695\"]}");
	add("08289781", "{\"term\":\"synset\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08289781\"]}");
	add("08289882", "{\"term\":\"combination\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00379793\", \"00872131\", \"07981109\", \"08289882\", \"08390471\", \"08390650\", \"07980325\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }