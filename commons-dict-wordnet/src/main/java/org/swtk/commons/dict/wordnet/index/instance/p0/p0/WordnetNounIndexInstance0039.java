package org.swtk.commons.dict.wordnet.index.instance.p0.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexInstance0039 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("00390116", "{\"term\":\"quantisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00390116\"]}");
	add("00390116", "{\"term\":\"quantization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00390116\"]}");
	add("00390316", "{\"term\":\"fractionation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00390316\", \"13505285\"]}");
	add("00390418", "{\"term\":\"pairing\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00390418\", \"00848970\"]}");
	add("00390571", "{\"term\":\"buddy system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00390571\"]}");
	add("00390761", "{\"term\":\"match-up\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00390761\"]}");
	add("00390761", "{\"term\":\"matchup\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00390761\"]}");
	add("00391006", "{\"term\":\"punctuation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00391006\", \"06854415\", \"07382730\"]}");
	add("00391253", "{\"term\":\"hyphenation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00391253\", \"00391543\"]}");
	add("00391389", "{\"term\":\"syllabication\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00391389\"]}");
	add("00391389", "{\"term\":\"syllabification\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00391389\"]}");
	add("00391543", "{\"term\":\"hyphenation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00391253\", \"00391543\"]}");
	add("00391543", "{\"term\":\"word division\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00391543\"]}");
	add("00391714", "{\"term\":\"detachment\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"07346000\", \"08232169\", \"14438922\", \"00391714\", \"07521270\"]}");
	add("00391714", "{\"term\":\"disengagement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00058126\", \"00391714\"]}");
	add("00391894", "{\"term\":\"tear\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00391894\", \"00511734\", \"09433806\", \"05412667\"]}");
	add("00392101", "{\"term\":\"laceration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00392101\", \"14310816\"]}");
	add("00392215", "{\"term\":\"rent\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00392215\", \"13317293\", \"09433806\", \"13316680\"]}");
	add("00392215", "{\"term\":\"rip\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00392215\", \"07419184\", \"09433806\", \"10525535\"]}");
	add("00392215", "{\"term\":\"split\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00387484\", \"00392215\", \"00439983\", \"04289802\", \"07632199\", \"08836868\", \"09433806\", \"09466040\", \"13307663\", \"13792216\", \"00438869\"]}");
	add("00392407", "{\"term\":\"remotion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00392407\"]}");
	add("00392407", "{\"term\":\"removal\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00217590\", \"00392407\"]}");
	add("00392901", "{\"term\":\"drawing\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00116487\", \"00392901\", \"00509102\", \"00937756\", \"03239009\", \"07016235\"]}");
	add("00392901", "{\"term\":\"drawing off\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00392901\"]}");
	add("00393143", "{\"term\":\"derivation\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00393143\", \"00393276\", \"00393390\", \"04929964\", \"13483590\", \"05788715\", \"06756849\", \"08525126\"]}");
	add("00393276", "{\"term\":\"derivation\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00393143\", \"00393276\", \"00393390\", \"04929964\", \"13483590\", \"05788715\", \"06756849\", \"08525126\"]}");
	add("00393390", "{\"term\":\"derivation\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00393143\", \"00393276\", \"00393390\", \"04929964\", \"13483590\", \"05788715\", \"06756849\", \"08525126\"]}");
	add("00393517", "{\"term\":\"abscission\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00393517\", \"13444952\"]}");
	add("00393517", "{\"term\":\"cutting off\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00360064\", \"00393517\"]}");
	add("00393656", "{\"term\":\"abstraction\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00002137\", \"05708590\", \"02671631\", \"05788101\", \"00393656\", \"05862715\"]}");
	add("00393758", "{\"term\":\"extraction\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00393758\", \"04930920\", \"13499728\"]}");
	add("00393969", "{\"term\":\"threshing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00393969\"]}");
	add("00394177", "{\"term\":\"ablation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13444662\", \"00394177\"]}");
	add("00394177", "{\"term\":\"cutting out\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00394177\"]}");
	add("00394177", "{\"term\":\"excision\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00116623\", \"00209126\", \"00394177\", \"06439886\"]}");
	add("00394177", "{\"term\":\"extirpation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00116623\", \"00394177\"]}");
	add("00395050", "{\"term\":\"autotomy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395050\"]}");
	add("00395293", "{\"term\":\"decontamination\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395293\"]}");
	add("00395418", "{\"term\":\"deletion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00395418\", \"06439886\", \"07440177\", \"13545602\"]}");
	add("00395611", "{\"term\":\"baring\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395611\"]}");
	add("00395611", "{\"term\":\"denudation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395611\"]}");
	add("00395611", "{\"term\":\"husking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395611\"]}");
	add("00395611", "{\"term\":\"stripping\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395611\"]}");
	add("00395611", "{\"term\":\"uncovering\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00043933\", \"00395611\"]}");
	add("00395825", "{\"term\":\"dermabrasion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00395825\"]}");
	add("00396007", "{\"term\":\"dislodgement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00396007\"]}");
	add("00396007", "{\"term\":\"dislodgment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00396007\"]}");
	add("00396141", "{\"term\":\"elimination\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00224587\", \"00396311\", \"05790242\", \"13494300\", \"00396141\"]}");
	add("00396141", "{\"term\":\"riddance\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00207776\", \"00396141\"]}");
	add("00396311", "{\"term\":\"elimination\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00224587\", \"00396311\", \"05790242\", \"13494300\", \"00396141\"]}");
	add("00396462", "{\"term\":\"circumcision\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00396462\", \"01033226\", \"15218106\"]}");
	add("00396605", "{\"term\":\"emptying\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00396605\"]}");
	add("00396605", "{\"term\":\"evacuation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13494300\", \"00055641\", \"00396605\"]}");
	add("00396605", "{\"term\":\"voidance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00396605\"]}");
	add("00396837", "{\"term\":\"drain\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01064179\", \"03236615\", \"03236861\", \"00396837\"]}");
	add("00396837", "{\"term\":\"drainage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00396837\"]}");
	add("00397021", "{\"term\":\"bank withdrawal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00397021\"]}");
	add("00397152", "{\"term\":\"bank run\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00397152\"]}");
	add("00397317", "{\"term\":\"disinvestment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00397317\"]}");
	add("00397450", "{\"term\":\"rinse\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00257176\", \"00257274\", \"00397450\", \"15013421\"]}");
	add("00397450", "{\"term\":\"rinsing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00397450\"]}");
	add("00397633", "{\"term\":\"bowdlerisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00397633\", \"00397999\"]}");
	add("00397633", "{\"term\":\"bowdlerization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00397633\", \"00397999\"]}");
	add("00397818", "{\"term\":\"castration\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00397818\", \"00669090\", \"00693602\"]}");
	add("00397818", "{\"term\":\"expurgation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00397818\"]}");
	add("00397999", "{\"term\":\"bowdlerisation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00397633\", \"00397999\"]}");
	add("00397999", "{\"term\":\"bowdlerization\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00397633\", \"00397999\"]}");
	add("00398155", "{\"term\":\"censoring\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00398155\", \"00822744\"]}");
	add("00398155", "{\"term\":\"censorship\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00398155\", \"00822744\"]}");
	add("00398353", "{\"term\":\"bowdlerism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398353\"]}");
	add("00398455", "{\"term\":\"comstockery\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398455\"]}");
	add("00398568", "{\"term\":\"erasure\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00398568\", \"06400873\", \"06440316\"]}");
	add("00398568", "{\"term\":\"expunction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398568\"]}");
	add("00398568", "{\"term\":\"expunging\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398568\"]}");
	add("00398761", "{\"term\":\"division\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"00398761\", \"00872590\", \"08236147\", \"08236251\", \"08237812\", \"08238269\", \"08256729\", \"07196502\", \"08237635\", \"00386599\", \"05876035\", \"08230126\"]}");
	add("00398761", "{\"term\":\"partition\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00398761\", \"05230083\", \"13648585\", \"03900076\"]}");
	add("00398761", "{\"term\":\"partitioning\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00398761\", \"05789797\"]}");
	add("00398761", "{\"term\":\"sectionalisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398761\"]}");
	add("00398761", "{\"term\":\"sectionalization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00398761\"]}");
	add("00398761", "{\"term\":\"segmentation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00398761\", \"13470329\"]}");
	add("00399235", "{\"term\":\"subdivision\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04355626\", \"06403644\", \"08418205\", \"00399235\", \"08691989\"]}");
	add("00399393", "{\"term\":\"septation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00399393\"]}");
	add("00399512", "{\"term\":\"transformation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00399512\", \"00399838\", \"07275000\", \"13807348\", \"07374199\"]}");
	add("00399512", "{\"term\":\"translation\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00331810\", \"06441153\", \"13590186\", \"13807948\", \"00399512\", \"07461004\", \"06548380\"]}");
	add("00399838", "{\"term\":\"transformation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00399512\", \"00399838\", \"07275000\", \"13807348\", \"07374199\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String ID) { 		return map.get(ID); 	}  	public boolean has(final String ID) { 		return map.containsKey(ID); 	} }