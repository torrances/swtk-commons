package org.swtk.commons.dict.wordnet.index.byid.instance.p1.p1;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance1101 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("11010208", "{\"term\":\"gardiner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010208\"]}");
	add("11010208", "{\"term\":\"samuel rawson gardiner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010208\"]}");
	add("11010367", "{\"term\":\"erle stanley gardner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010367\"]}");
	add("11010367", "{\"term\":\"gardner\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11010367\", \"11010505\"]}");
	add("11010505", "{\"term\":\"gardner\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11010367\", \"11010505\"]}");
	add("11010505", "{\"term\":\"isabella stewart gardner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010505\"]}");
	add("11010729", "{\"term\":\"garfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010729\"]}");
	add("11010729", "{\"term\":\"james a. garfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010729\"]}");
	add("11010729", "{\"term\":\"james abraham garfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010729\"]}");
	add("11010729", "{\"term\":\"james garfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010729\"]}");
	add("11010729", "{\"term\":\"president garfield\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010729\"]}");
	add("11010959", "{\"term\":\"garibaldi\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03423659\", \"11010959\"]}");
	add("11010959", "{\"term\":\"giuseppe garibaldi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11010959\"]}");
	add("11011161", "{\"term\":\"garland\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04613372\", \"06604903\", \"09167467\", \"11011161\"]}");
	add("11011161", "{\"term\":\"judy garland\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011161\"]}");
	add("11011299", "{\"term\":\"garnier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011299\"]}");
	add("11011299", "{\"term\":\"jean louis charles garnier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011299\"]}");
	add("11011411", "{\"term\":\"david garrick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011411\"]}");
	add("11011411", "{\"term\":\"garrick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011411\"]}");
	add("11011579", "{\"term\":\"garrison\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08414993\", \"11011579\", \"03425469\"]}");
	add("11011579", "{\"term\":\"william lloyd garrison\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011579\"]}");
	add("11011736", "{\"term\":\"elizabeth cleghorn stevenson gaskell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011736\"]}");
	add("11011736", "{\"term\":\"elizabeth gaskell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011736\"]}");
	add("11011736", "{\"term\":\"gaskell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011736\"]}");
	add("11011932", "{\"term\":\"bill gates\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011932\"]}");
	add("11011932", "{\"term\":\"gates\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011932\"]}");
	add("11011932", "{\"term\":\"william henry gates\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11011932\"]}");
	add("11012188", "{\"term\":\"gatling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012188\"]}");
	add("11012188", "{\"term\":\"richard jordan gatling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012188\"]}");
	add("11012332", "{\"term\":\"antonio gaudi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012332\"]}");
	add("11012332", "{\"term\":\"antonio gaudi i cornet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012332\"]}");
	add("11012332", "{\"term\":\"gaudi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012332\"]}");
	add("11012332", "{\"term\":\"gaudi i cornet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012332\"]}");
	add("11012524", "{\"term\":\"gauguin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012524\"]}");
	add("11012524", "{\"term\":\"paul gauguin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012524\"]}");
	add("11012671", "{\"term\":\"gauss\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11012671\", \"13660326\"]}");
	add("11012671", "{\"term\":\"karl friedrich gauss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012671\"]}");
	add("11012671", "{\"term\":\"karl gauss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012671\"]}");
	add("11012929", "{\"term\":\"gawain\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012929\"]}");
	add("11012929", "{\"term\":\"sir gawain\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11012929\"]}");
	add("11013094", "{\"term\":\"gay-lussac\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013094\"]}");
	add("11013094", "{\"term\":\"joseph louis gay-lussac\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013094\"]}");
	add("11013346", "{\"term\":\"gehrig\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013346\"]}");
	add("11013346", "{\"term\":\"henry louis gehrig\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013346\"]}");
	add("11013346", "{\"term\":\"lou gehrig\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013346\"]}");
	add("11013503", "{\"term\":\"geiger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013503\"]}");
	add("11013503", "{\"term\":\"hans geiger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013503\"]}");
	add("11013632", "{\"term\":\"dr. seuss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013632\"]}");
	add("11013632", "{\"term\":\"geisel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013632\"]}");
	add("11013632", "{\"term\":\"theodor seuss geisel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013632\"]}");
	add("11013773", "{\"term\":\"gell-mann\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013773\"]}");
	add("11013773", "{\"term\":\"murray gell-mann\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013773\"]}");
	add("11013932", "{\"term\":\"genet\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02139667\", \"11013932\", \"11014093\"]}");
	add("11013932", "{\"term\":\"jean genet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11013932\"]}");
	add("11014093", "{\"term\":\"citizen genet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014093\"]}");
	add("11014093", "{\"term\":\"edmund charles edouard genet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014093\"]}");
	add("11014093", "{\"term\":\"genet\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02139667\", \"11013932\", \"11014093\"]}");
	add("11014304", "{\"term\":\"genghis khan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014304\"]}");
	add("11014304", "{\"term\":\"jenghiz khan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014304\"]}");
	add("11014304", "{\"term\":\"jinghis khan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014304\"]}");
	add("11014304", "{\"term\":\"temujin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014304\"]}");
	add("11014496", "{\"term\":\"gaiseric\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014496\"]}");
	add("11014496", "{\"term\":\"genseric\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014496\"]}");
	add("11014656", "{\"term\":\"geoffrey of monmouth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014656\"]}");
	add("11014902", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11014902", "{\"term\":\"george i\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11014902\"]}");
	add("11015111", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11015111", "{\"term\":\"george ii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11015111\"]}");
	add("11015288", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11015288", "{\"term\":\"george iii\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11015288\"]}");
	add("11015588", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11015588", "{\"term\":\"george iv\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11015588\"]}");
	add("11015846", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11015846", "{\"term\":\"george v\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11015846\"]}");
	add("11016086", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11016086", "{\"term\":\"george vi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016086\"]}");
	add("11016281", "{\"term\":\"george\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"11014902\", \"11015111\", \"11015288\", \"11015588\", \"11015846\", \"11016086\", \"11016281\"]}");
	add("11016281", "{\"term\":\"saint george\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016281\"]}");
	add("11016281", "{\"term\":\"st. george\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016281\"]}");
	add("11016529", "{\"term\":\"geraint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016529\"]}");
	add("11016529", "{\"term\":\"sir geraint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016529\"]}");
	add("11016673", "{\"term\":\"geronimo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016673\"]}");
	add("11016872", "{\"term\":\"george gershwin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11016872\"]}");
	add("11016872", "{\"term\":\"gershwin\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11016872\", \"11017064\"]}");
	add("11017064", "{\"term\":\"gershwin\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11016872\", \"11017064\"]}");
	add("11017064", "{\"term\":\"ira gershwin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017064\"]}");
	add("11017230", "{\"term\":\"arnold gesell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017230\"]}");
	add("11017230", "{\"term\":\"arnold lucius gesell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017230\"]}");
	add("11017230", "{\"term\":\"gesell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017230\"]}");
	add("11017401", "{\"term\":\"gesner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017401\"]}");
	add("11017401", "{\"term\":\"konrad von gesner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017401\"]}");
	add("11017549", "{\"term\":\"alberto giacometti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017549\"]}");
	add("11017549", "{\"term\":\"giacometti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017549\"]}");
	add("11017738", "{\"term\":\"edward gibbon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017738\"]}");
	add("11017738", "{\"term\":\"gibbon\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02485993\", \"11017738\"]}");
	add("11017884", "{\"term\":\"gibbs\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017884\"]}");
	add("11017884", "{\"term\":\"josiah willard gibbs\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017884\"]}");
	add("11017993", "{\"term\":\"gibran\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017993\"]}");
	add("11017993", "{\"term\":\"kahlil gibran\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11017993\"]}");
	add("11018113", "{\"term\":\"althea gibson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018113\"]}");
	add("11018113", "{\"term\":\"gibson\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"11018113\", \"11018301\", \"11018470\"]}");
	add("11018301", "{\"term\":\"gibson\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"11018113\", \"11018301\", \"11018470\"]}");
	add("11018301", "{\"term\":\"mel columcille gerard gibson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018301\"]}");
	add("11018301", "{\"term\":\"mel gibson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018301\"]}");
	add("11018470", "{\"term\":\"c. d. gibson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018470\"]}");
	add("11018470", "{\"term\":\"charles dana gibson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018470\"]}");
	add("11018470", "{\"term\":\"gibson\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"11018113\", \"11018301\", \"11018470\"]}");
	add("11018647", "{\"term\":\"andre gide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018647\"]}");
	add("11018647", "{\"term\":\"andre paul guillaume gide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018647\"]}");
	add("11018647", "{\"term\":\"gide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018647\"]}");
	add("11018856", "{\"term\":\"arthur john gielgud\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018856\"]}");
	add("11018856", "{\"term\":\"gielgud\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018856\"]}");
	add("11018856", "{\"term\":\"sir john gielgud\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11018856\"]}");
	add("11019044", "{\"term\":\"cass gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019044\"]}");
	add("11019044", "{\"term\":\"gilbert\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"11019044\", \"11019198\", \"11019406\", \"11019580\", \"13663479\"]}");
	add("11019198", "{\"term\":\"gilbert\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"11019044\", \"11019198\", \"11019406\", \"11019580\", \"13663479\"]}");
	add("11019198", "{\"term\":\"humphrey gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019198\"]}");
	add("11019198", "{\"term\":\"sir humphrey gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019198\"]}");
	add("11019406", "{\"term\":\"gilbert\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"11019044\", \"11019198\", \"11019406\", \"11019580\", \"13663479\"]}");
	add("11019406", "{\"term\":\"william gilbert\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11019406\", \"11019580\"]}");
	add("11019580", "{\"term\":\"gilbert\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"11019044\", \"11019198\", \"11019406\", \"11019580\", \"13663479\"]}");
	add("11019580", "{\"term\":\"sir william gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019580\"]}");
	add("11019580", "{\"term\":\"william gilbert\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11019406\", \"11019580\"]}");
	add("11019580", "{\"term\":\"william s. gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019580\"]}");
	add("11019580", "{\"term\":\"william schwenk gilbert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019580\"]}");
	add("11019869", "{\"term\":\"gilgamesh\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11019869\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }