package org.swtk.commons.dict.wordnet.index.name.instance.c.h.a.l;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCHAL {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"chalaza\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01463604\", \"11699536\"]}");
	add("{\"term\":\"chalazion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14226002\"]}");
	add("{\"term\":\"chalcanthite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14806411\"]}");
	add("{\"term\":\"chalcedon\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08331083\", \"09063674\"]}");
	add("{\"term\":\"chalcedony\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14830503\"]}");
	add("{\"term\":\"chalcid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02220215\"]}");
	add("{\"term\":\"chalcidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02219986\"]}");
	add("{\"term\":\"chalcidfly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02220215\"]}");
	add("{\"term\":\"chalcididae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02219986\"]}");
	add("{\"term\":\"chalcis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02220649\"]}");
	add("{\"term\":\"chalcocite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14694505\"]}");
	add("{\"term\":\"chalcopyrite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14694642\"]}");
	add("{\"term\":\"chalcostigma\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01836925\"]}");
	add("{\"term\":\"chaldaea\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08937276\", \"08937654\"]}");
	add("{\"term\":\"chaldaean\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09661306\", \"09925418\"]}");
	add("{\"term\":\"chaldea\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08937276\", \"08937654\"]}");
	add("{\"term\":\"chaldean\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09661306\", \"09925418\"]}");
	add("{\"term\":\"chaldee\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09661306\", \"09925418\"]}");
	add("{\"term\":\"chaldron\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13644610\"]}");
	add("{\"term\":\"chalet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03006420\"]}");
	add("{\"term\":\"chalice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03006552\"]}");
	add("{\"term\":\"chalk\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03006695\", \"03759824\", \"04968649\", \"14830768\"]}");
	add("{\"term\":\"chalkboard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02849749\"]}");
	add("{\"term\":\"chalkpit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03007152\"]}");
	add("{\"term\":\"chalkstone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15110492\"]}");
	add("{\"term\":\"challah\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07697195\"]}");
	add("{\"term\":\"challenge\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"07206229\", \"07223225\", \"07208065\", \"07245954\", \"13955981\"]}");
	add("{\"term\":\"challenger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10552570\"]}");
	add("{\"term\":\"challis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03007237\"]}");
	add("{\"term\":\"chalons\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01277226\"]}");
	add("{\"term\":\"chalybite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15064394\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }