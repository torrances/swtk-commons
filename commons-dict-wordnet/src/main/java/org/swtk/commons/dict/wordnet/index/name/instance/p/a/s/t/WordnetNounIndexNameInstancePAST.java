package org.swtk.commons.dict.wordnet.index.name.instance.p.a.s.t;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePAST {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"past\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06341255\", \"15166653\", \"15145765\"]}");
	add("{\"term\":\"pasta\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07714660\", \"07879350\"]}");
	add("{\"term\":\"paste\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07872246\", \"14729127\", \"14906399\", \"14729448\"]}");
	add("{\"term\":\"pasteboard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14825441\"]}");
	add("{\"term\":\"pastel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04981842\"]}");
	add("{\"term\":\"paster\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07287250\", \"10424743\"]}");
	add("{\"term\":\"pastern\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02464697\"]}");
	add("{\"term\":\"pasternak\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11244644\"]}");
	add("{\"term\":\"pasteur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11244867\"]}");
	add("{\"term\":\"pasteurellosis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14286782\"]}");
	add("{\"term\":\"pasteurisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00255033\"]}");
	add("{\"term\":\"pasteurization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00255033\"]}");
	add("{\"term\":\"pastiche\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03903217\", \"07061563\"]}");
	add("{\"term\":\"pastil\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07623576\"]}");
	add("{\"term\":\"pastille\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07623576\"]}");
	add("{\"term\":\"pastime\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00432492\"]}");
	add("{\"term\":\"pastinaca\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12962120\"]}");
	add("{\"term\":\"pastis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07926778\"]}");
	add("{\"term\":\"pastness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05056807\"]}");
	add("{\"term\":\"pasto\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09198219\"]}");
	add("{\"term\":\"pastor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01579906\", \"10003102\"]}");
	add("{\"term\":\"pastoral\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06388898\", \"06638357\", \"07057570\"]}");
	add("{\"term\":\"pastorale\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07057570\"]}");
	add("{\"term\":\"pastorate\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00596900\", \"08130600\"]}");
	add("{\"term\":\"pastorship\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00596900\"]}");
	add("{\"term\":\"pastrami\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07680124\"]}");
	add("{\"term\":\"pastry\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07638317\", \"07638745\"]}");
	add("{\"term\":\"pasturage\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07817067\", \"12125018\"]}");
	add("{\"term\":\"pasture\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07817067\", \"08633625\"]}");
	add("{\"term\":\"pastureland\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08633625\"]}");
	add("{\"term\":\"pasty\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03903456\", \"07888146\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public boolean has(final String TERM) { 		return map.containsKey(TERM); 	} }