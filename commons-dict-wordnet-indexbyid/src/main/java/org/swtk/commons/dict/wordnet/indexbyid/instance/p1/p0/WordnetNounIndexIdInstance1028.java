package org.swtk.commons.dict.wordnet.indexbyid.instance.p1.p0;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance1028 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("10280019", "{\"term\":\"lieutenant governor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280019\"]}");
	add("10280170", "{\"term\":\"lieutenant jg\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280170\"]}");
	add("10280170", "{\"term\":\"lieutenant junior grade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280170\"]}");
	add("10280403", "{\"term\":\"life\", \"synsetCount\":14, \"upperType\":\"NOUN\", \"ids\":[\"15249872\", \"09201624\", \"06527818\", \"11493691\", \"00006269\", \"04639514\", \"10280403\", \"15165852\", \"15165704\", \"15165365\", \"13984978\", \"13984685\", \"05818587\", \"13986528\"]}");
	add("10280497", "{\"term\":\"lifeguard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280497\"]}");
	add("10280497", "{\"term\":\"lifesaver\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03668045\", \"10280497\"]}");
	add("10280640", "{\"term\":\"life peer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280640\"]}");
	add("10280738", "{\"term\":\"lifer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280738\"]}");
	add("10280908", "{\"term\":\"life tenant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10280908\"]}");
	add("10281085", "{\"term\":\"bargee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281085\"]}");
	add("10281085", "{\"term\":\"bargeman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281085\"]}");
	add("10281085", "{\"term\":\"lighterman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281085\"]}");
	add("10281208", "{\"term\":\"light flyweight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281208\"]}");
	add("10281321", "{\"term\":\"cruiserweight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281321\"]}");
	add("10281321", "{\"term\":\"light heavyweight\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10281321\", \"10281459\", \"10281559\"]}");
	add("10281459", "{\"term\":\"light heavyweight\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10281321\", \"10281459\", \"10281559\"]}");
	add("10281559", "{\"term\":\"light heavyweight\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10281321\", \"10281459\", \"10281559\"]}");
	add("10281674", "{\"term\":\"light middleweight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281674\"]}");
	add("10281790", "{\"term\":\"lighthouse keeper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10281790\"]}");
	add("10281880", "{\"term\":\"lightning rod\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03673393\", \"10281880\"]}");
	add("10282040", "{\"term\":\"light-o\u0027-love\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10282040\"]}");
	add("10282040", "{\"term\":\"light-of-love\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10282040\"]}");
	add("10282142", "{\"term\":\"lightweight\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10282258\", \"10282352\", \"10796655\", \"10282142\"]}");
	add("10282258", "{\"term\":\"lightweight\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10282258\", \"10282352\", \"10796655\", \"10282142\"]}");
	add("10282352", "{\"term\":\"lightweight\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10282258\", \"10282352\", \"10796655\", \"10282142\"]}");
	add("10282461", "{\"term\":\"light welterweight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10282461\"]}");
	add("10282577", "{\"term\":\"lilliputian\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09624603\", \"10282577\"]}");
	add("10282699", "{\"term\":\"line backer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727620\", \"10282699\"]}");
	add("10282699", "{\"term\":\"linebacker\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00727620\", \"10282699\"]}");
	add("10282843", "{\"term\":\"limnologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10282843\"]}");
	add("10282956", "{\"term\":\"line judge\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10282956\"]}");
	add("10283108", "{\"term\":\"lineman\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00727351\", \"10069171\", \"10283277\", \"10283108\"]}");
	add("10283277", "{\"term\":\"lineman\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00727351\", \"10069171\", \"10283277\", \"10283108\"]}");
	add("10283381", "{\"term\":\"linendraper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10283381\"]}");
	add("10283487", "{\"term\":\"line officer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10283487\"]}");
	add("10283628", "{\"term\":\"linesman\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10069171\", \"10283628\"]}");
	add("10283817", "{\"term\":\"line worker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10283817\"]}");
	add("10283916", "{\"term\":\"linguist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10283916\", \"10284134\"]}");
	add("10283916", "{\"term\":\"polyglot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10283916\"]}");
	add("10284134", "{\"term\":\"linguist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10283916\", \"10284134\"]}");
	add("10284134", "{\"term\":\"linguistic scientist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10284134\"]}");
	add("10284625", "{\"term\":\"linkboy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10284625\"]}");
	add("10284625", "{\"term\":\"linkman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10284625\"]}");
	add("10284767", "{\"term\":\"lion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"08704559\", \"09772126\", \"10284767\", \"02131817\"]}");
	add("10284767", "{\"term\":\"social lion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10284767\"]}");
	add("10284897", "{\"term\":\"lion-hunter\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10284897\", \"10284978\"]}");
	add("10284978", "{\"term\":\"lion-hunter\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10284897\", \"10284978\"]}");
	add("10285087", "{\"term\":\"lip reader\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10285087\"]}");
	add("10285229", "{\"term\":\"liquidator\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10285229\", \"10358420\"]}");
	add("10285229", "{\"term\":\"receiver\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"10530411\", \"10530567\", \"09651094\", \"04409715\", \"10285229\", \"04067759\"]}");
	add("10285498", "{\"term\":\"lisper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10285498\"]}");
	add("10285588", "{\"term\":\"lister\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03683092\", \"10285588\", \"11154885\"]}");
	add("10285713", "{\"term\":\"literary critic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10285713\"]}");
	add("10286025", "{\"term\":\"literate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286025\"]}");
	add("10286025", "{\"term\":\"literate person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286025\"]}");
	add("10286183", "{\"term\":\"lithographer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286183\"]}");
	add("10286441", "{\"term\":\"lithomancer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286441\"]}");
	add("10286545", "{\"term\":\"litigant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286545\"]}");
	add("10286545", "{\"term\":\"litigator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286545\"]}");
	add("10286863", "{\"term\":\"litter lout\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286863\"]}");
	add("10286863", "{\"term\":\"litterbug\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286863\"]}");
	add("10286863", "{\"term\":\"litterer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10286863\"]}");
	add("10287008", "{\"term\":\"little brother\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287008\"]}");
	add("10287134", "{\"term\":\"little john\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287134\"]}");
	add("10287258", "{\"term\":\"little leaguer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287258\"]}");
	add("10287416", "{\"term\":\"little red riding hood\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287416\"]}");
	add("10287562", "{\"term\":\"little sister\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287562\"]}");
	add("10287638", "{\"term\":\"liturgist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287638\"]}");
	add("10287755", "{\"term\":\"liveborn infant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10287755\"]}");
	add("10287877", "{\"term\":\"liver\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10287877\", \"10287996\", \"07667661\", \"05392877\"]}");
	add("10287996", "{\"term\":\"liver\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10287877\", \"10287996\", \"07667661\", \"05392877\"]}");
	add("10288119", "{\"term\":\"liveryman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288119\"]}");
	add("10288202", "{\"term\":\"loader\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10288202\", \"10674608\"]}");
	add("10288326", "{\"term\":\"lobbyist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288326\"]}");
	add("10288524", "{\"term\":\"lobsterman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288524\"]}");
	add("10288627", "{\"term\":\"locater\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288627\"]}");
	add("10288627", "{\"term\":\"locator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288627\"]}");
	add("10288775", "{\"term\":\"lockkeeper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288775\"]}");
	add("10288775", "{\"term\":\"lockman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288775\"]}");
	add("10288775", "{\"term\":\"lockmaster\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288775\"]}");
	add("10288896", "{\"term\":\"locksmith\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288896\"]}");
	add("10288986", "{\"term\":\"locum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288986\"]}");
	add("10288986", "{\"term\":\"locum tenens\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10288986\"]}");
	add("10289155", "{\"term\":\"boarder\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09881751\", \"09881885\", \"10289155\"]}");
	add("10289155", "{\"term\":\"lodger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289155\"]}");
	add("10289155", "{\"term\":\"roomer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289155\"]}");
	add("10289308", "{\"term\":\"logical positivist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289308\"]}");
	add("10289482", "{\"term\":\"logician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289482\"]}");
	add("10289482", "{\"term\":\"logistician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289482\"]}");
	add("10289806", "{\"term\":\"logomach\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289806\"]}");
	add("10289806", "{\"term\":\"logomachist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289806\"]}");
	add("10289929", "{\"term\":\"lingerer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289929\"]}");
	add("10289929", "{\"term\":\"loiterer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10289929\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }