package org.swtk.commons.dict.wordnet.indexbyid.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0666 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06660359", "{\"term\":\"proof\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00154781\", \"04017506\", \"06603166\", \"13802392\", \"06660359\", \"05833063\"]}");
	add("06660609", "{\"term\":\"mathematical proof\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06660609\"]}");
	add("06660705", "{\"term\":\"logical proof\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06660705\"]}");
	add("06660791", "{\"term\":\"demonstration\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06892230\", \"06660791\", \"01180193\", \"00523026\", \"00522618\"]}");
	add("06660791", "{\"term\":\"monstrance\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03789803\", \"06660791\"]}");
	add("06660952", "{\"term\":\"testimonial\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06707285\", \"06709958\", \"06660952\"]}");
	add("06660952", "{\"term\":\"testimony\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06660952\", \"06745459\", \"06747216\"]}");
	add("06661207", "{\"term\":\"good authority\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06661207\"]}");
	add("06661335", "{\"term\":\"testament\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06465393\", \"06661335\", \"06556133\", \"05808280\"]}");
	add("06661469", "{\"term\":\"argument\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05781046\", \"05866365\", \"06367706\", \"06479351\", \"07155686\", \"07197811\", \"06661469\"]}");
	add("06661469", "{\"term\":\"statement\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"06528586\", \"06597067\", \"07217786\", \"06736201\", \"07043306\", \"06661469\", \"06735202\"]}");
	add("06661853", "{\"term\":\"counterargument\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06661853\"]}");
	add("06661968", "{\"term\":\"pro\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06661968\", \"10500168\"]}");
	add("06662070", "{\"term\":\"con\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00780744\", \"09982445\", \"06662070\"]}");
	add("06662171", "{\"term\":\"case\", \"synsetCount\":20, \"upperType\":\"NOUN\", \"ids\":[\"02978671\", \"02978871\", \"02979048\", \"02981078\", \"04197790\", \"05245366\", \"06838449\", \"09928518\", \"14039467\", \"06321935\", \"13788576\", \"06662171\", \"06797823\", \"10688105\", \"09918344\", \"02978156\", \"05825869\", \"01185144\", \"13966452\", \"07323507\"]}");
	add("06662312", "{\"term\":\"clincher\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03047158\", \"05700723\", \"06662312\"]}");
	add("06662312", "{\"term\":\"determiner\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05700384\", \"06335468\", \"06662312\"]}");
	add("06662312", "{\"term\":\"determining factor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06662312\", \"05700384\"]}");
	add("06662449", "{\"term\":\"adducing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06662449\"]}");
	add("06662531", "{\"term\":\"last word\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04820943\", \"06423856\", \"06662531\"]}");
	add("06662660", "{\"term\":\"attestation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06662660\", \"06749154\"]}");
	add("06662815", "{\"term\":\"confirmation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01040793\", \"01040927\", \"07194603\", \"06662815\", \"05833569\"]}");
	add("06662983", "{\"term\":\"reenforcement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00973567\", \"06662983\"]}");
	add("06662983", "{\"term\":\"reinforcement\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01222041\", \"04343172\", \"05836876\", \"06662983\", \"00973567\"]}");
	add("06663176", "{\"term\":\"certification\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00155053\", \"06483016\", \"06663176\", \"01142151\"]}");
	add("06663176", "{\"term\":\"corroboration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06663176\"]}");
	add("06663176", "{\"term\":\"documentation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00155253\", \"06600607\", \"06663176\"]}");
	add("06663446", "{\"term\":\"counsel\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06663446\", \"09795104\"]}");
	add("06663446", "{\"term\":\"counseling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06663446\"]}");
	add("06663446", "{\"term\":\"counselling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06663446\"]}");
	add("06663446", "{\"term\":\"direction\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"05712641\", \"07184131\", \"00816981\", \"06799486\", \"01135602\", \"06663446\", \"06206950\", \"13849639\", \"08697710\"]}");
	add("06663446", "{\"term\":\"guidance\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00816981\", \"01147389\", \"06663446\"]}");
	add("06663792", "{\"term\":\"career counseling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06663792\"]}");
	add("06663890", "{\"term\":\"cynosure\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05820748\", \"06663890\"]}");
	add("06664047", "{\"term\":\"genetic counseling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06664047\"]}");
	add("06664208", "{\"term\":\"marriage counseling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06664208\"]}");
	add("06664322", "{\"term\":\"confidential information\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06664322\"]}");
	add("06664322", "{\"term\":\"hint\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06664322\", \"13795501\", \"13796315\", \"06815643\", \"07178639\"]}");
	add("06664322", "{\"term\":\"lead\", \"synsetCount\":17, \"upperType\":\"NOUN\", \"ids\":[\"01258857\", \"03610056\", \"03656410\", \"03656591\", \"03658258\", \"05058239\", \"06281845\", \"06664322\", \"08609721\", \"10668135\", \"13617665\", \"06281532\", \"13915822\", \"01259362\", \"05835238\", \"14667645\", \"05164526\"]}");
	add("06664322", "{\"term\":\"steer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02405883\", \"06664322\"]}");
	add("06664322", "{\"term\":\"tip\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"08635538\", \"13925175\", \"06664322\", \"13319724\", \"08680894\"]}");
	add("06664322", "{\"term\":\"wind\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00346467\", \"00841258\", \"04594218\", \"06664322\", \"07151419\", \"00838198\", \"11435606\", \"11546388\"]}");
	add("06664599", "{\"term\":\"insider information\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06664599\"]}");
	add("06664809", "{\"term\":\"rule\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"04125870\", \"05855459\", \"05882839\", \"06664809\", \"06801754\", \"14466399\", \"15320659\", \"05922132\", \"07274440\", \"06664987\", \"05675457\", \"05854581\"]}");
	add("06664987", "{\"term\":\"prescript\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06664987\"]}");
	add("06664987", "{\"term\":\"rule\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"04125870\", \"05855459\", \"05882839\", \"06664809\", \"06801754\", \"14466399\", \"15320659\", \"05922132\", \"07274440\", \"06664987\", \"05675457\", \"05854581\"]}");
	add("06665359", "{\"term\":\"rubric\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05848285\", \"06356368\", \"06357363\", \"06665457\", \"06756695\", \"06665359\"]}");
	add("06665457", "{\"term\":\"rubric\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05848285\", \"06356368\", \"06357363\", \"06665457\", \"06756695\", \"06665359\"]}");
	add("06665623", "{\"term\":\"order\", \"synsetCount\":15, \"upperType\":\"NOUN\", \"ids\":[\"01011813\", \"04706004\", \"07294392\", \"08123900\", \"08164801\", \"13974030\", \"06665623\", \"08244135\", \"06541210\", \"06551761\", \"14520294\", \"08474004\", \"13991994\", \"05098520\", \"07183274\"]}");
	add("06665623", "{\"term\":\"parliamentary law\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06665623\"]}");
	add("06665623", "{\"term\":\"parliamentary procedure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06665623\"]}");
	add("06665623", "{\"term\":\"rules of order\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06665623\"]}");
	add("06665905", "{\"term\":\"interpellation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01070108\", \"06665905\"]}");
	add("06666108", "{\"term\":\"rule of evidence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06666108\"]}");
	add("06666472", "{\"term\":\"best evidence rule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06666472\"]}");
	add("06666656", "{\"term\":\"estoppel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06666656\"]}");
	add("06666819", "{\"term\":\"exclusionary rule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06666819\"]}");
	add("06667020", "{\"term\":\"fruit of the poisonous tree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667020\"]}");
	add("06667235", "{\"term\":\"hearsay rule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667235\"]}");
	add("06667384", "{\"term\":\"parol evidence rule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667384\"]}");
	add("06667536", "{\"term\":\"res ipsa loquitur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667536\"]}");
	add("06667722", "{\"term\":\"standing order\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667722\"]}");
	add("06667819", "{\"term\":\"miranda rule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06667819\"]}");
	add("06668133", "{\"term\":\"precept\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06195690\", \"06668133\"]}");
	add("06668133", "{\"term\":\"principle\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"05801218\", \"06668133\", \"05882839\", \"05881099\", \"05964190\", \"05922132\"]}");
	add("06668314", "{\"term\":\"higher law\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06668314\"]}");
	add("06668428", "{\"term\":\"moral principle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06668428\", \"05964886\"]}");
	add("06668550", "{\"term\":\"golden rule\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05966780\", \"06668550\"]}");
	add("06668672", "{\"term\":\"gigo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06668672\"]}");
	add("06668888", "{\"term\":\"categorical imperative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06668888\"]}");
	add("06669019", "{\"term\":\"hypothetical imperative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06669019\"]}");
	add("06669153", "{\"term\":\"policy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06535632\", \"06669153\", \"05910115\"]}");
	add("06669486", "{\"term\":\"economic policy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06669486\"]}");
	add("06669706", "{\"term\":\"fiscal policy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06669706\"]}");
	add("06669854", "{\"term\":\"new deal\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01086772\", \"15286282\", \"06669854\"]}");
	add("06669947", "{\"term\":\"control\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"06669947\", \"09527922\", \"03101611\", \"05649804\", \"04890163\", \"14465291\", \"00805278\", \"05806577\", \"00832109\", \"13849418\", \"05203643\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }