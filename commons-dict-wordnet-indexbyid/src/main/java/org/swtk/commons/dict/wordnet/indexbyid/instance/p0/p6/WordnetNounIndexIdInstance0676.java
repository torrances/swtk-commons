package org.swtk.commons.dict.wordnet.indexbyid.instance.p0.p6;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexIdInstance0676 {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("06760082", "{\"term\":\"banns\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06760082\"]}");
	add("06760197", "{\"term\":\"handout\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01092266\", \"06760197\"]}");
	add("06760197", "{\"term\":\"press release\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06760197\"]}");
	add("06760197", "{\"term\":\"release\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"00211789\", \"00214561\", \"00330445\", \"01266940\", \"04080537\", \"06564805\", \"07348249\", \"00217041\", \"06760197\", \"13570875\", \"00096322\", \"04080320\"]}");
	add("06760383", "{\"term\":\"notice\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"06422419\", \"05711750\", \"06806283\", \"07227272\", \"07200328\", \"05711376\", \"06760383\"]}");
	add("06760621", "{\"term\":\"caveat\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06760621\", \"07239827\"]}");
	add("06760847", "{\"term\":\"necrology\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06505917\", \"06760847\"]}");
	add("06760847", "{\"term\":\"obit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06760847\"]}");
	add("06760847", "{\"term\":\"obituary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06760847\"]}");
	add("06760984", "{\"term\":\"parallel lives\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06760984\"]}");
	add("06761180", "{\"term\":\"program\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"00552252\", \"06581154\", \"06689161\", \"06761180\", \"06513302\", \"06631935\", \"05907694\", \"05907175\"]}");
	add("06761180", "{\"term\":\"programme\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00552252\", \"05907175\", \"05907694\", \"06581154\", \"06631935\", \"06689161\", \"06761180\"]}");
	add("06761417", "{\"term\":\"playbill\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06761417\"]}");
	add("06761555", "{\"term\":\"racecard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06761555\"]}");
	add("06761683", "{\"term\":\"forecasting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06761683\"]}");
	add("06761683", "{\"term\":\"foretelling\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05784209\", \"06761683\"]}");
	add("06761683", "{\"term\":\"prediction\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06761683\", \"05783078\"]}");
	add("06761683", "{\"term\":\"prognostication\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05783404\", \"06761683\", \"07301073\"]}");
	add("06761981", "{\"term\":\"extropy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06761981\"]}");
	add("06762182", "{\"term\":\"fortunetelling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06762182\"]}");
	add("06762308", "{\"term\":\"horoscope\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03542895\", \"06762308\"]}");
	add("06762443", "{\"term\":\"meteorology\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06128170\", \"06762443\"]}");
	add("06762443", "{\"term\":\"weather forecasting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06762443\"]}");
	add("06762595", "{\"term\":\"forecast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06762595\"]}");
	add("06762595", "{\"term\":\"prognosis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00154485\", \"06762595\"]}");
	add("06762868", "{\"term\":\"divination\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05784209\", \"06762868\", \"06796012\"]}");
	add("06762868", "{\"term\":\"prophecy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06762868\", \"05783404\"]}");
	add("06763053", "{\"term\":\"oracle\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03858428\", \"06763053\", \"10503115\"]}");
	add("06763228", "{\"term\":\"financial forecast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06763228\"]}");
	add("06763412", "{\"term\":\"weather forecast\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06763412\"]}");
	add("06763412", "{\"term\":\"weather outlook\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06763412\"]}");
	add("06763518", "{\"term\":\"proposition\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00799242\", \"07176080\", \"07176563\", \"07177331\", \"06763518\"]}");
	add("06763856", "{\"term\":\"particular\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06763856\", \"13832132\", \"05826326\"]}");
	add("06763856", "{\"term\":\"particular proposition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06763856\"]}");
	add("06764081", "{\"term\":\"universal\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04518001\", \"05676203\", \"06764081\", \"07274652\"]}");
	add("06764081", "{\"term\":\"universal proposition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06764081\"]}");
	add("06764286", "{\"term\":\"negation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06764286\", \"07221121\", \"07295646\"]}");
	add("06764456", "{\"term\":\"converse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06764456\"]}");
	add("06764547", "{\"term\":\"lemma\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06356061\", \"13176246\", \"06764547\"]}");
	add("06764688", "{\"term\":\"term\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"04420858\", \"15251247\", \"06764688\", \"05864488\", \"06783666\", \"15249282\", \"06314878\"]}");
	add("06765007", "{\"term\":\"theorem\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05926861\", \"06765007\"]}");
	add("06765124", "{\"term\":\"categorem\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06765124\"]}");
	add("06765124", "{\"term\":\"categoreme\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06765124\"]}");
	add("06765409", "{\"term\":\"syncategorem\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06765409\"]}");
	add("06765409", "{\"term\":\"syncategoreme\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06765409\"]}");
	add("06765744", "{\"term\":\"conclusion\", \"synsetCount\":9, \"upperType\":\"NOUN\", \"ids\":[\"00163453\", \"06410044\", \"07192282\", \"00210792\", \"06765744\", \"07306035\", \"15292365\", \"05789538\", \"05846685\"]}");
	add("06765744", "{\"term\":\"ratiocination\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05791663\", \"06765744\"]}");
	add("06766013", "{\"term\":\"posit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766013\"]}");
	add("06766013", "{\"term\":\"postulate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766013\"]}");
	add("06766264", "{\"term\":\"axiom\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06766264\", \"07167656\"]}");
	add("06766514", "{\"term\":\"assumption\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00084080\", \"04845958\", \"07372466\", \"15218743\", \"00083690\", \"05900703\", \"06766514\"]}");
	add("06766514", "{\"term\":\"premise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766514\"]}");
	add("06766514", "{\"term\":\"premiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766514\"]}");
	add("06766895", "{\"term\":\"major premise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766895\"]}");
	add("06766895", "{\"term\":\"major premiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06766895\"]}");
	add("06767126", "{\"term\":\"minor premise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767126\"]}");
	add("06767126", "{\"term\":\"minor premiss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767126\"]}");
	add("06767126", "{\"term\":\"subsumption\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05743947\", \"06767126\"]}");
	add("06767369", "{\"term\":\"major term\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767369\"]}");
	add("06767527", "{\"term\":\"minor term\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767527\"]}");
	add("06767683", "{\"term\":\"middle term\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767683\"]}");
	add("06767867", "{\"term\":\"specious argument\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06767867\"]}");
	add("06768053", "{\"term\":\"vicious circle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06768053\", \"13594571\"]}");
	add("06768165", "{\"term\":\"thesis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06420728\", \"06768165\"]}");
	add("06768279", "{\"term\":\"condition\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"05806871\", \"06783666\", \"13946473\", \"14569829\", \"05831106\", \"13943462\", \"06768279\", \"13943868\"]}");
	add("06768279", "{\"term\":\"precondition\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05901487\", \"05901963\", \"06768279\"]}");
	add("06768279", "{\"term\":\"stipulation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01151798\", \"06768279\", \"07231421\"]}");
	add("06768487", "{\"term\":\"boundary condition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06768487\"]}");
	add("06768658", "{\"term\":\"provision\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"13388621\", \"05802702\", \"01059124\", \"06768658\"]}");
	add("06768658", "{\"term\":\"proviso\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06768658\"]}");
	add("06768822", "{\"term\":\"scenario\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06768822\", \"08585959\", \"07025251\"]}");
	add("06768978", "{\"term\":\"quotation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01032674\", \"06768978\", \"06625409\", \"06776392\"]}");
	add("06769118", "{\"term\":\"falsehood\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00752233\", \"06769118\"]}");
	add("06769118", "{\"term\":\"falsity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06769118\", \"13983750\"]}");
	add("06769118", "{\"term\":\"untruth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06769118\"]}");
	add("06769391", "{\"term\":\"dodge\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06769391\", \"00060715\", \"05914396\"]}");
	add("06769391", "{\"term\":\"dodging\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00204602\", \"06769391\", \"00742010\"]}");
	add("06769391", "{\"term\":\"scheme\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05900179\", \"05936599\", \"08452398\", \"06769391\", \"05913942\"]}");
	add("06769542", "{\"term\":\"lie\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08641771\", \"11151798\", \"06769542\"]}");
	add("06769542", "{\"term\":\"prevarication\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00753287\", \"04832614\", \"06769542\"]}");
	add("06769768", "{\"term\":\"fib\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06769768\"]}");
	add("06769768", "{\"term\":\"story\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"06769768\", \"06694296\", \"06526084\", \"03370837\", \"06381452\", \"07235754\"]}");
	add("06769768", "{\"term\":\"tale\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06769768\", \"07235754\"]}");
	add("06769768", "{\"term\":\"taradiddle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06623500\", \"06769768\"]}");
	add("06769768", "{\"term\":\"tarradiddle\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06623500\", \"06769768\"]}");
 	}  	private static void add(final String ID, final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(ID)) ? map.get(ID) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(ID, list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> ids() { 		return map.keySet(); 	} }