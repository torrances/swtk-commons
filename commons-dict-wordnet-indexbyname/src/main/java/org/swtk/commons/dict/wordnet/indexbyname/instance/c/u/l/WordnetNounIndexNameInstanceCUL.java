package org.swtk.commons.dict.wordnet.indexbyname.instance.c.u.l;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceCUL {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"cul\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03151115\"]}");
	add("{\"term\":\"culbertson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10936745\"]}");
	add("{\"term\":\"culcita\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13212216\"]}");
	add("{\"term\":\"culdoscope\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03151226\"]}");
	add("{\"term\":\"culdoscopy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00643847\"]}");
	add("{\"term\":\"culebra\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08771245\"]}");
	add("{\"term\":\"culex\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02204410\"]}");
	add("{\"term\":\"culiacan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08760958\"]}");
	add("{\"term\":\"culicidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02202651\"]}");
	add("{\"term\":\"cull\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05798577\"]}");
	add("{\"term\":\"cullender\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03070853\"]}");
	add("{\"term\":\"cullis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03151353\"]}");
	add("{\"term\":\"culm\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13184369\"]}");
	add("{\"term\":\"culmination\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00211959\", \"06385370\", \"08565814\", \"15316435\"]}");
	add("{\"term\":\"culotte\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03151443\"]}");
	add("{\"term\":\"culpability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14014445\"]}");
	add("{\"term\":\"culpableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14014445\"]}");
	add("{\"term\":\"culprit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10436913\"]}");
	add("{\"term\":\"cult\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"05957131\", \"05957404\", \"08168236\", \"05759170\", \"08168497\"]}");
	add("{\"term\":\"cultism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01046545\", \"01209264\"]}");
	add("{\"term\":\"cultist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10002055\", \"10001900\"]}");
	add("{\"term\":\"cultivar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13105594\"]}");
	add("{\"term\":\"cultivation\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00917854\", \"13475491\", \"14483408\", \"00917553\", \"01131684\"]}");
	add("{\"term\":\"cultivator\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03151512\", \"09799231\"]}");
	add("{\"term\":\"culturati\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08404226\"]}");
	add("{\"term\":\"culture\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00919573\", \"06204144\", \"14483408\", \"00922324\", \"05993821\", \"05759791\", \"08304765\"]}");
	add("{\"term\":\"cultus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05957131\"]}");
	add("{\"term\":\"culverin\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03151750\", \"03151822\"]}");
	add("{\"term\":\"culvert\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03151946\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }