package org.swtk.commons.dict.wordnet.indexbyname.instance.n.e.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceNEC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"nec\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14160350\"]}");
	add("{\"term\":\"necessary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09390100\"]}");
	add("{\"term\":\"necessitarian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10370627\"]}");
	add("{\"term\":\"necessity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09390100\", \"14474157\"]}");
	add("{\"term\":\"neck\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03819652\", \"03819888\", \"07677102\", \"09390630\", \"05554173\"]}");
	add("{\"term\":\"neck bone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05596201\"]}");
	add("{\"term\":\"neck brace\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820179\"]}");
	add("{\"term\":\"neck exercise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00631766\"]}");
	add("{\"term\":\"neck of the woods\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08658688\"]}");
	add("{\"term\":\"neck opening\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03819652\"]}");
	add("{\"term\":\"neck ruff\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03028429\"]}");
	add("{\"term\":\"neck sweetbread\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07668490\"]}");
	add("{\"term\":\"neckar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09390724\"]}");
	add("{\"term\":\"neckar river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09390724\"]}");
	add("{\"term\":\"neckband\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03028565\", \"03072185\", \"03820068\"]}");
	add("{\"term\":\"neckcloth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820267\"]}");
	add("{\"term\":\"necker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10370795\"]}");
	add("{\"term\":\"neckerchief\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820357\"]}");
	add("{\"term\":\"necking\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00855630\", \"03453435\"]}");
	add("{\"term\":\"necklace\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820446\"]}");
	add("{\"term\":\"necklace poplar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12753726\"]}");
	add("{\"term\":\"necklace tree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12574078\"]}");
	add("{\"term\":\"necklet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820689\"]}");
	add("{\"term\":\"neckline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03820818\"]}");
	add("{\"term\":\"neckpiece\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03821022\"]}");
	add("{\"term\":\"necktie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03821155\"]}");
	add("{\"term\":\"neckwear\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03821545\"]}");
	add("{\"term\":\"necrobiosis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11506578\"]}");
	add("{\"term\":\"necrobiosis lipoidica\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14254070\"]}");
	add("{\"term\":\"necrobiosis lipoidica diabeticorum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14254070\"]}");
	add("{\"term\":\"necrology\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06505917\", \"06760847\"]}");
	add("{\"term\":\"necrolysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13541832\"]}");
	add("{\"term\":\"necromancer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10370883\", \"10645222\"]}");
	add("{\"term\":\"necromancy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05785436\", \"05987679\"]}");
	add("{\"term\":\"necromania\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09205547\"]}");
	add("{\"term\":\"necrophagia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00844080\"]}");
	add("{\"term\":\"necrophagy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00844080\"]}");
	add("{\"term\":\"necrophilia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09205547\"]}");
	add("{\"term\":\"necrophilism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09205547\"]}");
	add("{\"term\":\"necropolis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08538806\"]}");
	add("{\"term\":\"necropsy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00142216\"]}");
	add("{\"term\":\"necrosis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11507108\"]}");
	add("{\"term\":\"necrotizing enteritis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14368573\"]}");
	add("{\"term\":\"necrotizing enterocolitis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14160350\"]}");
	add("{\"term\":\"nectar\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07625904\", \"07940516\", \"14870949\"]}");
	add("{\"term\":\"nectarine\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07767124\", \"12668957\"]}");
	add("{\"term\":\"nectarine tree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12668957\"]}");
	add("{\"term\":\"nectary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11704307\"]}");
	add("{\"term\":\"necturus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01637033\"]}");
	add("{\"term\":\"necturus maculosus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01637163\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }