package org.swtk.commons.dict.wordnet.indexbyname.instance.t.e.x;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceTEX {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"texan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09765165\"]}");
	add("{\"term\":\"texarkana\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09083085\", \"09169188\"]}");
	add("{\"term\":\"texas\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09164256\"]}");
	add("{\"term\":\"texas armadillo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02457425\"]}");
	add("{\"term\":\"texas bluebonnet\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"12567720\", \"12568008\"]}");
	add("{\"term\":\"texas chachalaca\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01803274\"]}");
	add("{\"term\":\"texas fever\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14299583\"]}");
	add("{\"term\":\"texas horned lizard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01684813\"]}");
	add("{\"term\":\"texas independence day\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15212635\"]}");
	add("{\"term\":\"texas leaguer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00151048\"]}");
	add("{\"term\":\"texas longhorn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02407084\"]}");
	add("{\"term\":\"texas millet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12148285\"]}");
	add("{\"term\":\"texas purple spike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12089718\"]}");
	add("{\"term\":\"texas ranger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10724361\"]}");
	add("{\"term\":\"texas snowbell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12798652\"]}");
	add("{\"term\":\"texas snowbells\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12798652\"]}");
	add("{\"term\":\"texas star\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"12012948\", \"12319154\"]}");
	add("{\"term\":\"texas storksbill\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12710252\"]}");
	add("{\"term\":\"texas toad\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01649944\"]}");
	add("{\"term\":\"texas tortoise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01674346\"]}");
	add("{\"term\":\"text\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06400222\", \"06426015\", \"07187208\", \"06399623\"]}");
	add("{\"term\":\"text edition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06426015\"]}");
	add("{\"term\":\"text editor\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06588903\", \"09984189\"]}");
	add("{\"term\":\"text file\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06522968\"]}");
	add("{\"term\":\"textbook\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06426015\"]}");
	add("{\"term\":\"textile\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03314753\"]}");
	add("{\"term\":\"textile machine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04424315\"]}");
	add("{\"term\":\"textile mill\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04424496\"]}");
	add("{\"term\":\"textile screw pine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12175526\"]}");
	add("{\"term\":\"textual criticism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06386631\"]}");
	add("{\"term\":\"textual matter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06399623\"]}");
	add("{\"term\":\"texture\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"04941397\", \"04957714\", \"04991256\", \"05858194\", \"04954054\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }