package org.swtk.commons.dict.wordnet.indexbyname.instance.e.x.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceEXC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"excalibur\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03306975\"]}");
	add("{\"term\":\"excavation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00924141\", \"03307066\", \"08567651\", \"00943790\"]}");
	add("{\"term\":\"excavator\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04002774\", \"09640322\"]}");
	add("{\"term\":\"exceedance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05099897\"]}");
	add("{\"term\":\"excellence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05860309\", \"04736044\"]}");
	add("{\"term\":\"excellency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05860309\", \"10088735\"]}");
	add("{\"term\":\"excelsior\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15001193\"]}");
	add("{\"term\":\"exception\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07224193\", \"05829606\", \"05715216\"]}");
	add("{\"term\":\"excerpt\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06412153\"]}");
	add("{\"term\":\"excerption\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06412153\"]}");
	add("{\"term\":\"excess\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"01075579\", \"14475760\", \"05125737\", \"05127014\"]}");
	add("{\"term\":\"excessiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05125737\"]}");
	add("{\"term\":\"exchange\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00167884\", \"00168099\", \"00197334\", \"01095009\", \"01169007\", \"03307432\", \"02998465\", \"01111372\", \"01168748\", \"07149414\", \"11429652\"]}");
	add("{\"term\":\"exchangeability\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04743169\"]}");
	add("{\"term\":\"exchanger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088927\"]}");
	add("{\"term\":\"exchequer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13378158\"]}");
	add("{\"term\":\"excise\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13337354\"]}");
	add("{\"term\":\"exciseman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10712548\"]}");
	add("{\"term\":\"excision\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00116623\", \"00209126\", \"00394177\", \"06439886\"]}");
	add("{\"term\":\"excitability\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04636207\", \"05661555\"]}");
	add("{\"term\":\"excitableness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04636207\"]}");
	add("{\"term\":\"excitant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04327264\"]}");
	add("{\"term\":\"excitation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01263360\", \"14059838\", \"14060493\"]}");
	add("{\"term\":\"excitement\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00555337\", \"01263360\", \"14060493\", \"07543600\"]}");
	add("{\"term\":\"exclaiming\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07140231\"]}");
	add("{\"term\":\"exclamation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07117468\", \"07224528\", \"07140231\"]}");
	add("{\"term\":\"exclusion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00207776\", \"05715216\", \"14437397\", \"13958260\"]}");
	add("{\"term\":\"exclusive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06695928\"]}");
	add("{\"term\":\"exclusiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04896532\"]}");
	add("{\"term\":\"excogitation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05641230\", \"05800850\"]}");
	add("{\"term\":\"excogitator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10088611\"]}");
	add("{\"term\":\"excommunication\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00209126\", \"14437397\"]}");
	add("{\"term\":\"excoriation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07247874\", \"14310051\"]}");
	add("{\"term\":\"excrement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14878134\"]}");
	add("{\"term\":\"excrescence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05611405\", \"13917127\"]}");
	add("{\"term\":\"excreta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14878134\"]}");
	add("{\"term\":\"excreting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13494300\"]}");
	add("{\"term\":\"excretion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14878134\", \"13494300\"]}");
	add("{\"term\":\"excruciation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00423554\", \"14347683\"]}");
	add("{\"term\":\"exculpation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01230180\", \"06754000\"]}");
	add("{\"term\":\"excursion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00311027\", \"00312635\"]}");
	add("{\"term\":\"excursionist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10616097\"]}");
	add("{\"term\":\"excursus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06613037\"]}");
	add("{\"term\":\"excuse\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05829462\", \"06638953\", \"06754000\"]}");
	add("{\"term\":\"excuser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10418998\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }