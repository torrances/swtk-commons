package org.swtk.commons.dict.wordnet.indexbyname.instance.r.e.i;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceREI {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"reich\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"11277021\", \"11277149\", \"08186472\"]}");
	add("{\"term\":\"reichstein\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11277385\"]}");
	add("{\"term\":\"reid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11277537\"]}");
	add("{\"term\":\"reification\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00934113\", \"00934619\"]}");
	add("{\"term\":\"reign\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"14466998\", \"15285625\", \"15285775\"]}");
	add("{\"term\":\"reign of terror\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"15285247\", \"15285462\"]}");
	add("{\"term\":\"reimbursement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13311025\"]}");
	add("{\"term\":\"reimposition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01150893\"]}");
	add("{\"term\":\"reims\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08957367\"]}");
	add("{\"term\":\"rein\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05204842\", \"04079663\"]}");
	add("{\"term\":\"rein orchid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12086278\"]}");
	add("{\"term\":\"rein orchis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12086278\"]}");
	add("{\"term\":\"reincarnation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06200947\", \"07335847\", \"10537596\"]}");
	add("{\"term\":\"reincarnationism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05977420\"]}");
	add("{\"term\":\"reindeer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02436556\"]}");
	add("{\"term\":\"reindeer lichen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13011944\"]}");
	add("{\"term\":\"reindeer moss\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13011944\"]}");
	add("{\"term\":\"reinforced concrete\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14828967\"]}");
	add("{\"term\":\"reinforcement\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"01222041\", \"04343172\", \"05836876\", \"06662983\", \"00973567\"]}");
	add("{\"term\":\"reinforcer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05836876\"]}");
	add("{\"term\":\"reinforcing stimulus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05836876\"]}");
	add("{\"term\":\"reinhold niebuhr\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11226875\"]}");
	add("{\"term\":\"reinstatement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00402267\", \"13967966\"]}");
	add("{\"term\":\"reinsurance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13369471\"]}");
	add("{\"term\":\"reinterpretation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00101709\", \"05937519\"]}");
	add("{\"term\":\"reintroduction\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07232333\"]}");
	add("{\"term\":\"reissue\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06280961\"]}");
	add("{\"term\":\"reit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08089123\"]}");
	add("{\"term\":\"reiter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11277687\"]}");
	add("{\"term\":\"reiteration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01021314\"]}");
	add("{\"term\":\"reithrodontomys\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02338781\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }