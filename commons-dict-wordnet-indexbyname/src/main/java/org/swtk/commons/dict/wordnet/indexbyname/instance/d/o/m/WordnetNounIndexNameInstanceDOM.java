package org.swtk.commons.dict.wordnet.indexbyname.instance.d.o.m;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDOM {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"dom pedro\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07928333\"]}");
	add("{\"term\":\"domain\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06008444\", \"07982551\", \"08016560\", \"08574028\", \"14537641\"]}");
	add("{\"term\":\"domain name\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06858353\"]}");
	add("{\"term\":\"domain of a function\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08016560\"]}");
	add("{\"term\":\"domatium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11554450\"]}");
	add("{\"term\":\"dombeya\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12218418\"]}");
	add("{\"term\":\"dome\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03225216\", \"03225395\", \"05547087\", \"13894711\"]}");
	add("{\"term\":\"domed stadium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03225395\"]}");
	add("{\"term\":\"domenikos theotocopoulos\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10976369\"]}");
	add("{\"term\":\"domesday book\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06515377\"]}");
	add("{\"term\":\"domestic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043844\"]}");
	add("{\"term\":\"domestic animal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01320032\"]}");
	add("{\"term\":\"domestic ass\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02392211\"]}");
	add("{\"term\":\"domestic carp\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01442449\"]}");
	add("{\"term\":\"domestic cat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02124460\"]}");
	add("{\"term\":\"domestic dog\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02086723\"]}");
	add("{\"term\":\"domestic flight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00302554\"]}");
	add("{\"term\":\"domestic fowl\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01792381\"]}");
	add("{\"term\":\"domestic goat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02419716\"]}");
	add("{\"term\":\"domestic help\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043844\"]}");
	add("{\"term\":\"domestic llama\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02440602\"]}");
	add("{\"term\":\"domestic partner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044087\"]}");
	add("{\"term\":\"domestic pigeon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01817011\"]}");
	add("{\"term\":\"domestic prelate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044346\"]}");
	add("{\"term\":\"domestic relations court\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08349017\"]}");
	add("{\"term\":\"domestic science\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06158795\"]}");
	add("{\"term\":\"domestic sheep\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02415777\"]}");
	add("{\"term\":\"domestic silkworm moth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02303206\"]}");
	add("{\"term\":\"domestic terrorism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00765140\"]}");
	add("{\"term\":\"domestic violence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00967829\"]}");
	add("{\"term\":\"domesticated animal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01320032\"]}");
	add("{\"term\":\"domesticated silkworm moth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02303206\"]}");
	add("{\"term\":\"domestication\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00195106\", \"04913019\", \"13490157\"]}");
	add("{\"term\":\"domesticity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00409896\", \"05216381\"]}");
	add("{\"term\":\"domicile\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03264208\", \"08576692\"]}");
	add("{\"term\":\"domiciliation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03200169\"]}");
	add("{\"term\":\"dominance\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05203850\", \"11433914\", \"14465291\", \"05005582\"]}");
	add("{\"term\":\"dominant\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05445706\", \"06871316\"]}");
	add("{\"term\":\"dominant allele\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05445706\"]}");
	add("{\"term\":\"dominant gene\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05445176\"]}");
	add("{\"term\":\"domination\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14465996\", \"01130711\"]}");
	add("{\"term\":\"dominatrix\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044509\"]}");
	add("{\"term\":\"domine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("{\"term\":\"dominee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("{\"term\":\"domineeringness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04895983\"]}");
	add("{\"term\":\"domingo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10958191\"]}");
	add("{\"term\":\"domingo de guzman\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10958355\"]}");
	add("{\"term\":\"dominic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10958355\"]}");
	add("{\"term\":\"dominica\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08780843\", \"08781026\"]}");
	add("{\"term\":\"dominican\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10044662\", \"10798013\"]}");
	add("{\"term\":\"dominican dollar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13695185\"]}");
	add("{\"term\":\"dominican mahogany\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12720682\"]}");
	add("{\"term\":\"dominican monetary unit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13714256\"]}");
	add("{\"term\":\"dominican order\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08166167\"]}");
	add("{\"term\":\"dominican peso\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13714383\"]}");
	add("{\"term\":\"dominican republic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08769854\"]}");
	add("{\"term\":\"dominick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01796206\"]}");
	add("{\"term\":\"dominicus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15188844\"]}");
	add("{\"term\":\"dominie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("{\"term\":\"dominion\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08184148\", \"08569713\", \"14466399\"]}");
	add("{\"term\":\"dominion day\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15225149\"]}");
	add("{\"term\":\"dominique\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01796206\"]}");
	add("{\"term\":\"domino\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03225505\", \"03225762\", \"03225908\", \"10958632\"]}");
	add("{\"term\":\"domino effect\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11434155\"]}");
	add("{\"term\":\"domino theory\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06227401\"]}");
	add("{\"term\":\"dominoes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00500488\"]}");
	add("{\"term\":\"dominos\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00500488\"]}");
	add("{\"term\":\"dominus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10044785\"]}");
	add("{\"term\":\"domitian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10958813\"]}");
	add("{\"term\":\"domoic acid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14616081\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }