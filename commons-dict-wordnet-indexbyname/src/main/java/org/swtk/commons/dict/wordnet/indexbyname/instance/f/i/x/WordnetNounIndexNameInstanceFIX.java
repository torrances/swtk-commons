package org.swtk.commons.dict.wordnet.indexbyname.instance.f.i.x;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceFIX {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"fix\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00156307\", \"00215015\", \"00267650\", \"00324088\", \"14432893\"]}");
	add("{\"term\":\"fixation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00277186\", \"01262862\", \"05708366\", \"14526956\"]}");
	add("{\"term\":\"fixative\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03358797\", \"14893328\"]}");
	add("{\"term\":\"fixedness\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04747895\", \"04784337\", \"14029975\"]}");
	add("{\"term\":\"fixer\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03759543\", \"10328399\", \"14893478\", \"10113815\"]}");
	add("{\"term\":\"fixing\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00277186\", \"00693759\", \"03328648\", \"00267650\"]}");
	add("{\"term\":\"fixings\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03359196\", \"07825072\"]}");
	add("{\"term\":\"fixity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04749047\", \"04784337\"]}");
	add("{\"term\":\"fixture\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00267650\", \"04784337\", \"10536998\", \"03359459\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }