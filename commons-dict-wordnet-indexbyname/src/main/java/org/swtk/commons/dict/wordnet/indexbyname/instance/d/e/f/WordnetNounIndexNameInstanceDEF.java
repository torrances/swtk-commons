package org.swtk.commons.dict.wordnet.indexbyname.instance.d.e.f;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDEF {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"defacement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00404274\"]}");
	add("{\"term\":\"defalcation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00778229\", \"13294761\"]}");
	add("{\"term\":\"defalcator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10071145\"]}");
	add("{\"term\":\"defamation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01222825\", \"06732328\"]}");
	add("{\"term\":\"defamer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10018655\"]}");
	add("{\"term\":\"default\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"05799872\", \"13321164\", \"13321434\", \"00068217\"]}");
	add("{\"term\":\"defaulter\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10018963\", \"10019052\", \"10019203\"]}");
	add("{\"term\":\"defeat\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07556254\", \"07490504\"]}");
	add("{\"term\":\"defeated\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07962721\"]}");
	add("{\"term\":\"defeatism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07557948\"]}");
	add("{\"term\":\"defeatist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10019315\"]}");
	add("{\"term\":\"defecation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13480291\"]}");
	add("{\"term\":\"defecator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10019527\"]}");
	add("{\"term\":\"defect\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04699505\", \"14487787\", \"05170169\", \"14487589\"]}");
	add("{\"term\":\"defection\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14436815\", \"00056135\"]}");
	add("{\"term\":\"defectiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14495883\"]}");
	add("{\"term\":\"defector\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10026496\"]}");
	add("{\"term\":\"defence\", \"synsetCount\":11, \"upperType\":\"NOUN\", \"ids\":[\"00825193\", \"00825411\", \"00956422\", \"01201240\", \"03176022\", \"06753339\", \"07215473\", \"08080966\", \"08081359\", \"08098280\", \"13480525\"]}");
	add("{\"term\":\"defencelessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05050245\"]}");
	add("{\"term\":\"defendant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09781524\"]}");
	add("{\"term\":\"defender\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09638241\", \"09637714\"]}");
	add("{\"term\":\"defenestration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00117809\"]}");
	add("{\"term\":\"defense\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"00825193\", \"01201240\", \"03176022\", \"08080966\", \"07215473\", \"08081359\", \"08148512\", \"13480525\", \"06753339\", \"08098280\", \"00825411\", \"00956422\"]}");
	add("{\"term\":\"defenselessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05050245\"]}");
	add("{\"term\":\"defensibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05210222\"]}");
	add("{\"term\":\"defensive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06204984\"]}");
	add("{\"term\":\"defensiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04850660\"]}");
	add("{\"term\":\"deference\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04648510\", \"04921016\", \"01231366\"]}");
	add("{\"term\":\"deferment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01068805\"]}");
	add("{\"term\":\"deferral\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01068805\", \"14037117\"]}");
	add("{\"term\":\"defervescence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07383082\"]}");
	add("{\"term\":\"defiance\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01172810\", \"07246603\", \"04915168\"]}");
	add("{\"term\":\"defibrillation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00700212\"]}");
	add("{\"term\":\"defibrillator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03176301\"]}");
	add("{\"term\":\"deficiency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05120433\", \"14472871\"]}");
	add("{\"term\":\"deficit\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"13417449\", \"13616793\", \"14473426\", \"05121671\"]}");
	add("{\"term\":\"defilade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03176576\"]}");
	add("{\"term\":\"defile\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09286818\"]}");
	add("{\"term\":\"defilement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14521988\"]}");
	add("{\"term\":\"defiler\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10471414\"]}");
	add("{\"term\":\"defining\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13576649\"]}");
	add("{\"term\":\"definiteness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04761492\"]}");
	add("{\"term\":\"definition\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04710305\", \"06757091\"]}");
	add("{\"term\":\"deflagration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13471590\"]}");
	add("{\"term\":\"deflation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00362758\", \"13481024\", \"13520368\"]}");
	add("{\"term\":\"deflator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13278691\"]}");
	add("{\"term\":\"deflection\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00351206\", \"05018461\", \"07325457\", \"07425483\", \"14528328\"]}");
	add("{\"term\":\"deflector\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03176704\"]}");
	add("{\"term\":\"deflexion\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00351206\", \"05018461\", \"07325457\", \"07425483\"]}");
	add("{\"term\":\"defloration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00846655\", \"00968822\"]}");
	add("{\"term\":\"defoe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10947021\"]}");
	add("{\"term\":\"defoliant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14853097\"]}");
	add("{\"term\":\"defoliation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00280518\", \"13481237\"]}");
	add("{\"term\":\"defoliator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02163990\"]}");
	add("{\"term\":\"deforestation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01264934\", \"14542699\"]}");
	add("{\"term\":\"deformation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00405547\", \"07372660\", \"07448573\"]}");
	add("{\"term\":\"deformity\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04698526\", \"14236994\"]}");
	add("{\"term\":\"defrauder\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09974494\"]}");
	add("{\"term\":\"defrayal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01122769\"]}");
	add("{\"term\":\"defrayment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01122769\"]}");
	add("{\"term\":\"defroster\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03176877\"]}");
	add("{\"term\":\"deftness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05650020\"]}");
	add("{\"term\":\"defunctness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13986368\"]}");
	add("{\"term\":\"defusing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00234481\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }