package org.swtk.commons.dict.wordnet.indexbyname.instance.d.i.g;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDIG {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"dig\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00136131\", \"00943790\", \"04700905\", \"06780713\", \"08567651\"]}");
	add("{\"term\":\"digenesis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11444703\"]}");
	add("{\"term\":\"digest\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06605303\", \"06605746\"]}");
	add("{\"term\":\"digester\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03200016\"]}");
	add("{\"term\":\"digestibility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05004810\"]}");
	add("{\"term\":\"digestibleness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05004810\"]}");
	add("{\"term\":\"digestion\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05761376\", \"13487012\", \"13487201\"]}");
	add("{\"term\":\"digestive\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14858884\"]}");
	add("{\"term\":\"digger\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04002774\", \"10032734\"]}");
	add("{\"term\":\"digging\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00943790\"]}");
	add("{\"term\":\"diggings\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03200169\", \"03200343\"]}");
	add("{\"term\":\"digit\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05573730\", \"13675079\", \"13763162\"]}");
	add("{\"term\":\"digitalin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15084698\"]}");
	add("{\"term\":\"digitalis\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"12903539\", \"15084698\"]}");
	add("{\"term\":\"digitalisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00711096\"]}");
	add("{\"term\":\"digitalization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00711096\"]}");
	add("{\"term\":\"digitaria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12137398\"]}");
	add("{\"term\":\"digitigrade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02509779\"]}");
	add("{\"term\":\"digitisation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05811220\"]}");
	add("{\"term\":\"digitiser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03202130\"]}");
	add("{\"term\":\"digitization\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05811220\"]}");
	add("{\"term\":\"digitizer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03202130\"]}");
	add("{\"term\":\"digitoxin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03202350\"]}");
	add("{\"term\":\"dignitary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10768288\"]}");
	add("{\"term\":\"dignity\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"14455328\", \"04917861\", \"04894076\"]}");
	add("{\"term\":\"digoxin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03202488\"]}");
	add("{\"term\":\"digram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06843888\"]}");
	add("{\"term\":\"digraph\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06843888\"]}");
	add("{\"term\":\"digression\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00311027\", \"00351206\", \"06613037\"]}");
	add("{\"term\":\"digs\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03200169\", \"03200343\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }