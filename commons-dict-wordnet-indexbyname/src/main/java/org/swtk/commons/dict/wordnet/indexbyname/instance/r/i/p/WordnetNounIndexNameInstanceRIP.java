package org.swtk.commons.dict.wordnet.indexbyname.instance.r.i.p;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceRIP {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"rip\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00392215\", \"07419184\", \"09433806\", \"10525535\"]}");
	add("{\"term\":\"riparia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01598783\"]}");
	add("{\"term\":\"ripcord\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04101009\", \"04101154\"]}");
	add("{\"term\":\"ripeness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14449005\"]}");
	add("{\"term\":\"ripening\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13573168\", \"13533441\"]}");
	add("{\"term\":\"riposte\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01177315\", \"07214582\"]}");
	add("{\"term\":\"ripper\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10551809\"]}");
	add("{\"term\":\"ripple\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07360041\", \"07359263\"]}");
	add("{\"term\":\"rippling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07359263\"]}");
	add("{\"term\":\"ripsaw\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04101702\"]}");
	add("{\"term\":\"riptide\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07419043\", \"07419184\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }