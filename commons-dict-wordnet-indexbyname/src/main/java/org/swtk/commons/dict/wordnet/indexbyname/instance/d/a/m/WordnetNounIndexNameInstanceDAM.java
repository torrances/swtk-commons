package org.swtk.commons.dict.wordnet.indexbyname.instance.d.a.m;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDAM {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"dam\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01326134\", \"13681341\", \"03164975\"]}");
	add("{\"term\":\"dama\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02435836\"]}");
	add("{\"term\":\"dama dama\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02435949\"]}");
	add("{\"term\":\"damage\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00745429\", \"13324337\", \"00403900\", \"07354253\", \"07435370\"]}");
	add("{\"term\":\"damage control\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00805932\"]}");
	add("{\"term\":\"damages\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13311699\"]}");
	add("{\"term\":\"damaliscus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02424895\"]}");
	add("{\"term\":\"damaliscus lunatus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02425037\"]}");
	add("{\"term\":\"damar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14919958\"]}");
	add("{\"term\":\"damaraland mole rat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02372789\"]}");
	add("{\"term\":\"damascene\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03165259\", \"09753012\"]}");
	add("{\"term\":\"damascus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09056411\"]}");
	add("{\"term\":\"damascus steel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14827608\"]}");
	add("{\"term\":\"damask\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03165406\", \"03165560\"]}");
	add("{\"term\":\"damask rose\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12642171\"]}");
	add("{\"term\":\"damask steel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14827608\"]}");
	add("{\"term\":\"damask violet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11909269\"]}");
	add("{\"term\":\"dame\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10008828\", \"10008583\"]}");
	add("{\"term\":\"dame agatha mary clarissa christie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10916739\"]}");
	add("{\"term\":\"dame alice ellen terry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11356539\"]}");
	add("{\"term\":\"dame alicia markova\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11177130\"]}");
	add("{\"term\":\"dame barbara hepworth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11064163\"]}");
	add("{\"term\":\"dame daphne du maurier\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10965255\"]}");
	add("{\"term\":\"dame edith louisa sitwell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11324006\"]}");
	add("{\"term\":\"dame edith sitwell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11324006\"]}");
	add("{\"term\":\"dame ellen terry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11356539\"]}");
	add("{\"term\":\"dame jean iris murdoch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11216754\"]}");
	add("{\"term\":\"dame joan sutherland\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11345862\"]}");
	add("{\"term\":\"dame kiri janette te kanawa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11354768\"]}");
	add("{\"term\":\"dame kiri te kanawa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11354768\"]}");
	add("{\"term\":\"dame margot fonteyn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10994447\"]}");
	add("{\"term\":\"dame muriel spark\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11329608\"]}");
	add("{\"term\":\"dame myra hess\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11068104\"]}");
	add("{\"term\":\"dame nellie melba\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11192035\"]}");
	add("{\"term\":\"dame rebecca west\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11402393\"]}");
	add("{\"term\":\"dame sybil thorndike\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11361262\"]}");
	add("{\"term\":\"damgalnunna\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09540477\"]}");
	add("{\"term\":\"daminozide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14732692\"]}");
	add("{\"term\":\"damkina\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09540477\"]}");
	add("{\"term\":\"dammar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14919958\"]}");
	add("{\"term\":\"dammar pine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11667757\"]}");
	add("{\"term\":\"dammar resin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14919958\"]}");
	add("{\"term\":\"damn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05148040\"]}");
	add("{\"term\":\"damnation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14482041\", \"07248202\"]}");
	add("{\"term\":\"damned\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07962076\"]}");
	add("{\"term\":\"damocles\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10941323\"]}");
	add("{\"term\":\"damoiselle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10008706\"]}");
	add("{\"term\":\"damon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10941631\"]}");
	add("{\"term\":\"damon and pythias\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09583555\"]}");
	add("{\"term\":\"damon runyon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11293897\"]}");
	add("{\"term\":\"damosel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10008706\"]}");
	add("{\"term\":\"damourite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14697830\"]}");
	add("{\"term\":\"damozel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10008706\"]}");
	add("{\"term\":\"damp\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14559507\"]}");
	add("{\"term\":\"damp course\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03165894\"]}");
	add("{\"term\":\"dampener\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03165682\"]}");
	add("{\"term\":\"dampening\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00278884\"]}");
	add("{\"term\":\"damper\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01148418\", \"03166116\", \"03166391\"]}");
	add("{\"term\":\"damper block\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03166559\"]}");
	add("{\"term\":\"damping off\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14303653\"]}");
	add("{\"term\":\"damping off fungus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13003350\"]}");
	add("{\"term\":\"dampness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14559507\"]}");
	add("{\"term\":\"damsel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10008706\"]}");
	add("{\"term\":\"damselfish\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02609014\"]}");
	add("{\"term\":\"damselfly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02271505\"]}");
	add("{\"term\":\"damson\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07767713\"]}");
	add("{\"term\":\"damson plum\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"07767713\", \"12660671\", \"12794677\"]}");
	add("{\"term\":\"damson plum tree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12660671\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }