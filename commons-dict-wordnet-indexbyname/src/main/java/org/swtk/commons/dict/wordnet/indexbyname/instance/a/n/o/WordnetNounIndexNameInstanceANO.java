package org.swtk.commons.dict.wordnet.indexbyname.instance.a.n.o;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceANO {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"ano\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08036995\"]}");
	add("{\"term\":\"anoa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02411684\"]}");
	add("{\"term\":\"anobiidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02180296\"]}");
	add("{\"term\":\"anode\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02717446\", \"02717226\"]}");
	add("{\"term\":\"anodonta\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01967752\"]}");
	add("{\"term\":\"anodyne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02710542\"]}");
	add("{\"term\":\"anoectochilus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12065473\"]}");
	add("{\"term\":\"anoestrum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14061964\"]}");
	add("{\"term\":\"anoestrus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14061964\"]}");
	add("{\"term\":\"anogramma\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13229036\"]}");
	add("{\"term\":\"anointer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09815080\"]}");
	add("{\"term\":\"anointing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00714085\"]}");
	add("{\"term\":\"anointment\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00714085\"]}");
	add("{\"term\":\"anole\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01685355\"]}");
	add("{\"term\":\"anolis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01685229\"]}");
	add("{\"term\":\"anomala\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02176223\"]}");
	add("{\"term\":\"anomalist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09629572\"]}");
	add("{\"term\":\"anomalopidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01454165\"]}");
	add("{\"term\":\"anomalops\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01454504\"]}");
	add("{\"term\":\"anomalopteryx\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01526134\"]}");
	add("{\"term\":\"anomalousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14529423\"]}");
	add("{\"term\":\"anomaly\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08640338\", \"09629719\", \"14529423\"]}");
	add("{\"term\":\"anomia\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01964991\", \"14122145\"]}");
	add("{\"term\":\"anomie\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04859096\", \"14439302\"]}");
	add("{\"term\":\"anomiidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01964864\"]}");
	add("{\"term\":\"anomy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04859096\", \"14439302\"]}");
	add("{\"term\":\"anonym\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06349648\"]}");
	add("{\"term\":\"anonymity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14459751\"]}");
	add("{\"term\":\"anopheles\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02203904\"]}");
	add("{\"term\":\"anopheline\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02204149\"]}");
	add("{\"term\":\"anopia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14577465\"]}");
	add("{\"term\":\"anoplura\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02186349\"]}");
	add("{\"term\":\"anorak\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03896748\"]}");
	add("{\"term\":\"anorchia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14046320\"]}");
	add("{\"term\":\"anorchidism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14046320\"]}");
	add("{\"term\":\"anorchism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14046320\"]}");
	add("{\"term\":\"anorectic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09815192\"]}");
	add("{\"term\":\"anorexia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14079278\"]}");
	add("{\"term\":\"anorexic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09815192\"]}");
	add("{\"term\":\"anorgasmia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14080070\"]}");
	add("{\"term\":\"anorthite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14889818\"]}");
	add("{\"term\":\"anorthography\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14119430\"]}");
	add("{\"term\":\"anorthopia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14120803\"]}");
	add("{\"term\":\"anosmia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14576069\"]}");
	add("{\"term\":\"anostraca\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01997791\"]}");
	add("{\"term\":\"anouilh\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10838319\"]}");
	add("{\"term\":\"anova\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06040131\"]}");
	add("{\"term\":\"anovulant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03943171\"]}");
	add("{\"term\":\"anovulation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13453616\"]}");
	add("{\"term\":\"anoxemia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14526836\"]}");
	add("{\"term\":\"anoxia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14066725\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }