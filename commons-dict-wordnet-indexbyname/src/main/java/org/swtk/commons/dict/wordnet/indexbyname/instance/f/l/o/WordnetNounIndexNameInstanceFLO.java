package org.swtk.commons.dict.wordnet.indexbyname.instance.f.l.o;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceFLO {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"float\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02470212\", \"03369186\", \"03369445\", \"03369621\", \"07939274\", \"13357383\", \"15319328\"]}");
	add("{\"term\":\"floatation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01102052\", \"11548418\"]}");
	add("{\"term\":\"floater\", \"synsetCount\":8, \"upperType\":\"NOUN\", \"ids\":[\"06538115\", \"09304683\", \"10116389\", \"10116494\", \"10116624\", \"10764201\", \"13436554\", \"14388524\"]}");
	add("{\"term\":\"floating\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00444216\"]}");
	add("{\"term\":\"floatplane\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03370077\"]}");
	add("{\"term\":\"floc\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14610140\"]}");
	add("{\"term\":\"flocculation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13503390\"]}");
	add("{\"term\":\"floccule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14610140\"]}");
	add("{\"term\":\"flock\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"08007611\", \"08291486\", \"13796604\", \"08007398\", \"08007714\"]}");
	add("{\"term\":\"flodden\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01281185\", \"08904740\"]}");
	add("{\"term\":\"floe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09332074\"]}");
	add("{\"term\":\"flogger\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10116733\"]}");
	add("{\"term\":\"flogging\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01165537\"]}");
	add("{\"term\":\"flood\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"07417630\", \"01260222\", \"00330645\", \"03370220\", \"13797906\", \"11475008\"]}");
	add("{\"term\":\"floodgate\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04251743\", \"06257997\"]}");
	add("{\"term\":\"floodhead\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11475653\"]}");
	add("{\"term\":\"flooding\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00703671\"]}");
	add("{\"term\":\"floodlight\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03370220\"]}");
	add("{\"term\":\"floodplain\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09304820\"]}");
	add("{\"term\":\"floor\", \"synsetCount\":10, \"upperType\":\"NOUN\", \"ids\":[\"03371147\", \"03371310\", \"05183868\", \"07993043\", \"09305269\", \"09304990\", \"09305114\", \"06670863\", \"03370837\", \"03370438\"]}");
	add("{\"term\":\"floorboard\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03371567\", \"03371476\"]}");
	add("{\"term\":\"flooring\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14895521\", \"03370438\"]}");
	add("{\"term\":\"floorshow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00521728\"]}");
	add("{\"term\":\"floorwalker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10117031\"]}");
	add("{\"term\":\"floozie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10682754\"]}");
	add("{\"term\":\"floozy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10682754\"]}");
	add("{\"term\":\"flop\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00328336\", \"07379624\", \"10117246\", \"13503197\"]}");
	add("{\"term\":\"flophouse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03372167\"]}");
	add("{\"term\":\"floppy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03214631\"]}");
	add("{\"term\":\"flora\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00017402\", \"08453769\"]}");
	add("{\"term\":\"floreal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15202138\"]}");
	add("{\"term\":\"florence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09161391\", \"08830018\"]}");
	add("{\"term\":\"florentine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10117359\"]}");
	add("{\"term\":\"florescence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13460743\"]}");
	add("{\"term\":\"floret\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11690237\"]}");
	add("{\"term\":\"florey\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10993489\"]}");
	add("{\"term\":\"floriculture\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00923213\"]}");
	add("{\"term\":\"florida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09094188\"]}");
	add("{\"term\":\"floridian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09761432\"]}");
	add("{\"term\":\"floridity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04707284\"]}");
	add("{\"term\":\"floridness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04707284\"]}");
	add("{\"term\":\"florilegium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06604903\"]}");
	add("{\"term\":\"florin\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13701960\", \"13702251\"]}");
	add("{\"term\":\"florio\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10993714\"]}");
	add("{\"term\":\"florist\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03372256\", \"10117474\"]}");
	add("{\"term\":\"flory\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10993865\"]}");
	add("{\"term\":\"floss\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03180509\", \"03372391\"]}");
	add("{\"term\":\"flotation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01102052\", \"11548418\"]}");
	add("{\"term\":\"flotilla\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03372509\", \"03372586\"]}");
	add("{\"term\":\"flotsam\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03372721\"]}");
	add("{\"term\":\"flounce\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00290111\", \"03402368\"]}");
	add("{\"term\":\"flounder\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02660324\", \"07806577\"]}");
	add("{\"term\":\"flour\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07584671\"]}");
	add("{\"term\":\"flourish\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06869934\", \"06903304\", \"06903423\", \"06903627\", \"06903520\"]}");
	add("{\"term\":\"flouter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10580748\"]}");
	add("{\"term\":\"flow\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"13534950\", \"08478606\", \"14029377\", \"13503533\", \"00330053\", \"15302716\", \"07420493\"]}");
	add("{\"term\":\"flowage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01260222\", \"09305440\", \"13503783\"]}");
	add("{\"term\":\"flowchart\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06594261\"]}");
	add("{\"term\":\"flower\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"15320288\", \"11689786\", \"11690372\"]}");
	add("{\"term\":\"flowerbed\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03373198\"]}");
	add("{\"term\":\"floweret\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11690237\"]}");
	add("{\"term\":\"flowering\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13592420\", \"13460743\"]}");
	add("{\"term\":\"flowerpot\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03997420\"]}");
	add("{\"term\":\"flowing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07420493\"]}");
	add("{\"term\":\"floxuridine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03373596\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }