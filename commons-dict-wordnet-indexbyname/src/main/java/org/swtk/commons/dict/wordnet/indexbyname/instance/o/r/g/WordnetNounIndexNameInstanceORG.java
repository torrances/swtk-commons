package org.swtk.commons.dict.wordnet.indexbyname.instance.o.r.g;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceORG {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"or gate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03858974\"]}");
	add("{\"term\":\"organ\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"03499638\", \"03859585\", \"06607260\", \"03278462\", \"08366277\", \"05305022\"]}");
	add("{\"term\":\"organ donor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10402296\"]}");
	add("{\"term\":\"organ loft\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03860242\"]}");
	add("{\"term\":\"organ of corti\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05330403\"]}");
	add("{\"term\":\"organ of hearing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05328692\"]}");
	add("{\"term\":\"organ of speech\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05313113\"]}");
	add("{\"term\":\"organ pipe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03860335\"]}");
	add("{\"term\":\"organ stop\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03860518\"]}");
	add("{\"term\":\"organ transplant\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00694932\"]}");
	add("{\"term\":\"organdie\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03859941\"]}");
	add("{\"term\":\"organdy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03859941\"]}");
	add("{\"term\":\"organelle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05453244\"]}");
	add("{\"term\":\"organic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14883989\"]}");
	add("{\"term\":\"organic brain syndrome\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14224030\"]}");
	add("{\"term\":\"organic chemistry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06098583\"]}");
	add("{\"term\":\"organic compound\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14751849\"]}");
	add("{\"term\":\"organic disorder\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14077040\"]}");
	add("{\"term\":\"organic evolution\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13498226\"]}");
	add("{\"term\":\"organic fertiliser\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14883989\"]}");
	add("{\"term\":\"organic fertilizer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14883989\"]}");
	add("{\"term\":\"organic law\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06545639\"]}");
	add("{\"term\":\"organic phenomenon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11438864\"]}");
	add("{\"term\":\"organic process\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13547313\"]}");
	add("{\"term\":\"organic structure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05223633\"]}");
	add("{\"term\":\"organicism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06003591\"]}");
	add("{\"term\":\"organification\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13548929\"]}");
	add("{\"term\":\"organisation\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00237945\", \"01010320\", \"01138840\", \"04775896\", \"05734541\", \"08024893\", \"08181484\"]}");
	add("{\"term\":\"organiser\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03924859\", \"10402936\", \"10403204\"]}");
	add("{\"term\":\"organism\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08453046\", \"00004475\"]}");
	add("{\"term\":\"organist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10402524\"]}");
	add("{\"term\":\"organization\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00237945\", \"01010320\", \"04775896\", \"01138840\", \"08181484\", \"05734541\", \"08024893\"]}");
	add("{\"term\":\"organization chart\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07014082\"]}");
	add("{\"term\":\"organization expense\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13298515\"]}");
	add("{\"term\":\"organization for the prohibition of chemical weapons\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08192774\"]}");
	add("{\"term\":\"organization man\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10402793\"]}");
	add("{\"term\":\"organization of american states\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08192976\"]}");
	add("{\"term\":\"organization of the oppressed on earth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08040127\"]}");
	add("{\"term\":\"organized crime\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08262093\"]}");
	add("{\"term\":\"organized labor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08198185\"]}");
	add("{\"term\":\"organized religion\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08098545\"]}");
	add("{\"term\":\"organizer\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03924859\", \"10403204\", \"10402936\"]}");
	add("{\"term\":\"organon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05672830\"]}");
	add("{\"term\":\"organophosphate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14994553\"]}");
	add("{\"term\":\"organophosphate nerve agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14994695\"]}");
	add("{\"term\":\"organs\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07667063\"]}");
	add("{\"term\":\"organza\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03860734\"]}");
	add("{\"term\":\"orgasm\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00062953\"]}");
	add("{\"term\":\"orgy\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00512223\", \"01032312\", \"01075748\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }