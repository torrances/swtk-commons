package org.swtk.commons.dict.wordnet.indexbyname.instance.l.u.n;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceLUN {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"luna\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09594427\"]}");
	add("{\"term\":\"luna moth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02305621\"]}");
	add("{\"term\":\"lunacy\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00513854\", \"14418644\"]}");
	add("{\"term\":\"lunar calendar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15203464\"]}");
	add("{\"term\":\"lunar caustic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15038973\"]}");
	add("{\"term\":\"lunar crater\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09367221\"]}");
	add("{\"term\":\"lunar day\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15233536\"]}");
	add("{\"term\":\"lunar eclipse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07383593\"]}");
	add("{\"term\":\"lunar excursion module\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03702700\"]}");
	add("{\"term\":\"lunar latitude\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08613514\"]}");
	add("{\"term\":\"lunar module\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03702700\"]}");
	add("{\"term\":\"lunar month\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15232668\"]}");
	add("{\"term\":\"lunar time period\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15300713\"]}");
	add("{\"term\":\"lunar year\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15227813\"]}");
	add("{\"term\":\"lunaria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11911864\"]}");
	add("{\"term\":\"lunaria annua\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11912010\"]}");
	add("{\"term\":\"lunate bone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05279922\"]}");
	add("{\"term\":\"lunatic\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10011068\", \"10296461\"]}");
	add("{\"term\":\"lunatic fringe\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08377357\"]}");
	add("{\"term\":\"lunation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15232668\"]}");
	add("{\"term\":\"lunch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07590641\"]}");
	add("{\"term\":\"lunch meat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07694173\"]}");
	add("{\"term\":\"lunch meeting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08402580\"]}");
	add("{\"term\":\"lunch period\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15190964\"]}");
	add("{\"term\":\"luncheon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07590641\"]}");
	add("{\"term\":\"luncheon meat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07694173\"]}");
	add("{\"term\":\"luncheon meeting\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08402580\"]}");
	add("{\"term\":\"luncheon voucher\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06530411\"]}");
	add("{\"term\":\"luncher\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10296829\"]}");
	add("{\"term\":\"lunching\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00842958\"]}");
	add("{\"term\":\"lunchroom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03702886\"]}");
	add("{\"term\":\"lunchtime\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15190964\"]}");
	add("{\"term\":\"lund\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08784404\"]}");
	add("{\"term\":\"lunda\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02050896\"]}");
	add("{\"term\":\"lunda cirrhata\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02051007\"]}");
	add("{\"term\":\"lunette\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03702999\", \"03703146\"]}");
	add("{\"term\":\"lung\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05394887\"]}");
	add("{\"term\":\"lung cancer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14274799\"]}");
	add("{\"term\":\"lunge\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01176741\", \"00291120\"]}");
	add("{\"term\":\"lungen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12764112\"]}");
	add("{\"term\":\"lunger\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"09979480\", \"10296928\"]}");
	add("{\"term\":\"lungfish\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02518819\"]}");
	add("{\"term\":\"lungi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03703247\"]}");
	add("{\"term\":\"lungless salamander\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01638768\"]}");
	add("{\"term\":\"lungyi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03703247\"]}");
	add("{\"term\":\"lunisolar calendar\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15203593\"]}");
	add("{\"term\":\"lunitidal interval\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15295683\"]}");
	add("{\"term\":\"lunkhead\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10059388\"]}");
	add("{\"term\":\"lunt\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11165189\"]}");
	add("{\"term\":\"lunula\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03703457\", \"05589688\"]}");
	add("{\"term\":\"lunule\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05589688\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }