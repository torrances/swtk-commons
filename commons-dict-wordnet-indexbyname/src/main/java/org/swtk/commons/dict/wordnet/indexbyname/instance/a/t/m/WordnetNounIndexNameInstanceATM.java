package org.swtk.commons.dict.wordnet.indexbyname.instance.a.t.m;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceATM {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"atm\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"02980517\", \"06289724\", \"13733165\"]}");
	add("{\"term\":\"atmometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02755922\"]}");
	add("{\"term\":\"atmosphere\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"04734472\", \"09233511\", \"14543880\", \"08516085\", \"13733165\", \"14548451\"]}");
	add("{\"term\":\"atmospheric condition\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11545095\"]}");
	add("{\"term\":\"atmospheric electricity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11496631\"]}");
	add("{\"term\":\"atmospheric phenomenon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11445694\"]}");
	add("{\"term\":\"atmospheric pressure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11449572\"]}");
	add("{\"term\":\"atmospheric state\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14543880\"]}");
	add("{\"term\":\"atmospheric static\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07446283\"]}");
	add("{\"term\":\"atmospherics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07446283\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }