package org.swtk.commons.dict.wordnet.indexbyname.instance.n.a.n;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceNAN {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"nan\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07700034\", \"09387851\", \"10162267\", \"10364746\"]}");
	add("{\"term\":\"nan ling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09388340\"]}");
	add("{\"term\":\"nan river\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09387851\"]}");
	add("{\"term\":\"nanaimo\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08842148\"]}");
	add("{\"term\":\"nanak\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11219384\"]}");
	add("{\"term\":\"nance\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10095821\"]}");
	add("{\"term\":\"nancere\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06998064\"]}");
	add("{\"term\":\"nanchang\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08745639\"]}");
	add("{\"term\":\"nancy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08956769\"]}");
	add("{\"term\":\"nancy freeman mitford\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11203064\"]}");
	add("{\"term\":\"nancy mitford\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11203064\"]}");
	add("{\"term\":\"nancy witcher astor\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10846321\"]}");
	add("{\"term\":\"nand circuit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03812288\"]}");
	add("{\"term\":\"nand gate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03812288\"]}");
	add("{\"term\":\"nanda devi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09388025\"]}");
	add("{\"term\":\"nandrolone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14772514\"]}");
	add("{\"term\":\"nandu\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01524397\"]}");
	add("{\"term\":\"nanga parbat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09388185\"]}");
	add("{\"term\":\"nanism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14530005\"]}");
	add("{\"term\":\"nanjing\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08745899\"]}");
	add("{\"term\":\"nankeen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03812444\"]}");
	add("{\"term\":\"nanking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08745899\"]}");
	add("{\"term\":\"nanna\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"09543238\", \"09605194\", \"10162267\"]}");
	add("{\"term\":\"nanning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08745778\"]}");
	add("{\"term\":\"nanny\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02419610\", \"10364831\"]}");
	add("{\"term\":\"nanocephaly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14532901\"]}");
	add("{\"term\":\"nanogram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13745299\"]}");
	add("{\"term\":\"nanometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13679972\"]}");
	add("{\"term\":\"nanometre\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13679972\"]}");
	add("{\"term\":\"nanomia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01915450\"]}");
	add("{\"term\":\"nanophthalmos\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14223900\"]}");
	add("{\"term\":\"nanosecond\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15260812\"]}");
	add("{\"term\":\"nanotechnology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06144350\"]}");
	add("{\"term\":\"nanotube\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14646669\"]}");
	add("{\"term\":\"nanovolt\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13664335\"]}");
	add("{\"term\":\"nansen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11219717\"]}");
	add("{\"term\":\"nantes\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08956882\"]}");
	add("{\"term\":\"nanticoke\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06923843\", \"09682235\"]}");
	add("{\"term\":\"nantua\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07855031\"]}");
	add("{\"term\":\"nantucket\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09121184\"]}");
	add("{\"term\":\"nanus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10060141\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }