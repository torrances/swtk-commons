package org.swtk.commons.dict.wordnet.indexbyname.instance.a.c.e;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceACE {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"ace\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00569738\", \"08192397\", \"14759821\", \"09781932\", \"02676145\", \"13764713\"]}");
	add("{\"term\":\"acebutolol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02676334\"]}");
	add("{\"term\":\"acedia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00760148\"]}");
	add("{\"term\":\"acephalia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14042912\"]}");
	add("{\"term\":\"acephalism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14042912\"]}");
	add("{\"term\":\"acephaly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14042912\"]}");
	add("{\"term\":\"acer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12772799\"]}");
	add("{\"term\":\"aceraceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12772583\"]}");
	add("{\"term\":\"acerbity\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04650754\", \"05001304\", \"05002187\"]}");
	add("{\"term\":\"acerola\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07762310\", \"12715247\"]}");
	add("{\"term\":\"acervulus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11553477\"]}");
	add("{\"term\":\"acetabulum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05603979\"]}");
	add("{\"term\":\"acetal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14734966\"]}");
	add("{\"term\":\"acetaldehyde\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14735169\"]}");
	add("{\"term\":\"acetaldol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14735096\"]}");
	add("{\"term\":\"acetamide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14735358\"]}");
	add("{\"term\":\"acetaminophen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02677336\"]}");
	add("{\"term\":\"acetanilid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02677766\"]}");
	add("{\"term\":\"acetanilide\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02677766\"]}");
	add("{\"term\":\"acetate\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02678073\", \"14623986\"]}");
	add("{\"term\":\"acetin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14623674\"]}");
	add("{\"term\":\"acetone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14624684\"]}");
	add("{\"term\":\"acetonemia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14290707\"]}");
	add("{\"term\":\"acetonuria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14294982\"]}");
	add("{\"term\":\"acetophenetidin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02678208\"]}");
	add("{\"term\":\"acetphenetidin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02678208\"]}");
	add("{\"term\":\"acetum\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07844963\", \"14623821\"]}");
	add("{\"term\":\"acetyl\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14618636\"]}");
	add("{\"term\":\"acetylation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13446810\"]}");
	add("{\"term\":\"acetylcholine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14832588\"]}");
	add("{\"term\":\"acetylene\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14624920\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }