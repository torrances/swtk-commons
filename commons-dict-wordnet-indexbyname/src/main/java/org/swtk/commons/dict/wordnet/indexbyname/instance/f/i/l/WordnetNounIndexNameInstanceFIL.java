package org.swtk.commons.dict.wordnet.indexbyname.instance.f.i.l;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceFIL {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"filaggrin\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14758343\"]}");
	add("{\"term\":\"filago\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11990570\"]}");
	add("{\"term\":\"filagree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03342767\"]}");
	add("{\"term\":\"filament\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03341520\", \"05236798\", \"11698574\", \"14892009\"]}");
	add("{\"term\":\"filaree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12709664\"]}");
	add("{\"term\":\"filaria\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01936119\", \"12709664\"]}");
	add("{\"term\":\"filariasis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14391437\"]}");
	add("{\"term\":\"filariidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01935983\"]}");
	add("{\"term\":\"filature\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03341687\"]}");
	add("{\"term\":\"filbert\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07788764\", \"12309950\"]}");
	add("{\"term\":\"file\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03341784\", \"03342085\", \"08445713\", \"06520807\"]}");
	add("{\"term\":\"filefish\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02656416\"]}");
	add("{\"term\":\"filename\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06346543\"]}");
	add("{\"term\":\"filer\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10107343\", \"10107505\"]}");
	add("{\"term\":\"filet\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"03342672\", \"07670946\", \"07675810\"]}");
	add("{\"term\":\"filiation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04929964\", \"13835254\"]}");
	add("{\"term\":\"filibuster\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01069936\", \"10107637\"]}");
	add("{\"term\":\"filibusterer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10107637\"]}");
	add("{\"term\":\"filicales\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13190572\"]}");
	add("{\"term\":\"filicide\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00223022\", \"10107870\"]}");
	add("{\"term\":\"filicinae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13190117\"]}");
	add("{\"term\":\"filicopsida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13190117\"]}");
	add("{\"term\":\"filigree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03342767\"]}");
	add("{\"term\":\"filing\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00813152\", \"00927303\", \"09302251\", \"07182605\"]}");
	add("{\"term\":\"filipino\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06952518\", \"09746782\"]}");
	add("{\"term\":\"fill\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14892394\", \"13601926\"]}");
	add("{\"term\":\"fillagree\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03342767\"]}");
	add("{\"term\":\"fille\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10149362\"]}");
	add("{\"term\":\"filler\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03342954\", \"03720260\", \"06688999\", \"13698755\", \"14730187\"]}");
	add("{\"term\":\"fillet\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03343088\", \"04390783\", \"05483214\", \"07670946\", \"07675810\"]}");
	add("{\"term\":\"filling\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00403343\", \"03343232\", \"04606292\", \"07899006\", \"13501744\", \"14892394\"]}");
	add("{\"term\":\"fillip\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05837980\"]}");
	add("{\"term\":\"fillmore\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10990856\"]}");
	add("{\"term\":\"filly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02379331\"]}");
	add("{\"term\":\"film\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"03344241\", \"03343593\", \"03343766\", \"06273220\", \"06626039\"]}");
	add("{\"term\":\"filmdom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08085293\"]}");
	add("{\"term\":\"filming\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00909617\"]}");
	add("{\"term\":\"filmmaker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10108159\"]}");
	add("{\"term\":\"filoviridae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01334300\"]}");
	add("{\"term\":\"filovirus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01334508\"]}");
	add("{\"term\":\"fils\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13691111\", \"13719726\"]}");
	add("{\"term\":\"filter\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03344954\", \"03344588\"]}");
	add("{\"term\":\"filth\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07139048\", \"14519345\", \"14521680\", \"14880903\"]}");
	add("{\"term\":\"filthiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04860193\", \"14519345\"]}");
	add("{\"term\":\"filtrate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14892715\"]}");
	add("{\"term\":\"filtration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00192829\", \"13501870\"]}");
	add("{\"term\":\"filum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05236798\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }