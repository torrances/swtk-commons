package org.swtk.commons.dict.wordnet.indexbyname.instance.t.a.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceTAC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"tacamahac\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12752595\"]}");
	add("{\"term\":\"tacca\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12496098\"]}");
	add("{\"term\":\"tacca leontopetaloides\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12496279\"]}");
	add("{\"term\":\"tacca pinnatifida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12496279\"]}");
	add("{\"term\":\"taccaceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12495955\"]}");
	add("{\"term\":\"tach\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04389967\"]}");
	add("{\"term\":\"tacheometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04390102\"]}");
	add("{\"term\":\"tachina fly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02195466\"]}");
	add("{\"term\":\"tachinidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02195325\"]}");
	add("{\"term\":\"tachistoscope\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04389624\"]}");
	add("{\"term\":\"tachogram\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07019013\"]}");
	add("{\"term\":\"tachograph\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04389782\"]}");
	add("{\"term\":\"tachometer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04389967\"]}");
	add("{\"term\":\"tachycardia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14386432\"]}");
	add("{\"term\":\"tachyglossidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01874735\"]}");
	add("{\"term\":\"tachyglossus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01874885\"]}");
	add("{\"term\":\"tachygraphy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06361497\"]}");
	add("{\"term\":\"tachylite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14905375\"]}");
	add("{\"term\":\"tachymeter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04390102\"]}");
	add("{\"term\":\"tachypleus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01790798\"]}");
	add("{\"term\":\"tacit consent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06701870\"]}");
	add("{\"term\":\"taciturnity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04659795\"]}");
	add("{\"term\":\"tacitus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11348519\"]}");
	add("{\"term\":\"tack\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"00315221\", \"00352160\", \"04195411\", \"04302219\", \"04390217\", \"08698822\"]}");
	add("{\"term\":\"tack hammer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04390388\"]}");
	add("{\"term\":\"tacker\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04310495\", \"09862436\", \"10707418\"]}");
	add("{\"term\":\"tackiness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04825691\", \"04943081\"]}");
	add("{\"term\":\"tacking\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00352160\", \"02808296\"]}");
	add("{\"term\":\"tackle\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"00563022\", \"00729199\", \"03356280\", \"04098805\", \"10707566\"]}");
	add("{\"term\":\"tackler\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10707734\"]}");
	add("{\"term\":\"taco\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07896726\", \"09742312\"]}");
	add("{\"term\":\"taco sauce\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07839345\"]}");
	add("{\"term\":\"tacoma\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09177495\"]}");
	add("{\"term\":\"tacoma narrows bridge\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04390488\"]}");
	add("{\"term\":\"taconic mountains\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09476418\"]}");
	add("{\"term\":\"taconite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14894816\"]}");
	add("{\"term\":\"tact\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04849041\"]}");
	add("{\"term\":\"tactfulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04849041\"]}");
	add("{\"term\":\"tactic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05913746\"]}");
	add("{\"term\":\"tactical intelligence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00984433\"]}");
	add("{\"term\":\"tactical maneuver\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00169058\"]}");
	add("{\"term\":\"tactical manoeuvre\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00169058\"]}");
	add("{\"term\":\"tactical warning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07240517\"]}");
	add("{\"term\":\"tactician\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10707852\"]}");
	add("{\"term\":\"tactics\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05913746\", \"06259098\"]}");
	add("{\"term\":\"tactile agnosia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14079625\"]}");
	add("{\"term\":\"tactile property\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04953730\"]}");
	add("{\"term\":\"tactile sensation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05730374\"]}");
	add("{\"term\":\"tactility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05729937\"]}");
	add("{\"term\":\"tactlessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04853474\"]}");
	add("{\"term\":\"tactual exploration\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00144705\"]}");
	add("{\"term\":\"tactual sensation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05729937\", \"05730374\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }