package org.swtk.commons.dict.wordnet.indexbyname.instance.e.s.t;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceEST {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"est\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15156946\"]}");
	add("{\"term\":\"established church\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08117744\"]}");
	add("{\"term\":\"establishment\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"05834615\", \"13497470\", \"08092683\", \"03302664\", \"08181484\", \"08070328\", \"00237945\"]}");
	add("{\"term\":\"establishmentarianism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05970145\"]}");
	add("{\"term\":\"establishmentism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05970145\"]}");
	add("{\"term\":\"estaminet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03303036\"]}");
	add("{\"term\":\"estate\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08184264\", \"13267561\", \"13271829\"]}");
	add("{\"term\":\"estate agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10529403\"]}");
	add("{\"term\":\"estate car\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02817668\"]}");
	add("{\"term\":\"estate for life\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13272614\"]}");
	add("{\"term\":\"estate of the realm\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08184264\"]}");
	add("{\"term\":\"estate tax\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13334344\"]}");
	add("{\"term\":\"estates general\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08181363\"]}");
	add("{\"term\":\"estazolam\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03303158\"]}");
	add("{\"term\":\"esteem\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06216535\", \"07515980\", \"14461018\"]}");
	add("{\"term\":\"ester\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14874653\"]}");
	add("{\"term\":\"esther\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06448387\", \"10981364\"]}");
	add("{\"term\":\"esther hobart mcquigg slack morris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11212185\"]}");
	add("{\"term\":\"esther morris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11212185\"]}");
	add("{\"term\":\"esthesia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05685989\"]}");
	add("{\"term\":\"esthesis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05720023\"]}");
	add("{\"term\":\"esthete\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10084344\"]}");
	add("{\"term\":\"esthetic\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05977838\"]}");
	add("{\"term\":\"esthetician\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10084476\", \"10084638\"]}");
	add("{\"term\":\"esthetics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06170939\"]}");
	add("{\"term\":\"esthonia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09034667\"]}");
	add("{\"term\":\"esthonian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06970636\"]}");
	add("{\"term\":\"estimate\", \"synsetCount\":5, \"upperType\":\"NOUN\", \"ids\":[\"06216764\", \"06796455\", \"06540774\", \"00876924\", \"05811387\"]}");
	add("{\"term\":\"estimated tax\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13331561\"]}");
	add("{\"term\":\"estimated tax return\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06561106\"]}");
	add("{\"term\":\"estimation\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00876924\", \"05811387\", \"06216764\", \"06540774\"]}");
	add("{\"term\":\"estimator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09906486\"]}");
	add("{\"term\":\"estivation\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07963655\", \"14037633\"]}");
	add("{\"term\":\"estonia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09034667\"]}");
	add("{\"term\":\"estonian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06970636\"]}");
	add("{\"term\":\"estonian monetary unit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13722338\"]}");
	add("{\"term\":\"estoppel\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06666656\"]}");
	add("{\"term\":\"estradiol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14774495\"]}");
	add("{\"term\":\"estradiol patch\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03303299\"]}");
	add("{\"term\":\"estragon\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07837586\", \"11950672\"]}");
	add("{\"term\":\"estrangement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"07517626\", \"14439177\"]}");
	add("{\"term\":\"estraterrestrial body\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09300592\"]}");
	add("{\"term\":\"estrilda\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01546458\"]}");
	add("{\"term\":\"estriol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14774801\"]}");
	add("{\"term\":\"estrogen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14773973\"]}");
	add("{\"term\":\"estrogen antagonist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03303512\"]}");
	add("{\"term\":\"estrone\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14774961\"]}");
	add("{\"term\":\"estronol\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14774961\"]}");
	add("{\"term\":\"estrus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14061746\"]}");
	add("{\"term\":\"estuary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09297406\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }