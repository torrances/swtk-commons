package org.swtk.commons.dict.wordnet.indexbyname.instance.d.o.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDOC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"doc\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08146250\", \"10040615\"]}");
	add("{\"term\":\"docent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10040532\"]}");
	add("{\"term\":\"docetism\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06232658\"]}");
	add("{\"term\":\"docility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04912874\"]}");
	add("{\"term\":\"dock\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"02160718\", \"02161624\", \"03221531\", \"03222036\", \"03939805\", \"12624720\", \"03221894\"]}");
	add("{\"term\":\"dock worker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10674608\"]}");
	add("{\"term\":\"dockage\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00052966\", \"03221531\", \"13342252\"]}");
	add("{\"term\":\"docker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10674608\"]}");
	add("{\"term\":\"docket\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05919534\", \"06497282\"]}");
	add("{\"term\":\"dockhand\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10674608\"]}");
	add("{\"term\":\"docking\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00052966\"]}");
	add("{\"term\":\"docking facility\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03221531\"]}");
	add("{\"term\":\"docking fee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13342252\"]}");
	add("{\"term\":\"dockside\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08667559\"]}");
	add("{\"term\":\"dockworker\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10674608\"]}");
	add("{\"term\":\"dockyard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08657967\"]}");
	add("{\"term\":\"docosahexaenoic acid\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14862070\"]}");
	add("{\"term\":\"doctor\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"10041617\", \"00433296\", \"10041836\", \"10040615\"]}");
	add("{\"term\":\"doctor of arts\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"06716597\", \"06718069\"]}");
	add("{\"term\":\"doctor of dental medicine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06715651\"]}");
	add("{\"term\":\"doctor of dental surgery\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06715765\"]}");
	add("{\"term\":\"doctor of divinity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06715877\"]}");
	add("{\"term\":\"doctor of education\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06715976\"]}");
	add("{\"term\":\"doctor of fine arts\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06718161\"]}");
	add("{\"term\":\"doctor of humane letters\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06718258\"]}");
	add("{\"term\":\"doctor of humanities\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06718358\"]}");
	add("{\"term\":\"doctor of laws\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06718461\"]}");
	add("{\"term\":\"doctor of medicine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716084\"]}");
	add("{\"term\":\"doctor of music\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716183\"]}");
	add("{\"term\":\"doctor of musical arts\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716285\"]}");
	add("{\"term\":\"doctor of optometry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716395\"]}");
	add("{\"term\":\"doctor of osteopathy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716496\"]}");
	add("{\"term\":\"doctor of philosophy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06716716\"]}");
	add("{\"term\":\"doctor of public health\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06717129\"]}");
	add("{\"term\":\"doctor of sacred theology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06717345\"]}");
	add("{\"term\":\"doctor of science\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06718550\"]}");
	add("{\"term\":\"doctor of the church\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10041836\"]}");
	add("{\"term\":\"doctor of theology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06717245\"]}");
	add("{\"term\":\"doctorate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06715221\"]}");
	add("{\"term\":\"doctorfish\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02624207\"]}");
	add("{\"term\":\"doctorow\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10957874\"]}");
	add("{\"term\":\"doctorspeak\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07083042\"]}");
	add("{\"term\":\"doctrinaire\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10043381\"]}");
	add("{\"term\":\"doctrine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05952149\"]}");
	add("{\"term\":\"doctrine of analogy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05951428\"]}");
	add("{\"term\":\"docudrama\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06629313\"]}");
	add("{\"term\":\"document\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"06522968\", \"13424504\", \"03222161\", \"06481744\"]}");
	add("{\"term\":\"documentary\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06629313\"]}");
	add("{\"term\":\"documentary film\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06629313\"]}");
	add("{\"term\":\"documentation\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"00155253\", \"06600607\", \"06663176\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }