package org.swtk.commons.dict.wordnet.indexbyname.instance.s.i.c;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceSIC {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"siccative\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14803955\"]}");
	add("{\"term\":\"sichuan\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08744138\"]}");
	add("{\"term\":\"sicilia\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08828851\", \"08829067\"]}");
	add("{\"term\":\"sicilian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09736962\"]}");
	add("{\"term\":\"sicilian mafia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08262470\"]}");
	add("{\"term\":\"sicilian pizza\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07890417\"]}");
	add("{\"term\":\"sicily\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08828851\", \"08829067\"]}");
	add("{\"term\":\"sick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07967004\"]}");
	add("{\"term\":\"sick bag\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220010\"]}");
	add("{\"term\":\"sick benefit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13318873\"]}");
	add("{\"term\":\"sick berth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220172\"]}");
	add("{\"term\":\"sick call\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08444410\"]}");
	add("{\"term\":\"sick headache\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14351112\", \"14351283\"]}");
	add("{\"term\":\"sick joke\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06792678\"]}");
	add("{\"term\":\"sick leave\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15165150\"]}");
	add("{\"term\":\"sick list\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06507815\"]}");
	add("{\"term\":\"sick parade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08444410\"]}");
	add("{\"term\":\"sick pay\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13301818\"]}");
	add("{\"term\":\"sick person\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10615055\"]}");
	add("{\"term\":\"sickbag\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220010\"]}");
	add("{\"term\":\"sickbay\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220172\"]}");
	add("{\"term\":\"sickbed\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220331\"]}");
	add("{\"term\":\"sickeningness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05003736\"]}");
	add("{\"term\":\"sickle\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220420\"]}");
	add("{\"term\":\"sickle alfalfa\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12569309\"]}");
	add("{\"term\":\"sickle cell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05462409\"]}");
	add("{\"term\":\"sickle feather\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01900067\"]}");
	add("{\"term\":\"sickle lucerne\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12569309\"]}");
	add("{\"term\":\"sickle medick\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12569309\"]}");
	add("{\"term\":\"sicklepod\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"11892793\", \"12521023\"]}");
	add("{\"term\":\"sickleweed golden aster\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11972527\"]}");
	add("{\"term\":\"sickness\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"14383357\", \"14496638\", \"14085287\"]}");
	add("{\"term\":\"sickness benefit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13318873\"]}");
	add("{\"term\":\"sickroom\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04220597\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }