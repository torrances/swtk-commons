package org.swtk.commons.dict.wordnet.indexbyname.instance.e.f.f;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceEFF {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"effacement\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00055148\", \"13492720\"]}");
	add("{\"term\":\"effect\", \"synsetCount\":6, \"upperType\":\"NOUN\", \"ids\":[\"14334775\", \"04816894\", \"06616419\", \"05926071\", \"04682671\", \"11430739\"]}");
	add("{\"term\":\"effecter\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10066335\"]}");
	add("{\"term\":\"effectiveness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05041380\", \"05206554\"]}");
	add("{\"term\":\"effectivity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05206554\"]}");
	add("{\"term\":\"effector\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"05305920\", \"05472880\", \"10066335\"]}");
	add("{\"term\":\"effects\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13266978\"]}");
	add("{\"term\":\"effectuality\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05206554\"]}");
	add("{\"term\":\"effectualness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05206554\"]}");
	add("{\"term\":\"effectuation\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00044888\"]}");
	add("{\"term\":\"effeminacy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04675496\"]}");
	add("{\"term\":\"effeminateness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04675496\"]}");
	add("{\"term\":\"effendi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09755222\"]}");
	add("{\"term\":\"efferent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05482390\"]}");
	add("{\"term\":\"effervescence\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04740587\", \"13492884\"]}");
	add("{\"term\":\"efficaciousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05207137\"]}");
	add("{\"term\":\"efficacy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05207137\"]}");
	add("{\"term\":\"efficiency\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"05652372\", \"13843205\"]}");
	add("{\"term\":\"effigy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03270785\"]}");
	add("{\"term\":\"effleurage\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00660910\"]}");
	add("{\"term\":\"efflorescence\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"11430641\", \"13460743\", \"14345380\", \"15320288\"]}");
	add("{\"term\":\"effluence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13550498\"]}");
	add("{\"term\":\"effluent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14881172\"]}");
	add("{\"term\":\"effluvium\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14877717\"]}");
	add("{\"term\":\"efflux\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13550498\"]}");
	add("{\"term\":\"effort\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"00799906\", \"00037483\", \"00622867\", \"00787849\"]}");
	add("{\"term\":\"effortfulness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04716861\"]}");
	add("{\"term\":\"effortlessness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04715819\"]}");
	add("{\"term\":\"effrontery\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04845958\"]}");
	add("{\"term\":\"effulgence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04961131\"]}");
	add("{\"term\":\"effusion\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00330769\", \"07027434\"]}");
	add("{\"term\":\"effusiveness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04658366\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }