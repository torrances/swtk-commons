package org.swtk.commons.dict.wordnet.indexbyname.instance.p.a.y;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstancePAY {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"pay\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13300285\"]}");
	add("{\"term\":\"pay as you earn\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13332595\"]}");
	add("{\"term\":\"pay claim\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07207505\"]}");
	add("{\"term\":\"pay cut\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00353509\"]}");
	add("{\"term\":\"pay dirt\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"14498857\", \"15002300\"]}");
	add("{\"term\":\"pay envelope\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13301681\"]}");
	add("{\"term\":\"pay packet\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13301681\"]}");
	add("{\"term\":\"pay rate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13302499\"]}");
	add("{\"term\":\"payable\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14514385\"]}");
	add("{\"term\":\"payables\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13351190\"]}");
	add("{\"term\":\"payback\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"01238028\", \"13317483\"]}");
	add("{\"term\":\"paycheck\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13404148\"]}");
	add("{\"term\":\"payday\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15197829\"]}");
	add("{\"term\":\"paye\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13332595\"]}");
	add("{\"term\":\"payee\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10429379\"]}");
	add("{\"term\":\"payena\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12795985\"]}");
	add("{\"term\":\"payer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10429497\"]}");
	add("{\"term\":\"paygrade\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14454897\"]}");
	add("{\"term\":\"paying attention\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05710673\"]}");
	add("{\"term\":\"paying back\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01237294\"]}");
	add("{\"term\":\"payload\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"02967841\", \"04558661\"]}");
	add("{\"term\":\"paymaster\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10429780\"]}");
	add("{\"term\":\"payment\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"01237702\", \"01122769\", \"13299398\"]}");
	add("{\"term\":\"payment rate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13302793\"]}");
	add("{\"term\":\"paynim\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10186219\"]}");
	add("{\"term\":\"payoff\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"07310247\", \"13281089\", \"13305585\", \"13320380\"]}");
	add("{\"term\":\"payola\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13305996\"]}");
	add("{\"term\":\"payroll\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"08137054\", \"13434050\", \"13433894\"]}");
	add("{\"term\":\"payroll check\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13404148\"]}");
	add("{\"term\":\"payroll department\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08137054\"]}");
	add("{\"term\":\"pays de la loire\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08963699\"]}");
	add("{\"term\":\"paysheet\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13433894\", \"13434050\"]}");
	add("{\"term\":\"payslip\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13433304\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }