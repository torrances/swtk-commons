package org.swtk.commons.dict.wordnet.indexbyname.instance.d.r.y;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceDRY {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"dry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10057647\"]}");
	add("{\"term\":\"dry battery\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03255655\"]}");
	add("{\"term\":\"dry cell\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03255983\"]}");
	add("{\"term\":\"dry cereal\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07720500\"]}");
	add("{\"term\":\"dry cleaner\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09946763\"]}");
	add("{\"term\":\"dry cleaners\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03043812\"]}");
	add("{\"term\":\"dry cleaning\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00253036\"]}");
	add("{\"term\":\"dry dock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256236\"]}");
	add("{\"term\":\"dry fly\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256635\"]}");
	add("{\"term\":\"dry gangrene\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14337088\"]}");
	add("{\"term\":\"dry ice\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15071734\"]}");
	add("{\"term\":\"dry kiln\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256934\"]}");
	add("{\"term\":\"dry land\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09357302\"]}");
	add("{\"term\":\"dry masonry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03257027\"]}");
	add("{\"term\":\"dry measure\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13636317\"]}");
	add("{\"term\":\"dry milk\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07862119\"]}");
	add("{\"term\":\"dry mop\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03263608\"]}");
	add("{\"term\":\"dry mouth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14561931\"]}");
	add("{\"term\":\"dry mustard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04000775\"]}");
	add("{\"term\":\"dry nurse\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10057844\"]}");
	add("{\"term\":\"dry pint\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13641685\"]}");
	add("{\"term\":\"dry plate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13491218\"]}");
	add("{\"term\":\"dry plate process\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13491218\"]}");
	add("{\"term\":\"dry point\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03257125\", \"03257245\"]}");
	add("{\"term\":\"dry quart\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13641830\"]}");
	add("{\"term\":\"dry rot\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13102759\", \"14304006\"]}");
	add("{\"term\":\"dry run\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00898724\"]}");
	add("{\"term\":\"dry season\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"15263971\"]}");
	add("{\"term\":\"dry socket\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14281495\"]}");
	add("{\"term\":\"dry unit\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13636317\"]}");
	add("{\"term\":\"dry vermouth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07915409\"]}");
	add("{\"term\":\"dry wall\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03257340\", \"04555277\"]}");
	add("{\"term\":\"dry walling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00913996\"]}");
	add("{\"term\":\"dry wash\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09498025\"]}");
	add("{\"term\":\"dryad\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"09574169\"]}");
	add("{\"term\":\"dryadella\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12080619\"]}");
	add("{\"term\":\"dryas\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12649948\"]}");
	add("{\"term\":\"dryas octopetala\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12650066\"]}");
	add("{\"term\":\"dryden\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10963651\"]}");
	add("{\"term\":\"drydock\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256236\"]}");
	add("{\"term\":\"dryer\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256469\"]}");
	add("{\"term\":\"drygoods\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03256767\"]}");
	add("{\"term\":\"drying agent\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14803955\"]}");
	add("{\"term\":\"drying oil\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"14779820\"]}");
	add("{\"term\":\"drying up\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13481771\"]}");
	add("{\"term\":\"dryland berry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12269458\"]}");
	add("{\"term\":\"dryland blueberry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12269458\"]}");
	add("{\"term\":\"drymarchon\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01743757\"]}");
	add("{\"term\":\"drymarchon corais\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01743873\"]}");
	add("{\"term\":\"drymarchon corais couperi\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01744083\"]}");
	add("{\"term\":\"drymoglossum\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13196222\"]}");
	add("{\"term\":\"drynaria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13196382\"]}");
	add("{\"term\":\"drynaria rigidula\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13196580\"]}");
	add("{\"term\":\"dryness\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"04637494\", \"04890999\", \"14560040\"]}");
	add("{\"term\":\"dryopithecine\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02480708\"]}");
	add("{\"term\":\"dryopithecus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02480521\"]}");
	add("{\"term\":\"dryopithecus rudapithecus hungaricus\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02480870\"]}");
	add("{\"term\":\"dryopteridaceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13212923\"]}");
	add("{\"term\":\"dryopteris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13213796\"]}");
	add("{\"term\":\"dryopteris dilatata\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13214041\"]}");
	add("{\"term\":\"dryopteris fragrans\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13214167\"]}");
	add("{\"term\":\"dryopteris goldiana\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13214364\"]}");
	add("{\"term\":\"dryopteris hexagonoptera\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13251741\"]}");
	add("{\"term\":\"dryopteris marginalis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13214934\"]}");
	add("{\"term\":\"dryopteris noveboracensis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13250849\"]}");
	add("{\"term\":\"dryopteris oreades\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13215110\"]}");
	add("{\"term\":\"dryopteris oreopteris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13250441\"]}");
	add("{\"term\":\"dryopteris phegopteris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13251976\"]}");
	add("{\"term\":\"dryopteris thelypteris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13248676\"]}");
	add("{\"term\":\"dryopteris thelypteris pubescens\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13248915\"]}");
	add("{\"term\":\"drypis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"11830499\"]}");
	add("{\"term\":\"drywall\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"04555277\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }