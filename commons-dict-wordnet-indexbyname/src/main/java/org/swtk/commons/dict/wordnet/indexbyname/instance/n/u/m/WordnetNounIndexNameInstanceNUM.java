package org.swtk.commons.dict.wordnet.indexbyname.instance.n.u.m;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceNUM {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"numbat\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01888139\"]}");
	add("{\"term\":\"number\", \"synsetCount\":12, \"upperType\":\"NOUN\", \"ids\":[\"03840952\", \"06337519\", \"06609408\", \"05103556\", \"06436708\", \"08497523\", \"06609182\", \"06820056\", \"06437781\", \"06905066\", \"13603216\", \"05128718\"]}");
	add("{\"term\":\"number agreement\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13819773\"]}");
	add("{\"term\":\"number cruncher\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03841102\", \"09906830\"]}");
	add("{\"term\":\"number crunching\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00871145\"]}");
	add("{\"term\":\"number one\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"13618687\", \"13868396\", \"09628284\"]}");
	add("{\"term\":\"number one wood\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03248750\"]}");
	add("{\"term\":\"number representation system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06821932\"]}");
	add("{\"term\":\"number system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06821932\"]}");
	add("{\"term\":\"number theorist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10385975\"]}");
	add("{\"term\":\"numbering\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06502878\"]}");
	add("{\"term\":\"numberplate\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03666506\"]}");
	add("{\"term\":\"numbers\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00509558\", \"06444919\"]}");
	add("{\"term\":\"numbers game\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00509558\"]}");
	add("{\"term\":\"numbers pool\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00509558\"]}");
	add("{\"term\":\"numbers racket\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00509558\"]}");
	add("{\"term\":\"numbfish\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01498972\"]}");
	add("{\"term\":\"numbness\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"04643967\", \"14345955\"]}");
	add("{\"term\":\"numdah\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03841249\"]}");
	add("{\"term\":\"numdah rug\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03841249\"]}");
	add("{\"term\":\"numen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10386183\"]}");
	add("{\"term\":\"numenius\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02036098\"]}");
	add("{\"term\":\"numenius arquata\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02036433\"]}");
	add("{\"term\":\"numenius borealis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02036536\"]}");
	add("{\"term\":\"numeracy\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05647276\"]}");
	add("{\"term\":\"numeral\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06820056\"]}");
	add("{\"term\":\"numeration\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"00635829\", \"07245619\"]}");
	add("{\"term\":\"numeration system\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06821932\"]}");
	add("{\"term\":\"numerator\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13755011\"]}");
	add("{\"term\":\"numerical analysis\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06016991\"]}");
	add("{\"term\":\"numerical quantity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05864650\"]}");
	add("{\"term\":\"numerical value\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13602668\"]}");
	add("{\"term\":\"numerologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10386082\"]}");
	add("{\"term\":\"numerology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"06258660\"]}");
	add("{\"term\":\"numerosity\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05129173\"]}");
	add("{\"term\":\"numerousness\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"05129173\"]}");
	add("{\"term\":\"numida\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01811630\"]}");
	add("{\"term\":\"numida meleagris\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01811747\"]}");
	add("{\"term\":\"numidia\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"08725524\"]}");
	add("{\"term\":\"numidian\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10386391\"]}");
	add("{\"term\":\"numididae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01811426\"]}");
	add("{\"term\":\"numidinae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01811426\"]}");
	add("{\"term\":\"numismatics\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01017938\"]}");
	add("{\"term\":\"numismatist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10386478\"]}");
	add("{\"term\":\"numismatologist\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10386478\"]}");
	add("{\"term\":\"numismatology\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01017938\"]}");
	add("{\"term\":\"nummulite\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01396394\"]}");
	add("{\"term\":\"nummulitidae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"01396245\"]}");
	add("{\"term\":\"numskull\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10059388\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }