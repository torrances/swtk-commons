package org.swtk.commons.dict.wordnet.indexbyname.instance.f.o.u;  import java.util.ArrayList; import java.util.Collection; import java.util.Map; import java.util.TreeMap;  import org.swtk.common.dict.dto.wordnet.IndexNoun;  import com.trimc.blogger.commons.utils.GsonUtils;  public final class WordnetNounIndexNameInstanceFOU {  	private static Map<String, Collection<IndexNoun>> map = new TreeMap<String, Collection<IndexNoun>>();  	static { 			add("{\"term\":\"foucault\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10996000\"]}");
	add("{\"term\":\"foul\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00772486\"]}");
	add("{\"term\":\"foulard\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03391572\"]}");
	add("{\"term\":\"foulmart\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02445745\"]}");
	add("{\"term\":\"foulness\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"04987905\", \"05044192\", \"14519345\", \"14586814\"]}");
	add("{\"term\":\"foumart\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"02445745\"]}");
	add("{\"term\":\"found\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13301031\"]}");
	add("{\"term\":\"foundation\", \"synsetCount\":7, \"upperType\":\"NOUN\", \"ids\":[\"00241051\", \"03392169\", \"05801562\", \"05995479\", \"03391862\", \"08423443\", \"13812924\"]}");
	add("{\"term\":\"founder\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"10127547\", \"10127072\", \"14372300\"]}");
	add("{\"term\":\"foundering\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"07379173\"]}");
	add("{\"term\":\"founding\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"00241051\"]}");
	add("{\"term\":\"foundling\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10127652\"]}");
	add("{\"term\":\"foundress\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"10127787\"]}");
	add("{\"term\":\"foundry\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"03392499\"]}");
	add("{\"term\":\"fount\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03392661\", \"06838449\"]}");
	add("{\"term\":\"fountain\", \"synsetCount\":4, \"upperType\":\"NOUN\", \"ids\":[\"03392661\", \"03392772\", \"09466357\", \"03392889\"]}");
	add("{\"term\":\"fountainhead\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"08525470\", \"06688724\"]}");
	add("{\"term\":\"fouquieria\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12402183\"]}");
	add("{\"term\":\"fouquieriaceae\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"12401838\"]}");
	add("{\"term\":\"four\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"03393672\", \"13766444\"]}");
	add("{\"term\":\"fourier\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"10996252\", \"10996464\"]}");
	add("{\"term\":\"fourpence\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13412435\"]}");
	add("{\"term\":\"fourscore\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13772304\"]}");
	add("{\"term\":\"foursome\", \"synsetCount\":2, \"upperType\":\"NOUN\", \"ids\":[\"13766444\", \"08003822\"]}");
	add("{\"term\":\"foursquare\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13901273\"]}");
	add("{\"term\":\"fourteen\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13769488\"]}");
	add("{\"term\":\"fourteenth\", \"synsetCount\":1, \"upperType\":\"NOUN\", \"ids\":[\"13870446\"]}");
	add("{\"term\":\"fourth\", \"synsetCount\":3, \"upperType\":\"NOUN\", \"ids\":[\"06872724\", \"13759620\", \"13869321\"]}");
 	}  	private static void add(final String JSON) { 		IndexNoun indexNoun = GsonUtils.toObject(JSON, IndexNoun.class); 		Collection<IndexNoun> list = (map.containsKey(indexNoun.getTerm())) ? map.get(indexNoun.getTerm()) : new ArrayList<IndexNoun>(); 		list.add(indexNoun); 		map.put(indexNoun.getTerm(), list); 	} 	 	public static Collection<IndexNoun> get(final String TERM) { 		return map.get(TERM); 	}  	public static boolean has(final String TERM) { 		return map.containsKey(TERM); 	} 	 	public static Collection<String> terms() { 		return map.keySet(); 	} }