package org.swtk.commons.dict.wiktionary.generated.m.i.f;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryMIF000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("miff", "{\"term\":\"miff\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"Origin uncertain.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A small argument, quarrel\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1749,\u0027\u0027 Henry Fielding, \u0027The History of Tom Jones, a Foundling\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"nay, she would throw it in the teeth of Allworthy himself, when a little quarrel, or \u0027\u0027miff\u0027\u0027, as it is vulgarly called, arose between them\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"1872,\u0027\u0027 Thomas Hardy, \u0027Under the Greenwood Tree\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"John Wildway and I had a \u0027\u0027miff\u0027\u0027 and parted\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"A state of being offended\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"1851,\u0027\u0027 T. S. Arthur, \u0027Off-Hand Sketches\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"She\u0027s taken a \u0027\u0027miff\u0027\u0027 at something, I suppose, and means to cut my acquaintance\", \"priority\":8}]}, \"synonyms\":{}}");

	add("mifepristone", "{\"term\":\"mifepristone\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A steroid pharmaceutical used to induce abortion, or as an emergency contraceptive\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }