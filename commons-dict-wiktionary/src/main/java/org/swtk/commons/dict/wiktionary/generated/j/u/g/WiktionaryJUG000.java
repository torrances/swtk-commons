package org.swtk.commons.dict.wiktionary.generated.j.u.g;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryJUG000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("juggernaut", "{\"term\":\"juggernaut\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Hindi\", \"Oriya\", \"Sanskrit\", \"Urdu\"], \"text\":\"From Hindustani Hindi \u0027जगन्नाथ\u0027 Oriya \u0027ଜଗନ୍ନାଥ\u0027 Urdu \u0027جگنّاتھ\u0027 from Sanskrit \u0027जगन्नाथ\u0027 (lord of the universe) ({{w|Jagannath}}), a title for the Hindu deity Vishnu\u0027s avatar Krishna. English form influenced by suffix \u0027-naut\u0027 (sailor) From British colonial era in India, witnessing the {{w|Rath Yatra}} (chariot parade) at {{w|Puri}}, {{w|Orissa}}. The festival features a huge annual procession, with a wagon of the idol of Lord Krishna. Pulled with ropes by hundreds of devotees, the wagon develops considerable momentum and becomes unstoppable.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A literal or metaphorical force or object regarded as unstoppable, that will crush all in its path\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"date\u003d23 February url\u003dhttp://www.theguardian.com/film/filmblog/2015/feb/23/oscars-2015-10-things-we-learned|passage\u003d It’s always fun when something massive comes along and sweeps the board, giving everything else a thoroughly good kicking – think Titanic, The Silence of the Lambs, or Lord of the Rings. There’s a sort of deranged, gluttonous feeling, a perverse glee in seeing so many dreams trampled on by a massive cultural \u0027\u0027juggernaut\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A large, cumbersome truck or lorry, especially an artic (typically used somewhat disparagingly\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"An institution that incites destructive devotion or to which people are carelessly sacrificed\", \"priority\":4}]}, \"synonyms\":{}}");

	add("juggins", "{\"term\":\"juggins\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"Origin uncertain; perhaps an extended use of \u0027Juggins\u0027, originally a plebian surname.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A fool; someone very credulous or easily fooled\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1942\u0027\u0027: this boy, though at present a \u0027\u0027juggins\u0027\u0027, had the makings of a superb creature. — Rebecca West, \u0027Black Lamb and Grey Falcon\u0027 (Canongate 2006, p. 788\", \"priority\":2}]}, \"synonyms\":{}}");

	add("juggler", "{\"term\":\"juggler\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|juggle|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"agent Agent noun of juggle; one who either literally juggles objects, or figuratively juggles tasks\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A person who practices juggling\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A conjuror\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A magician or wizard\", \"priority\":4}]}, \"synonyms\":{}}");

	add("juglandin", "{\"term\":\"juglandin\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Latin\"], \"text\":\"Latin \u0027juglans\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An extract of green walnut shells, formerly used in medicine and as a dye\", \"priority\":1}]}, \"synonyms\":{}}");

	add("juglans", "{\"term\":\"juglans\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Latin\"], \"text\":\"From Latin \u0027iūglāns\u0027 (lang\u003dla)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The walnut and similar trees of the genus \u0027Juglans\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }