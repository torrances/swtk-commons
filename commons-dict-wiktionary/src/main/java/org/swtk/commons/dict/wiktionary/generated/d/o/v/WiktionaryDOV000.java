package org.swtk.commons.dict.wiktionary.generated.d.o.v;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryDOV000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("dovecote", "{\"term\":\"dovecote\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A small house or box, raised to a considerable height above the ground, and having compartments, in which domestic pigeons breed; a dove house\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"In medieval Europe, a round or square structure of stone or wood, free-standing or built into a tower, in which pigeons were kept\", \"priority\":2}]}, \"synonyms\":{}}");

	add("dovehouse", "{\"term\":\"dovehouse\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|dove|house|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A dovecote\", \"priority\":1}]}, \"synonyms\":{}}");

	add("dovetail", "{\"term\":\"dovetail\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|dove|tail|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A type of joint where adjoining boards are fastened by interlocking fan-shaped cutouts\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1944\u0027\u0027, \u0027Popular Science\u0027, Vol. 144, NÂº 4, page 15\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"DOVETAIL\u0027\u0027 joints, well known for their strength, have long been used in fine cabinet work. Nowadays they are frequently displaced by other types of joints that are easier to make with power tools, but where a self-locking joint is needed for use\u0026amp;nbsp\", \"priority\":3}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }