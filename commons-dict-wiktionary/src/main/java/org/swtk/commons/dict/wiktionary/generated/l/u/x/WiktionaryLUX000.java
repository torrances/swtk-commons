package org.swtk.commons.dict.wiktionary.generated.l.u.x;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryLUX000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("luxe", "{\"term\":\"luxe\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"French\", \"Latin\"], \"text\":\"From French \u0027luxe\u0027 from Latin \u0027luxus\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"luxury\", \"priority\":1}]}, \"synonyms\":{}}");

	add("luxemburger", "{\"term\":\"luxemburger\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|Luxemburg|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A citizen of Luxemburg\", \"priority\":1}]}, \"synonyms\":{}}");

	add("luxury", "{\"term\":\"luxury\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"middle english (1100-1500)\", \"old french (842-ca. 1400)\", \"Latin\"], \"text\":\"Middle english (1100-1500) \u0027luxurie\u0027 from Old french (842-ca. 1400) \u0027luxurie\u0027 () from Latin \u0027luxuria\u0027 (rankness, luxury) from \u0027luxus\u0027 (extravagance, luxury)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Very wealthy and comfortable surroundings\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Something desirable but expensive\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"“[…] We are engaged in a great work, a treatise on our river fortifications, perhaps? But since when did army officers afford the luxury of amanuenses in this simple republic \", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"Something very pleasant but not really needed in life\", \"priority\":4}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }