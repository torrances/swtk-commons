package org.swtk.commons.dict.wiktionary.generated.j.u.s;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryJUS000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("jussi", "{\"term\":\"jussi\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A delicate fibre used for making clothing in the Philippines\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"2004\u0027\u0027, Steven Flusty, \u0027De-Coca-colonization: making the globe from the inside out\u0027 (page 95\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Organza is now often substituted for \u0027\u0027jussi\u0027\u0027, both being light, transparent fabrics well suited to the heat and humidity of the Philippines\", \"priority\":3}]}, \"synonyms\":{}}");

	add("justification", "{\"term\":\"justification\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"middle french (ca. 1400-1600)\"], \"text\":\"From Middle french (ca. 1400-1600) \u0027justification\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A reason, explanation, or excuse which provides convincing, morally acceptable support for behavior or for a belief or occurrence\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The alignment of text to the left margin (left justification), the right margin (right justification), or both margins (full justification\", \"priority\":2}]}, \"synonyms\":{}}");

	add("justifier", "{\"term\":\"justifier\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|justify|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who, or that which, justifies (some belief or action\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }