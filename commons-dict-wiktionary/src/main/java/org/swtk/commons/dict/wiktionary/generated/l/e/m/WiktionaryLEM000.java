package org.swtk.commons.dict.wiktionary.generated.l.e.m;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryLEM000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("lema", "{\"term\":\"lema\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"ancient greek (to 1453)\"], \"text\":\"First coined 1789, from Ancient greek (to 1453) \u0027λήμη\u0027 (lang\u003dgrc)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The secretion of the tarsal glands of the eye\", \"priority\":1}]}, \"synonyms\":{}}");

	add("lemmatisation", "{\"term\":\"lemmatisation\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|lemmatise|ation|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The process of finding the lemma that corresponds to an inflected form of a word\", \"priority\":1}]}, \"synonyms\":{}}");

	add("lemmatiser", "{\"term\":\"lemmatiser\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|lemmatise|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A program or function that attempts to find the lemma that corresponds to an inflected word\", \"priority\":1}]}, \"synonyms\":{}}");

	add("lemming", "{\"term\":\"lemming\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Norwegian\", \"old norse\"], \"text\":\"From Norwegian from Old norse {{m|non|lómundr||lemming}}, perhaps from \u0027luomek\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A small Arctic and Subarctic rodent from any of six genera of similar rodents\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Any member of a group given to conformity or groupthink, especially a group poised to follow someone off a follow a leader off a cliff\", \"priority\":2}]}, \"synonyms\":{}}");

	add("lemniscate", "{\"term\":\"lemniscate\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Latin\"], \"text\":\"From Latin {{m|la|lēmniscātus||decorated with ribbons}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The infinity symbol (∞\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The lemniscate of Bernoulli\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Any of a variety of quartic functions producing similar figure-of-eight closed curves\", \"priority\":3}]}, \"synonyms\":{}}");

	add("lemon", "{\"term\":\"lemon\", \"etymology\":{\"influencers\":[], \"languages\":[\"Arabic\", \"English\", \"Persian\", \"old french (842-ca. 1400)\", \"ottoman turkish (1500-1928)\", \"Sanskrit\"], \"text\":\"From Old french (842-ca. 1400) {{m|fro|lymon||citrus}}, from Arabic {{m|ar|لَيْمُون}} or Ottoman turkish (1500-1928) {{m|ota|لیمون|tr\u003dlimon}}, from Persian {{m|fa|لیمو|tr\u003dlimu}}\u0026lt;ref\u0026gt;{{R:Etymonline|lemon}}\u0026lt;/ref\u0026gt;. Cognate with Sanskrit {{m|sa|निम्बू||lime|tr\u003dnimbū}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A yellowish citrus fruit\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A semitropical evergreen tree, \u0027Citrus limon\u0027, that bears such fruits\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A taste or flavour/flavor of lemons\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A more or less bright shade of yellow associated with lemon fruits\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"A defective or inadequate item\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"He didn’t realise until he’d paid for it that the car was a \u0027\u0027lemon\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"Smart; cheeky, vocal\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"2009\u0027\u0027, ‘Why I love paying tax’, \u0027The Times\u0027, 12 Oct 2009\", \"priority\":8},{\"upperType\":\"NOUN\", \"text\":\"Obviously Emin is not the first public figure to get \u0027\u0027lemon\u0027\u0027 over tax increases\", \"priority\":9},{\"upperType\":\"NOUN\", \"text\":\"Favor\", \"priority\":10},{\"upperType\":\"NOUN\", \"text\":\"A thousand quid for that motor? Do me a \u0027\u0027lemon\u0027\u0027, I could get it for half that\", \"priority\":11},{\"upperType\":\"NOUN\", \"text\":\"A piece of fanfiction involving explicit sex (named after the erotic anime series\", \"priority\":12}]}, \"synonyms\":{}}");

	add("lemonade", "{\"term\":\"lemonade\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"French\"], \"text\":\"From French \u0027limonade\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A still beverage consisting of lemon and sugar, sometimes ice, and water, used mainly as a refreshment\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A carbonated beverage made from lemon or artificial lemon flavouring/flavoring, water and sugar\", \"priority\":2}]}, \"synonyms\":{}}");

	add("lemongrass", "{\"term\":\"lemongrass\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|lemon|grass|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One of various species of grass of the genus \u0027Cymbopogon\u0027, which have a lemon-like taste and aroma, and are used as herbs\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Sourgrass\", \"priority\":2}]}, \"synonyms\":{}}");

	add("lemuria", "{\"term\":\"lemuria\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{rfe|lang\u003dla}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Mythical lost country, continent, or island proposed to explain the existence of lemurs and their relatives on two continents\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A religious feast of Ancient Rome during which rites were performed to exorcise the malevolent ghosts of the dead from their homes\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }