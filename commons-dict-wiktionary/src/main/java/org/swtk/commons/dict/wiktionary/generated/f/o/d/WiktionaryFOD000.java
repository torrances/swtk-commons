package org.swtk.commons.dict.wiktionary.generated.f.o.d;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryFOD000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("fodder", "{\"term\":\"fodder\", \"etymology\":{\"influencers\":[], \"languages\":[\"old english (ca. 450-1100)\", \"Danish\", \"German\", \"English\", \"middle english (1100-1500)\", \"West Frisian\", \"Dutch\", \"Swedish\"], \"text\":\"From Middle english (1100-1500) from Old english (ca. 450-1100) {{m|ang|fōdor}}, from Proto-germanic {{m|gem-pro|*fōdrą}} (compare West frisian \u0027foer\u0027 Dutch \u0027voer\u0027 \u0027pasture, fodder\u0027, German \u0027futter\u0027 \u0027feed\u0027, Danish and Swedish \u0027foder\u0027), from {{m|gem-pro|*fōdô}} \u0027food\u0027, from Proto-indo-european {{m|ine-pro|*pat-}} \u0027to feed\u0027, {{m|ine-pro|*peh₂-||to guard, graze, feed}}. More at food.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Food for animals; that which is fed to cattle, horses, and sheep, such as hay, cornstalks, vegetables, etc\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1598?\u0027\u0027, William Shakespeare, \u0027Two Gentlemen of Verona\u0027,Act I, scene I\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"The sheep for \u0027\u0027fodder\u0027\u0027 follow the shepherd, the shepherd for food follows not the sheep\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A load: various English units of weight or volume based upon standardized cartloads of certain commodities, generally around 1000 kg\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"1866\u0027\u0027, James Edwin Thorold Rogers, \u0027A History of Agriculture and Prices in England\u0027, Volume 1, p. 168\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"Now measured by the old hundred, that is, 108 lbs. the charrus contains nearly 19 1/2 hundreds, that is it corresponds to the fodder, or fother, of modern times\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"tracing Tracing paper\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"Something which serves as inspiration or encouragement, \u0027especially\u0027 for satire or humour\", \"priority\":8},{\"upperType\":\"NOUN\", \"text\":\"According to the audio commentary on “Treehouse Of Horror III,” some of the creative folks at The Simpsons were concerned that the “Treehouse Of Horror” franchise had outworn its welcome and was rapidly running out of classic horror or science-fiction \u0027\u0027fodder\u0027\u0027 to spoof\", \"priority\":9},{\"upperType\":\"NOUN\", \"text\":\"The text to be operated on (anagrammed, etc.) within a clue\", \"priority\":10},{\"upperType\":\"NOUN\", \"text\":\"2009\u0027\u0027, \u0026quot;Colin Blackburn\u0026quot;, \u0027another 1-off cryptic clue.\u0027 (on newsgroup \u0027rec.puzzles.crosswords\", \"priority\":11},{\"upperType\":\"NOUN\", \"text\":\"In (part of) Shelley\u0027s poem Ozymandias is a \u0026quot;crumbling statue\u0026quot;. If this is the explanation then the clue is not a reverse cryptic in the same was as GEGS -\u0026gt; SCRAMBLED EGGS but a normal clue where where the \u0027\u0027fodder\u0027\u0027 and anagrind are *both* indirect\", \"priority\":12},{\"upperType\":\"NOUN\", \"text\":\"2012\u0027\u0027, David Astle, \u0027Puzzled: Secrets and clues from a life in words\", \"priority\":13},{\"upperType\":\"NOUN\", \"text\":\"Insane Roman! (4)\u0027 Look in \u0027-sane Roman\u0027 and you\u0027ll uncover NERO, the \u0027insane Roman\u0027. Dovetailing the signpost \u0026amp;mdash; \u0027in\u0027 \u0026amp;mdash; with the hidden \u0027\u0027fodder\u0027\u0027 \u0026amp;mdash; \u0027sane Roman\u0027 \u0026amp;mdash; is inspired, an embedded style of signposting\", \"priority\":14}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }