package org.swtk.commons.dict.wiktionary.generated.r.u.p;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryRUP000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("rupelian", "{\"term\":\"rupelian\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{rfe|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A subdivision of the Oligocene epoch\", \"priority\":1}]}, \"synonyms\":{}}");

	add("rupture", "{\"term\":\"rupture\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"middle french (ca. 1400-1600)\", \"Latin\"], \"text\":\"From Middle french (ca. 1400-1600) \u0027rupture\u0027 or its source, Latin \u0027ruptura\u0027 (a breaking, rupture (of a limb or vein), in {{etyl) also a road, a field, a form of feudal tenure, a tax, etc.}}, from the participle stem of \u0027rumpere\u0027 ()\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A burst, split, or break\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Milto\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Hatch from the egg, that soon, / Bursting with kindly \u0027\u0027rupture\u0027\u0027, forth disclosed / Their callow young\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A social breach or break, between individuals or groups\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"E. Everet\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"He knew that policy would disincline Napoleon from a \u0027\u0027rupture\u0027\u0027 with his family\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"A break or tear in soft tissue, such as a muscle\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"A failure mode in which a tough ductile material pulls apart rather than cracking\", \"priority\":8}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }