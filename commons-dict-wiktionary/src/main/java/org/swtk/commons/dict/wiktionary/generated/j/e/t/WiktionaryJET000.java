package org.swtk.commons.dict.wiktionary.generated.j.e.t;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryJET000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("jete", "{\"term\":\"jete\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{borrowing|fr|jeté|lang\u003den}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A leap from one foot to the other in which one leg appears to be \u0026quot;thrown\u0026quot; in the direction of the movement\", \"priority\":1}]}, \"synonyms\":{}}");

	add("jets", "{\"term\":\"jets\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The name of an NFL franchise located in New York City\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Plural form of Jet\", \"priority\":2}]}, \"synonyms\":{}}");

	add("jetiquette", "{\"term\":\"jetiquette\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{blend|jet|etiquette|lang\u003den}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The standard of acceptable behavior to be observed by passengers of an airplane\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1973\u0027\u0027, w:Peg Peg Bracken, \u0027But I Wouldn\u0027t Have Missed It for the World!: The Pleasures and Perils of an Unseasoned Traveler\u0027, Harcourt Brace Jovanovich (1973), ISBN 9780151149841, page 251\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A nice sense of when to speak, if ever, to the person beside one is a good part of airplane manners, or \u0027\u0027jetiquette\", \"priority\":3}]}, \"synonyms\":{}}");

	add("jetliner", "{\"term\":\"jetliner\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|jet|liner|lang\u003den}} ; {{blend|turbojet|airliner|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A jet-propelled airliner\", \"priority\":1}]}, \"synonyms\":{}}");

	add("jettage", "{\"term\":\"jettage\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{rfe|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Certain charges levied upon incoming vessels at a port\", \"priority\":1}]}, \"synonyms\":{}}");

	add("jettiness", "{\"term\":\"jettiness\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"blackness; the condition of being jetty\", \"priority\":1}]}, \"synonyms\":{}}");

	add("jettison", "{\"term\":\"jettison\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"old french (842-ca. 1400)\", \"Latin\", \"anglo-norman\"], \"text\":\"From Anglo-norman \u0027getteson\u0027 from Old french (842-ca. 1400) \u0027getaison\u0027 from \u0027geter\u0027 \u0027jeter\u0027 (modern French: would be *\u0027\u0027 () like \u0027pendaison\u0027 ; possibly from a *\u0027iectātiō, iectātiōn-\u0027, from *\u0027iectātus\u0027 \u0026lt; \u0027iectāre\u0027, from Latin {{m|la|iactō}}. Cognate to \u0027jetsam\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Collectively, items that have been or are about to be ejected from a boat or balloon\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The action of jettisoning items\", \"priority\":2}]}, \"synonyms\":{}}");

	add("jetway", "{\"term\":\"jetway\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{compound|jet|way|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An aerobridge\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }