package org.swtk.commons.dict.wiktionary.generated.s.e.t;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionarySET000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("sets", "{\"term\":\"sets\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"set Set theory\", \"priority\":1}]}, \"synonyms\":{}}");

	add("sett", "{\"term\":\"sett\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Norwegian Bokm√•l\"], \"text\":\"From the verb \u0027sette\u0027 also from English \u0027set\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"a (\u0027most senses\", \"priority\":1}]}, \"synonyms\":{}}");

	add("setback", "{\"term\":\"setback\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{wikipedia}}From set + back\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An obstacle, delay, or disadvantage\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"After some initial \u0027\u0027setbacks\u0027\u0027, the expedition went safely on its way\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"The required distance between a structure and a road\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A step-like recession in a wall\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"Setbacks\u0027\u0027 were initially used for structural reasons, but now are often mandated by land use codes.\u0027\u0026lt;!--The following were probably from Webster\u0027s 1913 and really need cleaning up--\u0026gt\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"A backset; a countercurrent; an eddy\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"A backset; a check; a repulse; a relapse\", \"priority\":7}]}, \"synonyms\":{}}");

	add("setdown", "{\"term\":\"setdown\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|set|down|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The humbling of a person by act or words\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A retort or a reproof that has a humbling effect\", \"priority\":2}]}, \"synonyms\":{}}");

	add("settlement", "{\"term\":\"settlement\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|settle|ment|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The state of being settled\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A colony that is newly established; a place or region newly settled\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A community of people living together, such as a hamlet, village, town, or city\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"The gradual sinking of a building. Fractures or dislocations caused by settlement\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"The delivery of goods by the seller and payment for them by the buyer, under a previously agreed trade or transaction or contract entered into\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"A disposition of property, or the act of granting it\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"A settled place of abode; residence; a right growing out of legal residence\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"A resolution of a dispute\", \"priority\":8}]}, \"synonyms\":{}}");

	add("settlor", "{\"term\":\"settlor\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|settle|or|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A person who settles property on express trust for the benefit of beneficiaries\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }