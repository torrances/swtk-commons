package org.swtk.commons.dict.wiktionary.generated.n.a.h;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryNAH000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("nahcolite", "{\"term\":\"nahcolite\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From its chemical formula sodium|Nahydrogen|Hcarbon|Coxygen|O\u0026lt;sub\u0026gt;3\u0026lt;/sub\u0026gt;, named in 1929.\u0026lt;ref\u0026gt;Richard V. Gaines, H. Catherine W. Skinner, Eugene E. Foord, Brian Mason, and Abraham Rosenzweig: \u0027Dana\u0027s new mineralogy\u0027, John Wiley \u0026amp; Sons, 1997\u0026lt;/ref\u0026gt;\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A saline evaporite, consisting of sodium bicarbonate, found in lake sediments in California\", \"priority\":1}]}, \"synonyms\":{}}");

	add("nahualism", "{\"term\":\"nahualism\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\"], \"text\":\"{{suffix|nahual|ism|lang\u003den}}. The first element is from \u0027nahualli\u0027 (sorcerer, spirit, animal form a person may take)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The Mesoamerican belief that (certain) human beings can transform into animals\", \"priority\":1}]}, \"synonyms\":{}}");

	add("nahuatlism", "{\"term\":\"nahuatlism\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|Nahuatl|ism|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A word or phrase borrowed from the Nahuatl language\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Any mode of speaking that is exclusive to the Nahuatl people\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }