package org.swtk.commons.dict.wiktionary.generated.h.e.w;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryHEW000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("hewer", "{\"term\":\"hewer\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|hew|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who hews\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1904\u0027\u0027, Kellogg Durland, \u0027Among the Fife Miners\u0027 (page 62\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"By certain arrangements in the former method the miner not only gets the coal but makes all proppings and repairs, so that the face moves much more slowly than with the other method where the \u0027\u0027hewers\u0027\u0027 devote all their time to getting the coal\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"1975\u0027\u0027, Lawrence Schofer, \u0027The Formation of a Modern Labor Force, Upper Silesia, 1865-1914\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"All three groups were paid less per shift than coal miners. In 1905, for instance, \u0027\u0027hewers\u0027\u0027 in coal mines received an average 3.79 marks per shift; in zinc and lead, 3.10 marks; in iron, 2.36 marks\", \"priority\":5}]}, \"synonyms\":{}}");

	add("hewettite", "{\"term\":\"hewettite\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|Hewett|ite|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A monoclinic-prismatic red mineral containing calcium, hydrogen, oxygen, and vanadium\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }