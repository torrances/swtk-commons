package org.swtk.commons.dict.wiktionary.generated.p.i.v;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryPIV000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("pivaloyloxymethyl", "{\"term\":\"pivaloyloxymethyl\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A protecting group, (CH\u0026lt;sub\u0026gt;3\u0026lt;/sub\u0026gt;)\u0026lt;sub\u0026gt;3\u0026lt;/sub\u0026gt;C-CO-O-CH\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt;, used in organic synthesis and to produce prodrugs\", \"priority\":1}]}, \"synonyms\":{}}");

	add("pivenfrine", "{\"term\":\"pivenfrine\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A sympathomimetic and mydriatic agent\", \"priority\":1}]}, \"synonyms\":{}}");

	add("pivotality", "{\"term\":\"pivotality\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The quality or degree of being pivotal\", \"priority\":1}]}, \"synonyms\":{}}");

	add("pivotalness", "{\"term\":\"pivotalness\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The quality or degree of being pivotal\", \"priority\":1}]}, \"synonyms\":{}}");

	add("pivoter", "{\"term\":\"pivoter\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|pivot|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who or that which pivots, especially a muscle\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }