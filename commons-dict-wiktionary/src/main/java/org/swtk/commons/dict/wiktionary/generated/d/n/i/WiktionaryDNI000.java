package org.swtk.commons.dict.wiktionary.generated.d.n.i;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryDNI000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("dnieper", "{\"term\":\"dnieper\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Russian\"], \"text\":\"From Russian \u0027днепр\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A large river flowing southerly through Russia, Belarus, and Ukraine into the Black Sea\", \"priority\":1}]}, \"synonyms\":{}}");

	add("dniester", "{\"term\":\"dniester\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"from Sarmatian dānu nazdya \u0026quot;the close river\u0026quot; (the Dniepr being the far one)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A river in Eastern Europe, flowing through Ukraine and Moldova to the Black Sea\", \"priority\":1}]}, \"synonyms\":{}}");

	add("dnipropetrovsk", "{\"term\":\"dnipropetrovsk\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Russian\", \"Ukrainian\"], \"text\":\"From Ukrainian \u0027дніпропетро́вськ\u0027 from \u0027дніпро́\u0027 (dnieper river) + \u0027\u0027 (петро́вський) after Soviet revolutionary w:Grigory Petrovsky|Hryhoriy Ivanovych Petrovsky (Grigory Ivanovich Petrovsky). Compare Russian \u0027днепропетро́вск\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A city on the Dnieper in Ukraine, administrative centre of Dnipropetrovsk province\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Dnipropetrovsk province (\u0027oblast\u0027), in south-eastern Ukraine\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }