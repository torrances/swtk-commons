package org.swtk.commons.dict.wiktionary.generated.s.m.u;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionarySMU000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("smuggler", "{\"term\":\"smuggler\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From smuggle + -er\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who smuggles things\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A vessel employed in smuggling\", \"priority\":2}]}, \"synonyms\":{}}");

	add("smugness", "{\"term\":\"smugness\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{suffix|smug|ness|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The state or quality of being smug\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The result or product of being smug\", \"priority\":2}]}, \"synonyms\":{}}");

	add("smuon", "{\"term\":\"smuon\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{prefix|s|muon|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A hypothetical boson superpartner of a muon whose existence is implied by supersymmetry\", \"priority\":1}]}, \"synonyms\":{}}");

	add("smutfic", "{\"term\":\"smutfic\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|smut|fic|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An explicit erotic fanfic which which focuses on sexual activity with little consideration of context or plot\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Such fan fiction collectively\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }