package org.swtk.commons.dict.wiktionary.generated.i.r.v;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryIRV000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("irvine", "{\"term\":\"irvine\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\"], \"text\":\"Probably from words cognate with Welsh \u0027ir, yr\u0027 \u0026quot;green, fresh\u0026quot; + \u0027afon\u0027 \u0026quot;water\u0026quot;.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A river in Scotland\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A hamlet in Alberta, Canad\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A city in California\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A city in Kentucky\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"derived from the place name\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"transferred from the surname\", \"priority\":6}]}, \"synonyms\":{}}");

	add("irving", "{\"term\":\"irving\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\"], \"text\":\"Variant of the Scottish habitational surname Irvine, probably from word cognate with Welsh \u0027ir, yr\u0027 \u0026quot;green,fresh\u0026quot; + \u0027afon\u0027 \u0026quot;water\u0026quot;.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"transferred from the surname. Used by English-speaking Jews to anglicize Israel\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A city in Illinoi\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A city in Texa\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A town in Wisconsin\", \"priority\":4}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }