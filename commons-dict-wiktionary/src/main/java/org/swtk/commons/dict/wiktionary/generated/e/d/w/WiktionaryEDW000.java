package org.swtk.commons.dict.wiktionary.generated.e.d.w;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryEDW000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("edward", "{\"term\":\"edward\", \"etymology\":{\"influencers\":[{}], \"languages\":[\"old english (ca. 450-1100)\", \"English\"], \"text\":\"From Old english (ca. 450-1100) {{m|ang|Ēadweard}}, from {{m|ang|eād||rich}} + \u0027weard\u0027 (guard)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"1605\u0027\u0027 William Camden: \u0027Remains Concerning Britain\u0027. John Russell Smith, 1870. p.77\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The Christian humility of King \u0027\u0027Edward\u0027\u0027 the Confessour brought such credit to this name, that since that time it hath been most usual in all estates\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"1765\u0027\u0027 Laurence Sterne: \u0027Tristram Shandy\u0027, Book IV, Chapter 8\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"Heaven is my witness! that in the warmest transport of my wishes for the prosperity of my child, I never once wished to crown his head with more glory and honour than what George or \u0027\u0027Edward\u0027\u0027 would have spread around it\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"1994\u0027\u0027 w:Caroline Caroline Knapp, \u0027The Merry Recluse: A Life in Essays\u0027, Counterpoint Press 2004, ISBN 1582433135, page 169\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"There\u0027s a world of difference between the name \u0027\u0027Edward\u0027\u0027, which sounds rather regal and stuffy (Edwardian) and the name Eddie, which sounds like a guy on the bus\", \"priority\":6}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }