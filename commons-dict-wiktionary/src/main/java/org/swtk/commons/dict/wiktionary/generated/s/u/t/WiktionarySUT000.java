package org.swtk.commons.dict.wiktionary.generated.s.u.t;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionarySUT000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("sutegana", "{\"term\":\"sutegana\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Japanese\"], \"text\":\"From Japanese {{m|ja|捨て仮名|tr\u003dsutegana}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Japanese small okurigana used with kanbun or small kana used for diphthongs\", \"priority\":1}]}, \"synonyms\":{}}");

	add("sutling", "{\"term\":\"sutling\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The business or occupation of a sutler\", \"priority\":1}]}, \"synonyms\":{}}");

	add("suttee", "{\"term\":\"suttee\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"Sanskrit\"], \"text\":\"{{PIE root|en|h₁es}}From Sanskrit \u0027sc\u003ddeva|सती|tr\u003dsatī́ \u0027 (good and virtuous or faithful wife) from \u0027sc\u003ddeva|सत्|tr\u003dsát\u0027 (true, good, right etc.) In English usage since 1786.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The custom and/or act of a Hindu woman giving herself up to be cremated on her husband’s funeral pyre as a sign of her devotion to her late spouse.Category:English terms derived from Hindi\", \"priority\":1}]}, \"synonyms\":{}}");

	add("suttle", "{\"term\":\"suttle\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{rfe|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The weight of a commodity shipment after deduction of the weight of the container, before allowance of tret\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }