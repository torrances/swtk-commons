package org.swtk.commons.dict.wiktionary.generated.r.i.m;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryRIM000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("rimfire", "{\"term\":\"rimfire\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|rim|fire|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Type of firearm cartridge where the primer is in the back rim, rather than a central primer cap. They are cheap to produce but can not be reloaded with powder\", \"priority\":1}]}, \"synonyms\":{}}");

	add("rimland", "{\"term\":\"rimland\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|rim|land|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"a land or region at the periphery of a heartland\", \"priority\":1}]}, \"synonyms\":{}}");

	add("rimrock", "{\"term\":\"rimrock\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|rim|rock|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An outcrop of hard rock, often in the form of a cliff at the edge of a plateau, that forms the margin of a gravel deposit\", \"priority\":1}]}, \"synonyms\":{}}");

	add("rimshot", "{\"term\":\"rimshot\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|rim|shot|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A percussive note in which the drumstick hits both the head and the rim of the drum\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A percussive sting or flourish used to punctuate a joke in a cabaret or vaudeville act\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }