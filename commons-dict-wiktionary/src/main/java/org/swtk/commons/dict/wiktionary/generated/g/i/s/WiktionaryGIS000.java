package org.swtk.commons.dict.wiktionary.generated.g.i.s;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryGIS000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("gismu", "{\"term\":\"gismu\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"lojban\"], \"text\":\"Lojban \u0027gismu\u0027\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A brivla that is a basic Lojban root, rather than being derived through compounding or borrowing\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1997\u0027\u0027, John W. Cowan, \u0027The Complete Lojban Language\u0027, ISBN 0966028309\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"When two \u0027\u0027gismu\u0027\u0027 are adjacent, the first one modifies the second, and the selbri takes its place structure from the rightmost word\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"2005\u0027\u0027, Brian D. Eubanks, \u0027Wicked Cool Java\u0027, [http://books.google.com/books?vid\u003dISBN1593270615\u0026amp;id\u003ddiqHjRjMhW0C\u0026amp;pg\u003dPA91\u0026amp;lpg\u003dPA91\u0026amp;dq\u003dgismu\u0026amp;sig\u003d595_-1oi-rueN1aFqJhXGlYn9Fc\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"There are over 1,300 root \u0027\u0027gismu\u0027\u0027 in the Lojban vocabulary, and these structures form a very interesting ontology of their own\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"2008\u0027\u0027, Robin Turner and Nick Nicholas, \u0027Lojban for Beginners\u0027:\u0026lt;sup\u0026gt;[http://jbotcan.org/docs/l4b/less2.html]\u0026lt;/sup\u0026gt;\u0026lt;sup\u0026gt;[http://www.lojban.org/tiki/tiki-index.php?page\u003dLojban%20Tutorial:%20Lesson%202]\u0026lt;/sup\u0026gt\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"The main type of word used as a selbri is a \u0027\u0027gismu\u0027\u0027, or root-word\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"Each \u0027\u0027gismu\u0027\u0027 is exactly five letters long, and has one of two consonant-vowel patterns:CVCCV or CCVCV (e.g. rafsi or bridi). The \u0027\u0027gismu\u0027\u0027 are built so as to minimize listening errors in a noisy environment. A \u0027\u0027gismu\u0027\u0027 has at least two combining forms, known as rafsi. One is the \u0027\u0027gismu\u0027\u0027 itself; one is the \u0027\u0027gismu\u0027\u0027 with the final vowel deleted. Certain \u0027\u0027gismu\u0027\u0027 have additional, shorter rafsi assigned. Up to three of these shorter rafsi may be assigned to a \u0027\u0027gismu\u0027\u0027, depending on frequency of usage of the \u0027\u0027gismu\u0027\u0027 in building complex concepts and on availability of these shorter rafsi. Short rafsi use only certain combinations of letters from the \u0027\u0027gismu\u0027\u0027, and are of the forms CCV, CVC, CVV or CV\u0027V\", \"priority\":8}]}, \"synonyms\":{}}");

	add("gissard", "{\"term\":\"gissard\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"Perhaps a corruption of {{m|en|geeseherd}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who tends to geese; a\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1584\u0027\u0027, R. Scot, \u0027Disc. Witchcraft\u0027, \u0027Disc. diuels \u0026amp; spirits\u0027, chapter xxiv, page 528\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"The Thebans had not a better shepherd than S. Wendeline, nor a better \u0027\u0027gissard\u0027\u0027 to keepe their geese than Gallus\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"1688\u0027\u0027, R. Holme, \u0027Armoury\u0027, book iii, page 193/1\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"St. Gallus the Patron of \u0027\u0027Gissards\u0027\u0027, or Keepers of Geese\", \"priority\":5}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }