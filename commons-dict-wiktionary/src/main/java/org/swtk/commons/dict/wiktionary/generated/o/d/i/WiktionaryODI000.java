package org.swtk.commons.dict.wiktionary.generated.o.d.i;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryODI000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("odia", "{\"term\":\"odia\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The official language of the state of Odisha, India\", \"priority\":1}]}, \"synonyms\":{}}");

	add("odin", "{\"term\":\"odin\", \"etymology\":{\"influencers\":[], \"languages\":[\"English\", \"old norse\"], \"text\":\"{{wikipedia|Wōdanaz}}From Old norse \u0027óðinn\u0027 akin to Old High German \u0027wotan\u0027 and Old English {{m|ang|Wōden}}. From Proto-germanic {{m|gem-pro|*Wōdanaz}}, derived from Proto-germanic {{m|gem-pro|*wōþuz||rage, manic inspiration, furor poeticus}}, from Proto-indo-european {{m|ine-pro|*weh₂t-||to be excited}}. Compare Old Norse \u0027óðr\u0027 and Dutch \u0027woede\u0027 (rage) and \u0027woeden\u0027 (to rage), Latin {{m|la|vātēs}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The supreme god of the Germanic and Norse pantheons, the leader of the Æsir, after whom Wednesday is named; the god of war and poetry, the husband of Frigga, the father of Balder, Hod, Hermod, Thor and Tyr. The Allfather, the One-eyed, the Terrible One, the Father of Battle\", \"priority\":1}]}, \"synonyms\":{}}");

	add("odinism", "{\"term\":\"odinism\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The modern name given to the pre-Christian faith of Northern Europe as practised by such groups as Angles, Saxons, Jutes, Vikings etc. Also known as Wodenism, Wotanism, Asatru, Heathenism, and Norse Paganism, and by other names\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }