package org.swtk.commons.dict.wiktionary.generated.s.a.x;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionarySAX000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("saxion", "{\"term\":\"saxion\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{prefix|s|axion|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A hypothetical elementary particle, the bosonic superpartner of the axion\", \"priority\":1}]}, \"synonyms\":{}}");

	add("saxony", "{\"term\":\"saxony\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A historic realm and modern state of Germany\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1759\u0027\u0027, George Sale \u0026amp;\u0026amp;nbsp;al., \u0027The Modern Part of an Universal History\u0027, : \u0027History of the German Empire\u0027, [http://books.google.com/books?id\u003ddFtjAAAAMAAJ\u0026amp;pg\u003dPA2 page\u0026amp;nbsp;2\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Since the reign of \u0027Charlemagne\u0027, this country is divided into \u0027High High\u0027 and \u0027Low Germany\u0027... the provinces of \u0027Lower Germany\u0027 towards the north conſiſt of the Low Country\u0027 of the \u0027Rhine\u0027, \u0027Triers\u0027, \u0027Cologn\u0027, \u0027Mentz\u0027, Weſtphalia\u0027, Heſſe\u0027, Brunſwic\u0027, Miſnia\u0027, Luſatia\u0027, \u0027High \u0027\u0027Saxony\u0027\u0027\u0027 upon the \u0027Elbe\u0027, \u0027Low \u0027\u0027Saxony\u0027\u0027\u0027 upon the \u0027Elbe\u0027, \u0027Mecklenburg\u0027, \u0027Lauenburg\u0027, \u0027Brandenburg\u0027, \u0027Magdeburg\u0027, and \u0027Pomerania\", \"priority\":3}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }