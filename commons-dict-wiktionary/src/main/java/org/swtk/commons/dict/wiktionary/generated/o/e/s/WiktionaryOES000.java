package org.swtk.commons.dict.wiktionary.generated.o.e.s;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryOES000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("oesophagectomy", "{\"term\":\"oesophagectomy\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|oesophagus|ectomy|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"the surgical procedure for the removal of all, or part of the oesophagus\", \"priority\":1}]}, \"synonyms\":{}}");

	add("oestrus", "{\"term\":\"oestrus\", \"etymology\":{\"influencers\":[{},{}], \"languages\":[\"English\", \"ancient greek (to 1453)\", \"Latin\"], \"text\":\"From Latin {{m|la|oestrus||gadfly, sting, frenzy}}, from Ancient greek (to 1453) {{m|grc|οἶστρος}}, from Proto-indo-european {{m|ine-pro|*eis}}, used to form words denoting passion; see also Latin \u0027ira\u0027 (anger) Lithuanian \u0027aistra\u0027 (violent passion) Avestan \u0027|tr\u003daesma\u0027 (tr\u003daesma)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A biting fly of the genus \u0027Oestrus\u0027; a botfly\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"A bite or sting\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A passion or frenzy\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"A female animal\u0027s readiness to mate; heat, rut\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"2001\u0027\u0027, David Lodge, \u0027Thinks\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"‘It’s the supremely human act, freely to fuck, not because you are on heat, or in \u0027\u0027oestrus\u0027\u0027, like an animal, but to give and receive pleasure.’\", \"priority\":6}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }