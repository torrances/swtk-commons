package org.swtk.commons.dict.wiktionary.generated.e.m.o;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryEMO000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("emotionalism", "{\"term\":\"emotionalism\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{suffix|emotional|ism|lang\u003den}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An emotional state of mind, a tendency to regard things in an emotional manner; emotional behaviour or characteristics\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1977\u0027\u0027, \u0027A Savage War of Peace\u0027, New York Review Books 2006, p. 304\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Yet once the \u0027\u0027emotionalism\u0027\u0027 of those ‘great gusts of words’ had been flensed, the flesh and bones of the programme looked disappointingly like the mixture as before […\", \"priority\":3}]}, \"synonyms\":{}}");

	add("emotionality", "{\"term\":\"emotionality\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|emotional|ity|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The state or quality of being emotional\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The observable component of emotion\", \"priority\":2}]}, \"synonyms\":{}}");

	add("emotionology", "{\"term\":\"emotionology\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|emotion|ology|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The way a group of people think and speak about their emotions\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The multidisciplinary study of emotions\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }