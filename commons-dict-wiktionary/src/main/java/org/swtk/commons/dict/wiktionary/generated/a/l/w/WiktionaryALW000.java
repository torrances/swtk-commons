package org.swtk.commons.dict.wiktionary.generated.a.l.w;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryALW000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("alwaysness", "{\"term\":\"alwaysness\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{suffix|always|ness|lang\u003den}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The state, quality, or condition of being or lasting indefinitely or always; continuity; indefiniteness; eternity\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"2007\u0027\u0027, Dirk Van Hulle, Mark Nixon, \u0027All Sturm and No Drang\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"It seems that \u0027\u0027alwaysness\u0027\u0027 can have its beginning and its end, or at least that \u0027\u0027alwaysness\u0027\u0027 can be conceived as once having begun and once having to end\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"2007\u0027\u0027, Nancy Cook, \u0027Gender Relations in Global Perspective\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"This sense of “\u0027\u0027alwaysness\u0027\u0027” is reproduced by the group in question through shared rememberings, notably the telling ofstories, an activity in which both women and men participate\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"2011\u0027\u0027, Tim O\u0027Brien, \u0027Tomcat in Love\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"Yet I loved her, so much, and still do, and always will, because that is love, the unending \u0027\u0027alwaysness\u0027\u0027, and I therefore wished only to please her, to reduce her absence, to pretend I was under the care of a fictitious shrink by the name of Dr\", \"priority\":7}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }