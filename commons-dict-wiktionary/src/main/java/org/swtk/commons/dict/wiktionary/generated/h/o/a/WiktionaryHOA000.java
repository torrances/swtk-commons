package org.swtk.commons.dict.wiktionary.generated.h.o.a;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryHOA000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("hoar", "{\"term\":\"hoar\", \"etymology\":{\"influencers\":[], \"languages\":[\"old english (ca. 450-1100)\", \"German\", \"English\", \"middle english (1100-1500)\"], \"text\":\"From Middle english (1100-1500) \u0027hore\u0027 from Old english (ca. 450-1100) {{m|ang|hār||hoar, hoary, grey, old}}, from Proto-germanic {{m|gem-pro|*hairaz||grey}}, from Proto-indo-european {{m|ine-pro|*ḱēy(w)-}}, {{m|ine-pro|*ḱyē(w)-||grey}}. Cognate with German \u0027hehr\u0027 (noble, sublime)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A white or greyish-white colour\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"Hoariness; antiquity\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Covered with the awful \u0027\u0027hoar\u0027\u0027 of innumerable ages\", \"priority\":3}]}, \"synonyms\":{}}");

	add("hoarder", "{\"term\":\"hoarder\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{suffix|hoard|er|lang\u003den}}.\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"One who hoards; one who accumulates, collects, and stores\", \"priority\":1}]}, \"synonyms\":{}}");

	add("hoarseness", "{\"term\":\"hoarseness\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"From {{suffix|hoarse|ness|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The quality of being hoarse; of having a dry harsh voice\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"The \u0027\u0027hoarseness\u0027\u0027 of her voice was caused by years of smoking\", \"priority\":2}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }