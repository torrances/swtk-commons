package org.swtk.commons.dict.wiktionary.generated.v.i.e;  import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryVIE000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("viewability", "{\"term\":\"viewability\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|viewable|ity|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The state or condition of being viewable\", \"priority\":1}]}, \"synonyms\":{}}");

	add("viewdata", "{\"term\":\"viewdata\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|view|data|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"An information retrieval service of the 1970s and 1980s permitting subscribers to access a remote database and receive requested data on a video display\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1981\u0027\u0027, Rex Winsbury, \u0027Viewdata in Action: A Comparative Study of Prestelâ€Ž\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"A \u0027\u0027viewdata\u0027\u0027 system can be succinctly described as an information and message service\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"1981\u0027\u0027, \u0027New Scientist\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"The two European systems use an \u0026quot;alphamosaic\u0026quot; method of delivering data to a \u0027\u0027viewdata\u0027\u0027 terminal screen\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"1982\u0027\u0027, Alan Gilchrist, \u0027Minis, Micros and Terminals for Libraries and Information Services\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"A particularly important application of intelligent \u0027\u0027viewdata\u0027\u0027 terminals is in telesoftware where the viewdata network is used for the distribution\", \"priority\":7}]}, \"synonyms\":{}}");

	add("viewer", "{\"term\":\"viewer\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|view|er|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Someone that views some spectacle; an onlooker or spectator\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"2010\u0027\u0027, Antonio Saggio, \u0027A Secret van Gogh: His Motif and Motives\u0027, ISBN 9781447507932\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"This sensation of an object becoming alive is a characteristic that, I believe, seizes all \u0027\u0027viewers\u0027\u0027 of a van Gogh. The Bible goes beyond being a simple still-life object to become a living thing, an expression of strength, an existence that emanates from itself, beyond the painting surface to participate in our very lives\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"Someone who watches television\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"Any optical device used to view photographic slides\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"A program that displays the contents of a file of digital images; an image viewer or file viewer\", \"priority\":6}]}, \"synonyms\":{}}");

	add("viewership", "{\"term\":\"viewership\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{suffix|viewer|ship|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"collectively, the viewers of a television program\", \"priority\":1}]}, \"synonyms\":{}}");

	add("viewscreen", "{\"term\":\"viewscreen\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"c. 1945 {{compound|view|screen|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"A display screen for a device such as a computer, a camera, or a video recorder\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	} 	 	public static boolean has(String term) { 		return null != get(term); 	} }