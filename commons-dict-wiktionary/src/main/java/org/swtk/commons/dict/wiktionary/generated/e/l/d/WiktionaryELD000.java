package org.swtk.commons.dict.wiktionary.generated.e.l.d;  import java.util.Collection; import java.util.HashMap; import java.util.Map;  import org.swtk.common.dict.dto.wiktionary.Entry;  import com.trimc.blogger.commons.utils.GsonUtils;  public class WiktionaryELD000 {  	private static Map<String, Entry> map = new HashMap<String, Entry>();  	static { 			add("eldercare", "{\"term\":\"eldercare\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|elder|care|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Care for elderly people\", \"priority\":1}]}, \"synonyms\":{}}");

	add("elderdom", "{\"term\":\"elderdom\", \"etymology\":{\"influencers\":[], \"languages\":[\"old english (ca. 450-1100)\", \"English\", \"middle english (1100-1500)\", \"West Frisian\", \"Swedish\"], \"text\":\"From Middle english (1100-1500) {{m|enm|*elderdom}}, \u0027alderdom\u0027 from Old english (ca. 450-1100) {{m|ang|ealdordōm||greatness, power, authority, lordship, eldership, rule, dominion, magistracy, principality, superiority, preeminence, primacy, government, any official position involving command of others, beginning}}, equivalent to {{suffix|elder|dom|lang\u003den}}. Cognate with West frisian \u0027âlderdom\u0027 (eld, old age, antiquity) Swedish \u0027ålderdom\u0027 (eld, age)\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"Authority; dominion\", \"priority\":1},{\"upperType\":\"NOUN\", \"text\":\"1852\u0027\u0027, Alfred (King of England), \u0027The whole works of King Alfred the Great\", \"priority\":2},{\"upperType\":\"NOUN\", \"text\":\"Both of these things Moses fulfilled, when he refused \u0027\u0027elderdom\u0027\u0027 or authority\", \"priority\":3},{\"upperType\":\"NOUN\", \"text\":\"Preeminence; superiority\", \"priority\":4},{\"upperType\":\"NOUN\", \"text\":\"1773\u0027\u0027, Paulus Orosius, Daines Barrington, \u0027The Anglo-Saxon version\", \"priority\":5},{\"upperType\":\"NOUN\", \"text\":\"The name of one of these was Claudius, who arrogated to himself \u0027\u0027elderdom\u0027\u0027 over the others, though they by no means allowed his claim of superiority, hut quarrelled with him\", \"priority\":6},{\"upperType\":\"NOUN\", \"text\":\"The authority, rule, or office of an elder\", \"priority\":7},{\"upperType\":\"NOUN\", \"text\":\"2005\u0027\u0027, Philip Sheldrake, \u0027The new Westminster dictionary of Christian spirituality\", \"priority\":8},{\"upperType\":\"NOUN\", \"text\":\"Hence the popular belief that \u0027\u0027elderdom\u0027\u0027 was most of all at home on Russian soil\", \"priority\":9},{\"upperType\":\"NOUN\", \"text\":\"The state of being an elder, or of being older; elderhood\", \"priority\":10},{\"upperType\":\"NOUN\", \"text\":\"2010\u0027\u0027, Janis Abrahms Spring, Ph.D., Janis Abrahms Spring, Michael Spring, \u0027Life with Pop: Lessons on Caring for an Aging Parent\", \"priority\":11},{\"upperType\":\"NOUN\", \"text\":\"Thanks to him, I have a better sense of what it takes to morph gracefully into \u0027\u0027elderdom\", \"priority\":12},{\"upperType\":\"NOUN\", \"text\":\"The role or influence of an elder or elders\", \"priority\":13},{\"upperType\":\"NOUN\", \"text\":\"2005\u0027\u0027, Hortense Calisher, \u0027Tattoo for a Slave\", \"priority\":14},{\"upperType\":\"NOUN\", \"text\":\"The weight of \u0027\u0027elderdom\u0027\u0027 in our family was like a drapery to be taken for granted. In which anyone could at times gratefully hide\", \"priority\":15}]}, \"synonyms\":{}}");

	add("elderflower", "{\"term\":\"elderflower\", \"etymology\":{\"influencers\":[], \"languages\":[], \"text\":\"{{compound|elder|flower|lang\u003den}}\"}, \"definitions\":{\"list\":[{\"upperType\":\"NOUN\", \"text\":\"The blossom of the elderberry, often specifically the European species \u0027Sambucus nigra\", \"priority\":1}]}, \"synonyms\":{}}");

 	}  	private static void add(String term, String json) { 		map.put(term, GsonUtils.toObject(json, Entry.class)); 	}  	public static Entry get(String term) { 		return map.get(term); 	}  	public static boolean has(String term) { 		return null != get(term); 	}  	public static Collection<String> terms() { 		return map.keySet(); 	} }